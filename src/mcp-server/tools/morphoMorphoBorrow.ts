/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { morphoMorphoBorrow } from "../../funcs/morphoMorphoBorrow.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: components.MorphoBorrowRequest$inboundSchema,
};

export const tool$morphoMorphoBorrow: ToolDefinition<typeof args> = {
  name: "morpho-morpho-borrow",
  description: `Borrow from Market

Borrow tokens from a Morpho Market against supplied collateral.

The position could be liquidated when a borrower's Loan-To-Value (LTV) exceeds the
Liquidation Loan-To-Value (LLTV) threshold of the market.

A Morpho Market is a primitive lending pool that pairs one collateral asset with one
loan asset. Each market is isolated (meaning risks are contained within each
individual market), immutable (cannot be changed after deployment), and will persist
as long as the blockchain it is deployed on is live.
                    <Info>
                    **Required Allowances**

                        In order to make this transaction, token allowances need to be set for the following contracts.

                     - \`Morpho\`
                    </Info>
                `,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await morphoMorphoBorrow(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
