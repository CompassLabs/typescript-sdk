/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { aerodromeSlipstreamAerodromeSlipstreamLiquidityProvisionWithdraw } from "../../funcs/aerodromeSlipstreamAerodromeSlipstreamLiquidityProvisionWithdraw.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request:
    components
      .AerodromeSlipstreamWithdrawLiquidityProvisionRequest$inboundSchema,
};

export const tool$aerodromeSlipstreamAerodromeSlipstreamLiquidityProvisionWithdraw:
  ToolDefinition<typeof args> = {
    name:
      "aerodrome-slipstream-aerodrome-slipstream-liquidity-provision-withdraw",
    description: `Withdraw an LP Position

Withdraw an existing Liquidity Provider (LP) position.

This endpoint allows users to remove their tokens from an LP position, effectively
closing their participation in the liquidity pool. The withdrawal process involves
specifying the LP position to be closed, and the response will confirm the
successful removal of liquidity, providing users with details about the withdrawn
tokens and any remaining balances. This functionality is essential for users who
wish to exit their liquidity provision activities, enabling them to reclaim their
assets and potentially reallocate them to other investment opportunities. The
endpoint ensures a smooth and secure withdrawal process, facilitating users'
strategic management of their decentralized finance (DeFi) portfolios.
                    <Info>
                    **Required Allowances**

                        In order to make this transaction, token allowances need to be set for the following contracts.

                     - \`AerodromeSlipstreamNonfungiblePositionManager\`
                    </Info>
                `,
    args,
    tool: async (client, args, ctx) => {
      const [result, apiCall] =
        await aerodromeSlipstreamAerodromeSlipstreamLiquidityProvisionWithdraw(
          client,
          args.request,
          { fetchOptions: { signal: ctx.signal } },
        ).$inspect();

      if (!result.ok) {
        return {
          content: [{ type: "text", text: result.error.message }],
          isError: true,
        };
      }

      const value = result.value;

      return formatResult(value, apiCall);
    },
  };
