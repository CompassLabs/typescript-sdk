/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { pendlePendleLiquidity } from "../../funcs/pendlePendleLiquidity.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: components.PendleManageLiquidityRequest$inboundSchema,
};

export const tool$pendlePendleLiquidity: ToolDefinition<typeof args> = {
  name: "pendle-pendle-liquidity",
  description: `Manage Liquidity (LP)

Manage liquidity in a Pendle Market.

Liquidity is supplied to or withdrawn from the market with a token of the user's choice.

Representation of the liquidity provided is in the form of market's Liquidity
Provider Token (LP) received by the user.

A sufficient allowance for the Pendle Router on the appropriate token contract must be set
beforehand. For \`action\` set to \`SUPPLY\`, this is the \`token\` contract. For \`action\` set to \`WTIHDRAW\`, this is the market contract (LP).
                    <Info>
                    **Required Allowances**

                        In order to make this transaction, token allowances need to be set for the following contracts.

                     - \`PendleRouter\`
                    </Info>
                `,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await pendlePendleLiquidity(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
