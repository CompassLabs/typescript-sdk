/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { aerodromeSlipstreamAerodromeSlipstreamSwapBuyExactly } from "../../funcs/aerodromeSlipstreamAerodromeSlipstreamSwapBuyExactly.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: components.AerodromeSlipstreamBuyExactlyRequest$inboundSchema,
};

export const tool$aerodromeSlipstreamAerodromeSlipstreamSwapBuyExactly:
  ToolDefinition<typeof args> = {
    name: "aerodrome-slipstream-aerodrome-slipstream-swap-buy-exactly",
    description: `Swap - into Specified Amount

This endpoint facilitates the trading of tokens by allowing users to specify the
exact amount of the output token they wish to receive.

Utilizing the Aerodrome Slipstream protocol, the system calculates the necessary
amount of the input token required to achieve the desired output. This operation is
particularly useful for users who have a specific target amount of the output token
in mind and are willing to provide the corresponding input token amount. The
transaction is executed with consideration of current market conditions, including
liquidity and price impact, ensuring that the trade is completed efficiently and
effectively.
                    <Info>
                    **Required Allowances**

                        In order to make this transaction, token allowances need to be set for the following contracts.

                     - \`AerodromeSlipstreamRouter\`
                    </Info>
                `,
    args,
    tool: async (client, args, ctx) => {
      const [result, apiCall] =
        await aerodromeSlipstreamAerodromeSlipstreamSwapBuyExactly(
          client,
          args.request,
          { fetchOptions: { signal: ctx.signal } },
        ).$inspect();

      if (!result.ok) {
        return {
          content: [{ type: "text", text: result.error.message }],
          isError: true,
        };
      }

      const value = result.value;

      return formatResult(value, apiCall);
    },
  };
