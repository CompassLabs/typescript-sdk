/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { aerodromeSlipstreamAerodromeSlipstreamLiquidityProvisionMint } from "../../funcs/aerodromeSlipstreamAerodromeSlipstreamLiquidityProvisionMint.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request:
    components.AerodromeSlipstreamMintLiquidityProvisionRequest$inboundSchema,
};

export const tool$aerodromeSlipstreamAerodromeSlipstreamLiquidityProvisionMint:
  ToolDefinition<typeof args> = {
    name: "aerodrome-slipstream-aerodrome-slipstream-liquidity-provision-mint",
    description: `Open a New LP Position

Initiate a new Liquidity Provider (LP) position by minting tokens.

This endpoint allows users to open a new LP position, enabling them to participate
in liquidity provision. The minting process involves creating a new position with
specified parameters, such as token amounts and pool details. The response will
confirm the successful creation of the LP position, providing users with the
necessary information to manage their newly minted position. This functionality is
crucial for users looking to expand their liquidity provision activities, offering
them the opportunity to engage in decentralized finance (DeFi) markets effectively.
                    <Info>
                    **Required Allowances**

                        In order to make this transaction, token allowances need to be set for the following contracts.

                     - \`AerodromeSlipstreamNonfungiblePositionManager\`
                    </Info>
                `,
    args,
    tool: async (client, args, ctx) => {
      const [result, apiCall] =
        await aerodromeSlipstreamAerodromeSlipstreamLiquidityProvisionMint(
          client,
          args.request,
          { fetchOptions: { signal: ctx.signal } },
        ).$inspect();

      if (!result.ok) {
        return {
          content: [{ type: "text", text: result.error.message }],
          isError: true,
        };
      }

      const value = result.value;

      return formatResult(value, apiCall);
    },
  };
