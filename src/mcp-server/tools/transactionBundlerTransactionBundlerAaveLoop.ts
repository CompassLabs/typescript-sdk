/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { transactionBundlerTransactionBundlerAaveLoop } from "../../funcs/transactionBundlerTransactionBundlerAaveLoop.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: components.AaveLoopRequest$inboundSchema,
};

export const tool$transactionBundlerTransactionBundlerAaveLoop: ToolDefinition<
  typeof args
> = {
  name: "transaction-bundler-transaction-bundler-aave-loop",
  description: `AAVE Leverage Long/Short

Execute an Aave looping strategy that involves repeated supply and borrow
operations.

This endpoint creates a multicall transaction that performs a series of operations:
1. Approves and supplies initial token
2. For each loop:
    - Borrows another token
    - Swaps borrowed token back to supply token
    - Supplies the swapped tokens

The transaction must be authorized using the /authorization endpoint to prevent replay attacks.`,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] =
      await transactionBundlerTransactionBundlerAaveLoop(
        client,
        args.request,
        { fetchOptions: { signal: ctx.signal } },
      ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
