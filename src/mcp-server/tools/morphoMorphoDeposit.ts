/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { morphoMorphoDeposit } from "../../funcs/morphoMorphoDeposit.js";
import * as components from "../../models/components/index.js";
import { formatResult, ToolDefinition } from "../tools.js";

const args = {
  request: components.MorphoDepositRequest$inboundSchema,
};

export const tool$morphoMorphoDeposit: ToolDefinition<typeof args> = {
  name: "morpho-morpho-deposit",
  description: `Deposit to Vault

Deposit tokens into a Morpho Vault to earn passive yield from interest paid by
borrowers.

Each vault accepts one unique token that can be deposited.

A Morpho Vault has one loan asset and can allocate deposits to multiple Morpho
markets. Users can deposit into a vault to start earning passive yield from interest
paid by borrowers. Vaults feature automated risk management, actively curating risk
exposure for all deposited assets so users don't need to make these decisions
themselves. Users maintain full control over their assets, can monitor the vault's
state at any time, and withdraw their liquidity at their discretion.
                    <Info>
                    **Required Allowances**

                        In order to make this transaction, token allowances need to be set for the following contracts.

                     - \`<vault-contract-address>\`
                    </Info>
                `,
  args,
  tool: async (client, args, ctx) => {
    const [result, apiCall] = await morphoMorphoDeposit(
      client,
      args.request,
      { fetchOptions: { signal: ctx.signal } },
    ).$inspect();

    if (!result.ok) {
      return {
        content: [{ type: "text", text: result.error.message }],
        isError: true,
      };
    }

    const value = result.value;

    return formatResult(value, apiCall);
  },
};
