/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { aaveV3AaveAaveSupportedTokens } from "../funcs/aaveV3AaveAaveSupportedTokens.js";
import { aaveV3AaveAvgRate } from "../funcs/aaveV3AaveAvgRate.js";
import { aaveV3AaveBorrow } from "../funcs/aaveV3AaveBorrow.js";
import { aaveV3AaveHistoricalTransactions } from "../funcs/aaveV3AaveHistoricalTransactions.js";
import { aaveV3AaveLiquidityChange } from "../funcs/aaveV3AaveLiquidityChange.js";
import { aaveV3AaveRate } from "../funcs/aaveV3AaveRate.js";
import { aaveV3AaveRepay } from "../funcs/aaveV3AaveRepay.js";
import { aaveV3AaveReserveOverview } from "../funcs/aaveV3AaveReserveOverview.js";
import { aaveV3AaveStdRate } from "../funcs/aaveV3AaveStdRate.js";
import { aaveV3AaveSupply } from "../funcs/aaveV3AaveSupply.js";
import { aaveV3AaveTokenPrice } from "../funcs/aaveV3AaveTokenPrice.js";
import { aaveV3AaveUserPositionPerToken } from "../funcs/aaveV3AaveUserPositionPerToken.js";
import { aaveV3AaveUserPositionSummary } from "../funcs/aaveV3AaveUserPositionSummary.js";
import { aaveV3AaveWithdraw } from "../funcs/aaveV3AaveWithdraw.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class AaveV3 extends ClientSDK {
  /**
   * Aave Supported Tokens
   *
   * @remarks
   * Returns the list of supported tokens on Aave for the specified network, along
   * with key metadata.
   *
   * For each token, the response includes:
   * - The symbol and contract address.
   * - Whether the token is currently enabled for supplying (depositing).
   * - Whether it is enabled for borrowing.
   */
  async aaveAaveSupportedTokens(
    request: operations.V1AaveAaveSupportedTokensRequest,
    options?: RequestOptions,
  ): Promise<components.AaveSupportedTokensResponse> {
    return unwrapAsync(aaveV3AaveAaveSupportedTokens(
      this,
      request,
      options,
    ));
  }

  /**
   * Interest Rates
   *
   * @remarks
   * Returns the latest APY and APR rates for a specified token on Aave, for both
   * deposits and loans.
   *
   * **Annual percentage yield (APY)** is the yearly return/cost after continuous
   * compounding of the per-second rate stored on-chain. This value is the same value as
   * seen the on [app.aave.com](
   * https://app.aave.com/)
   * but more up-to-date as it is taken directly from the
   * blockchain every time this endpoint is called.
   *
   * **Annual percentage rate (APR)** is the yearly simple interest rate (no
   * compounding).
   *
   * For APY/APR on loans Aave offers both stable and fixed rates on certain tokens.
   */
  async aaveRate(
    request: operations.V1AaveRateRequest,
    options?: RequestOptions,
  ): Promise<components.AaveRateResponse> {
    return unwrapAsync(aaveV3AaveRate(
      this,
      request,
      options,
    ));
  }

  /**
   * Interest Rates: Time Average
   *
   * @remarks
   * Provides time-weighted averages of deposit and borrow rates for Aave reserves.
   */
  async aaveAvgRate(
    request: operations.V1AaveAvgRateRequest,
    options?: RequestOptions,
  ): Promise<components.AaveAvgRateResponse> {
    return unwrapAsync(aaveV3AaveAvgRate(
      this,
      request,
      options,
    ));
  }

  /**
   * Interest Rates: Standard Deviation
   *
   * @remarks
   * Returns the historical standard deviation of lending and borrowing rates for Aave
   * reserves, illustrating market volatility.
   */
  async aaveStdRate(
    request: operations.V1AaveStdRateRequest,
    options?: RequestOptions,
  ): Promise<components.AaveSTDRateResponse> {
    return unwrapAsync(aaveV3AaveStdRate(
      this,
      request,
      options,
    ));
  }

  /**
   * Reserve Overview
   *
   * @remarks
   * Returns key metrics for Aave Reserves:
   * - Total Supplied (TVL) in USD
   * - Total Borrowed in USD
   * - Utilization Ratio
   *
   * See below for more info:
   */
  async aaveReserveOverview(
    request: operations.V1AaveReserveOverviewRequest,
    options?: RequestOptions,
  ): Promise<components.AaveReserveOverviewResponse> {
    return unwrapAsync(aaveV3AaveReserveOverview(
      this,
      request,
      options,
    ));
  }

  /**
   * Token Prices
   *
   * @remarks
   * This endpoint retrieves the current price of a specified token in USD as
   * determined by the Aave protocol.
   *
   * It utilizes the Aave V3 Oracle to fetch the token price, ensuring accurate and up-
   * to-date information. The request requires the token identifier and the blockchain
   * network (chain) on which the token resides. The response provides the token price in
   * a standardized format, converted from Wei to the base currency decimals defined by
   * Aave.
   */
  async aaveTokenPrice(
    request: operations.V1AaveTokenPriceRequest,
    options?: RequestOptions,
  ): Promise<components.AaveTokenPriceResponse> {
    return unwrapAsync(aaveV3AaveTokenPrice(
      this,
      request,
      options,
    ));
  }

  /**
   * Liquidity Index
   *
   * @remarks
   * This endpoint retrieves the change in the reserve liquidity index between two
   * provided blocks.
   *
   * This is then converted to a percentage change. The liquidity index represents the
   * change in debt and interest accrual over each block. Aave does not store individual
   * user balances directly. Instead, it keeps a scaled balance and uses the liquidity
   * index to compute real balances dynamically. If a user was to have deposited tokens
   * at the start block, a positive liquidity index change will represent accrued
   * interest and a profit. If tokens were borrowed at the start block, this debt will
   * increase, compound on itself and represent large debt. The reverse in both cases is
   * true if the liquidity index is negative.
   */
  async aaveLiquidityChange(
    request: operations.V1AaveLiquidityChangeRequest,
    options?: RequestOptions,
  ): Promise<components.AaveLiquidityChangeResponse> {
    return unwrapAsync(aaveV3AaveLiquidityChange(
      this,
      request,
      options,
    ));
  }

  /**
   * Positions - Total
   *
   * @remarks
   * This endpoint retrieves a comprehensive summary of a user's position on the AAVE
   * platform.
   *
   * It provides key financial metrics including the total collateral deposited, total
   * debt accrued, available borrowing capacity, liquidation threshold, maximum loan-to-
   * value ratio, and the health factor of the user's account. These metrics are
   * calculated by aggregating data across all open positions held by the user, offering
   * a holistic view of their financial standing within the AAVE ecosystem.
   */
  async aaveUserPositionSummary(
    request: operations.V1AaveUserPositionSummaryRequest,
    options?: RequestOptions,
  ): Promise<components.AaveUserPositionSummaryResponse> {
    return unwrapAsync(aaveV3AaveUserPositionSummary(
      this,
      request,
      options,
    ));
  }

  /**
   * Positions - per Token
   *
   * @remarks
   * This endpoint retrieves the user's position for a specific token on the AAVE
   * platform.
   *
   * It provides key financial metrics including the current aToken balance, current
   * stable debt, current variable debt, principal stable debt, principal variable debt,
   * stable borrow rate, stable borrow rate for new loans, variable borrow rate, and
   * liquidity rate. These metrics are calculated by aggregating data across all open
   * positions held by the user for the specified token, offering a detailed view of
   * their financial standing within the AAVE ecosystem.
   */
  async aaveUserPositionPerToken(
    request: operations.V1AaveUserPositionPerTokenRequest,
    options?: RequestOptions,
  ): Promise<components.AaveUserPositionPerTokenResponse> {
    return unwrapAsync(aaveV3AaveUserPositionPerToken(
      this,
      request,
      options,
    ));
  }

  /**
   * Historical Transactions
   *
   * @remarks
   * This endpoint retrieves historical transactions for a user on the AAVE platform.
   *
   * It returns a list of transactions including deposits, withdrawals, borrows, and
   * repayments. Each transaction includes details such as the token, amount, timestamp,
   * and transaction type. This provides a comprehensive view of the user's historical
   * activity within the AAVE protocol.
   *
   * ⚠️ Data comes from the official Aave subgraph (
   * https://github.com/aave/protocol-subgraphs)
   * and thus this particular endpoint may be less reliable than our other endpoints. ⚠️
   */
  async aaveHistoricalTransactions(
    request: operations.V1AaveHistoricalTransactionsRequest,
    options?: RequestOptions,
  ): Promise<components.AaveHistoricalTransactionsResponse> {
    return unwrapAsync(aaveV3AaveHistoricalTransactions(
      this,
      request,
      options,
    ));
  }

  /**
   * Supply/Lend
   *
   * @remarks
   * By supplying assets, users can earn interest on their deposits.
   *
   * The supplied collateral can be used as a basis for borrowing other assets, allowing
   * users to leverage their positions. In combination with a trading protocol, this can
   * create leverage.
   *
   * Overall, this endpoint is a critical component for users looking to maximize their
   * asset utility within the AAVEv3 ecosystem, providing both earning potential and
   * borrowing flexibility.
   *                     <Info>
   *                     **Required Allowances**
   *
   *                         In order to make this transaction, token allowances need to be set for the following contracts.
   *
   *                      - `AaveV3Pool`
   *                     </Info>
   */
  async aaveSupply(
    request: components.AaveSupplyRequest,
    options?: RequestOptions,
  ): Promise<components.TransactionResponse> {
    return unwrapAsync(aaveV3AaveSupply(
      this,
      request,
      options,
    ));
  }

  /**
   * Borrow
   *
   * @remarks
   * You will pay interest for your borrows.
   *
   * Price changes in the assets may lead to some or all of your collateral being
   * liquidated, if the borrow position becomes unhealthy.
   *                     <Info>
   *                     **Required Allowances**
   *
   *                         In order to make this transaction, token allowances need to be set for the following contracts.
   *
   *                      - `AaveV3Pool`
   *                     </Info>
   */
  async aaveBorrow(
    request: components.AaveBorrowRequest,
    options?: RequestOptions,
  ): Promise<components.TransactionResponse> {
    return unwrapAsync(aaveV3AaveBorrow(
      this,
      request,
      options,
    ));
  }

  /**
   * Repay Loans
   *
   * @remarks
   * This endpoint allows users to repay a portion or the entirety of their borrowed
   * tokens on the Aave platform.
   *
   * By repaying borrowed amounts, users can improve their health factor, which is a
   * measure of the safety of their loan position. A higher health factor reduces the
   * risk of liquidation, ensuring a more secure borrowing experience. The endpoint
   * requires specifying the chain and the details of the repayment transaction,
   * including the amount and the asset to be repaid.
   *                     <Info>
   *                     **Required Allowances**
   *
   *                         In order to make this transaction, token allowances need to be set for the following contracts.
   *
   *                      - `AaveV3Pool`
   *                     </Info>
   */
  async aaveRepay(
    request: components.AaveRepayRequest,
    options?: RequestOptions,
  ): Promise<components.TransactionResponse> {
    return unwrapAsync(aaveV3AaveRepay(
      this,
      request,
      options,
    ));
  }

  /**
   * Unstake
   *
   * @remarks
   * This endpoint facilitates the withdrawal of collateral from the Aave protocol.
   *
   * Users can withdraw a portion or all of their collateral, which may increase the risk
   * of liquidation if there are outstanding borrows. The withdrawal process also
   * includes the collection of any interest earned on the collateral. It is important
   * for users to carefully consider their outstanding debts and the potential impact on
   * their liquidation threshold before proceeding with a withdrawal. This endpoint is
   * designed to provide a seamless and efficient way to manage your collateral within
   * the Aave ecosystem.
   *                     <Info>
   *                     **Required Allowances**
   *
   *                         In order to make this transaction, token allowances need to be set for the following contracts.
   *
   *                      - `AaveV3Pool`
   *                     </Info>
   */
  async aaveWithdraw(
    request: components.AaveWithdrawRequest,
    options?: RequestOptions,
  ): Promise<components.TransactionResponse> {
    return unwrapAsync(aaveV3AaveWithdraw(
      this,
      request,
      options,
    ));
  }
}
