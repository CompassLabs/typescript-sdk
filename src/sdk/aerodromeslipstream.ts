/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { aerodromeSlipstreamAerodromeSlipstreamLiquidityProvisionIncrease } from "../funcs/aerodromeSlipstreamAerodromeSlipstreamLiquidityProvisionIncrease.js";
import { aerodromeSlipstreamAerodromeSlipstreamLiquidityProvisionMint } from "../funcs/aerodromeSlipstreamAerodromeSlipstreamLiquidityProvisionMint.js";
import { aerodromeSlipstreamAerodromeSlipstreamLiquidityProvisionPositions } from "../funcs/aerodromeSlipstreamAerodromeSlipstreamLiquidityProvisionPositions.js";
import { aerodromeSlipstreamAerodromeSlipstreamLiquidityProvisionWithdraw } from "../funcs/aerodromeSlipstreamAerodromeSlipstreamLiquidityProvisionWithdraw.js";
import { aerodromeSlipstreamAerodromeSlipstreamPoolPrice } from "../funcs/aerodromeSlipstreamAerodromeSlipstreamPoolPrice.js";
import { aerodromeSlipstreamAerodromeSlipstreamSwapBuyExactly } from "../funcs/aerodromeSlipstreamAerodromeSlipstreamSwapBuyExactly.js";
import { aerodromeSlipstreamAerodromeSlipstreamSwapSellExactly } from "../funcs/aerodromeSlipstreamAerodromeSlipstreamSwapSellExactly.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class AerodromeSlipstream extends ClientSDK {
  /**
   * List LP Positions
   *
   * @remarks
   * Retrieve the total number of Liquidity Provider (LP) positions associated with a
   * specific sender.
   *
   * This endpoint allows users to query and obtain detailed information about their LP
   * positions, including the number of active positions they hold. The response model,
   * AerodromeLPPositionsInfo, provides a structured representation of the LP positions
   * data, ensuring clarity and ease of use. This functionality is essential for users
   * managing their liquidity provision activities, enabling them to make informed
   * decisions based on their current positions.
   */
  async aerodromeSlipstreamLiquidityProvisionPositions(
    request: operations.V1AerodromeSlipstreamLiquidityProvisionPositionsRequest,
    options?: RequestOptions,
  ): Promise<components.AerodromeLPPositionsResponse> {
    return unwrapAsync(
      aerodromeSlipstreamAerodromeSlipstreamLiquidityProvisionPositions(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Pool Price
   *
   * @remarks
   * This endpoint retrieves the current price of a pool, indicating how many token0
   * you can purchase for 1 token1.
   *
   * Note that this is an instantaneous price and may change during any trade. For a more
   * accurate representation of the trade ratios between the two assets, consider using
   * the quote endpoint.
   */
  async aerodromeSlipstreamPoolPrice(
    request: operations.V1AerodromeSlipstreamPoolPriceRequest,
    options?: RequestOptions,
  ): Promise<components.AerodromeSlipstreamPoolPriceResponse> {
    return unwrapAsync(aerodromeSlipstreamAerodromeSlipstreamPoolPrice(
      this,
      request,
      options,
    ));
  }

  /**
   * Swap - from Specified Amount
   *
   * @remarks
   * This endpoint allows users to trade a specific amount of one token into another
   * token using the Aerodrome Slipstream protocol.
   *
   * The transaction is executed by specifying the exact amount of the input token to be
   * sold, and the system calculates the amount of the output token that will be
   * received. The operation ensures that the trade is conducted within the constraints
   * of the current market conditions, taking into account the liquidity and price
   * impact. This endpoint is suitable for users who want to sell a precise quantity of a
   * token and are willing to accept the resulting amount of the other token.
   *                     <Info>
   *                     **Required Allowances**
   *
   *                         In order to make this transaction, token allowances need to be set for the following contracts.
   *
   *                      - `AerodromeSlipstreamRouter`
   *                     </Info>
   */
  async aerodromeSlipstreamSwapSellExactly(
    request: components.AerodromeSlipstreamSellExactlyRequest,
    options?: RequestOptions,
  ): Promise<components.TransactionResponse> {
    return unwrapAsync(aerodromeSlipstreamAerodromeSlipstreamSwapSellExactly(
      this,
      request,
      options,
    ));
  }

  /**
   * Swap - into Specified Amount
   *
   * @remarks
   * This endpoint facilitates the trading of tokens by allowing users to specify the
   * exact amount of the output token they wish to receive.
   *
   * Utilizing the Aerodrome Slipstream protocol, the system calculates the necessary
   * amount of the input token required to achieve the desired output. This operation is
   * particularly useful for users who have a specific target amount of the output token
   * in mind and are willing to provide the corresponding input token amount. The
   * transaction is executed with consideration of current market conditions, including
   * liquidity and price impact, ensuring that the trade is completed efficiently and
   * effectively.
   *                     <Info>
   *                     **Required Allowances**
   *
   *                         In order to make this transaction, token allowances need to be set for the following contracts.
   *
   *                      - `AerodromeSlipstreamRouter`
   *                     </Info>
   */
  async aerodromeSlipstreamSwapBuyExactly(
    request: components.AerodromeSlipstreamBuyExactlyRequest,
    options?: RequestOptions,
  ): Promise<components.TransactionResponse> {
    return unwrapAsync(aerodromeSlipstreamAerodromeSlipstreamSwapBuyExactly(
      this,
      request,
      options,
    ));
  }

  /**
   * Open a New LP Position
   *
   * @remarks
   * Initiate a new Liquidity Provider (LP) position by minting tokens.
   *
   * This endpoint allows users to open a new LP position, enabling them to participate
   * in liquidity provision. The minting process involves creating a new position with
   * specified parameters, such as token amounts and pool details. The response will
   * confirm the successful creation of the LP position, providing users with the
   * necessary information to manage their newly minted position. This functionality is
   * crucial for users looking to expand their liquidity provision activities, offering
   * them the opportunity to engage in decentralized finance (DeFi) markets effectively.
   *                     <Info>
   *                     **Required Allowances**
   *
   *                         In order to make this transaction, token allowances need to be set for the following contracts.
   *
   *                      - `AerodromeSlipstreamNonfungiblePositionManager`
   *                     </Info>
   */
  async aerodromeSlipstreamLiquidityProvisionMint(
    request: components.AerodromeSlipstreamMintLiquidityProvisionRequest,
    options?: RequestOptions,
  ): Promise<components.TransactionResponse> {
    return unwrapAsync(
      aerodromeSlipstreamAerodromeSlipstreamLiquidityProvisionMint(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Increase an LP Position
   *
   * @remarks
   * Increase the liquidity of an existing Liquidity Provider (LP) position.
   *
   * This endpoint allows users to add more tokens to their current LP position,
   * enhancing their participation in liquidity provision. By increasing liquidity, users
   * can potentially earn more rewards and improve their position in the pool. The
   * process involves specifying additional token amounts and updating the pool details.
   * The response will confirm the successful increase of the LP position, providing
   * users with updated information about their enhanced position. This functionality is
   * vital for users aiming to optimize their liquidity provision strategy, enabling them
   * to adapt to market conditions and maximize their returns in decentralized finance
   * (DeFi) markets.
   *                     <Info>
   *                     **Required Allowances**
   *
   *                         In order to make this transaction, token allowances need to be set for the following contracts.
   *
   *                      - `AerodromeSlipstreamRouter`
   *                     </Info>
   */
  async aerodromeSlipstreamLiquidityProvisionIncrease(
    request: components.AerodromeSlipstreamIncreaseLiquidityProvisionRequest,
    options?: RequestOptions,
  ): Promise<components.TransactionResponse> {
    return unwrapAsync(
      aerodromeSlipstreamAerodromeSlipstreamLiquidityProvisionIncrease(
        this,
        request,
        options,
      ),
    );
  }

  /**
   * Withdraw an LP Position
   *
   * @remarks
   * Withdraw an existing Liquidity Provider (LP) position.
   *
   * This endpoint allows users to remove their tokens from an LP position, effectively
   * closing their participation in the liquidity pool. The withdrawal process involves
   * specifying the LP position to be closed, and the response will confirm the
   * successful removal of liquidity, providing users with details about the withdrawn
   * tokens and any remaining balances. This functionality is essential for users who
   * wish to exit their liquidity provision activities, enabling them to reclaim their
   * assets and potentially reallocate them to other investment opportunities. The
   * endpoint ensures a smooth and secure withdrawal process, facilitating users'
   * strategic management of their decentralized finance (DeFi) portfolios.
   *                     <Info>
   *                     **Required Allowances**
   *
   *                         In order to make this transaction, token allowances need to be set for the following contracts.
   *
   *                      - `AerodromeSlipstreamNonfungiblePositionManager`
   *                     </Info>
   */
  async aerodromeSlipstreamLiquidityProvisionWithdraw(
    request: components.AerodromeSlipstreamWithdrawLiquidityProvisionRequest,
    options?: RequestOptions,
  ): Promise<components.TransactionResponse> {
    return unwrapAsync(
      aerodromeSlipstreamAerodromeSlipstreamLiquidityProvisionWithdraw(
        this,
        request,
        options,
      ),
    );
  }
}
