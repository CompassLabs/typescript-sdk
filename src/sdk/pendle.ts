/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { pendlePendleLiquidity } from "../funcs/pendlePendleLiquidity.js";
import { pendlePendleMarket } from "../funcs/pendlePendleMarket.js";
import { pendlePendleMarkets } from "../funcs/pendlePendleMarkets.js";
import { pendlePendlePositions } from "../funcs/pendlePendlePositions.js";
import { pendlePendlePt } from "../funcs/pendlePendlePt.js";
import { pendlePendleRedeemYield } from "../funcs/pendlePendleRedeemYield.js";
import { pendlePendleYt } from "../funcs/pendlePendleYt.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Pendle extends ClientSDK {
  /**
   * Get Market & User Position
   *
   * @remarks
   * Get the market's implied APY, maturity date and the associated token data.
   *
   * The user position is only included if 'user_address' parameter is included.
   */
  async pendleMarket(
    request: operations.V1PendleMarketRequest,
    options?: RequestOptions,
  ): Promise<components.PendleGetMarketResponse> {
    return unwrapAsync(pendlePendleMarket(
      this,
      request,
      options,
    ));
  }

  /**
   * List User's Market Positions
   *
   * @remarks
   * List the user's SY, PT, YT and LP positions for all markets on a given chain.
   */
  async pendlePositions(
    request: operations.V1PendlePositionsRequest,
    options?: RequestOptions,
  ): Promise<components.PendleListUserPositionsResponse> {
    return unwrapAsync(pendlePendlePositions(
      this,
      request,
      options,
    ));
  }

  /**
   * List Market Data
   *
   * @remarks
   * Get a list of active markets.
   */
  async pendleMarkets(
    request: operations.V1PendleMarketsRequest,
    options?: RequestOptions,
  ): Promise<components.PendleListMarketsResponse> {
    return unwrapAsync(pendlePendleMarkets(
      this,
      request,
      options,
    ));
  }

  /**
   * Trade Principal Token (PT)
   *
   * @remarks
   * Trade market's Principal Token (PT) for fixed yield.
   *
   * PT is traded with a token of the user's choice.
   *
   * A sufficient allowance for the Pendle Router on the appropriate token contract must be set
   * beforehand. For `action` set to `BUY`, this is the `token` contract. For `action` set to `SELL`, this is the PT contract.
   *                     <Info>
   *                     **Required Allowances**
   *
   *                         In order to make this transaction, token allowances need to be set for the following contracts.
   *
   *                      - `PendleRouter`
   *                     </Info>
   */
  async pendlePt(
    request: components.PendleTradePtRequest,
    options?: RequestOptions,
  ): Promise<components.PendleTxResponse> {
    return unwrapAsync(pendlePendlePt(
      this,
      request,
      options,
    ));
  }

  /**
   * Trade Yield Token (YT)
   *
   * @remarks
   * Trade Yield Token (YT) for variable yield.
   *
   * YT is traded with a token of the user's choice.
   *
   * A sufficient allowance for the Pendle Router on the appropriate token contract must be set
   * beforehand. For `action` set to `BUY`, this is the `token` contract. For `action` set to `SELL`, this is the YT contract.
   *                     <Info>
   *                     **Required Allowances**
   *
   *                         In order to make this transaction, token allowances need to be set for the following contracts.
   *
   *                      - `PendleRouter`
   *                     </Info>
   */
  async pendleYt(
    request: components.PendleTradeYtRequest,
    options?: RequestOptions,
  ): Promise<components.PendleTxResponse> {
    return unwrapAsync(pendlePendleYt(
      this,
      request,
      options,
    ));
  }

  /**
   * Manage Liquidity (LP)
   *
   * @remarks
   * Manage liquidity in a Pendle Market.
   *
   * Liquidity is supplied to or withdrawn from the market with a token of the user's choice.
   *
   * Representation of the liquidity provided is in the form of market's Liquidity
   * Provider Token (LP) received by the user.
   *
   * A sufficient allowance for the Pendle Router on the appropriate token contract must be set
   * beforehand. For `action` set to `SUPPLY`, this is the `token` contract. For `action` set to `WTIHDRAW`, this is the market contract (LP).
   *                     <Info>
   *                     **Required Allowances**
   *
   *                         In order to make this transaction, token allowances need to be set for the following contracts.
   *
   *                      - `PendleRouter`
   *                     </Info>
   */
  async pendleLiquidity(
    request: components.PendleManageLiquidityRequest,
    options?: RequestOptions,
  ): Promise<components.PendleTxResponse> {
    return unwrapAsync(pendlePendleLiquidity(
      this,
      request,
      options,
    ));
  }

  /**
   * Redeem Claimable Yield
   *
   * @remarks
   * Redeem claimable yield from the market's associated Yield Token (YT).
   *                     <Info>
   *                     **Required Allowances**
   *
   *                         In order to make this transaction, token allowances need to be set for the following contracts.
   *
   *                      - `PendleRouter`
   *                     </Info>
   */
  async pendleRedeemYield(
    request: components.PendleRedeemYieldRequest,
    options?: RequestOptions,
  ): Promise<components.TransactionResponse> {
    return unwrapAsync(pendlePendleRedeemYield(
      this,
      request,
      options,
    ));
  }
}
