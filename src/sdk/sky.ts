/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { skySkyBuy } from "../funcs/skySkyBuy.js";
import { skySkyDeposit } from "../funcs/skySkyDeposit.js";
import { skySkyPosition } from "../funcs/skySkyPosition.js";
import { skySkySell } from "../funcs/skySkySell.js";
import { skySkyWithdraw } from "../funcs/skySkyWithdraw.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Sky extends ClientSDK {
  /**
   * Check USDS Position
   *
   * @remarks
   * Check the USDS overall position.
   */
  async skyPosition(
    request: operations.V1SkyPositionRequest,
    options?: RequestOptions,
  ): Promise<components.SkyCheckPositionResponse> {
    return unwrapAsync(skySkyPosition(
      this,
      request,
      options,
    ));
  }

  /**
   * Buy USDS
   *
   * @remarks
   * Buy USDS with DAI or USDC on a 1:1 basis. There are no fees.
   *
   * If buying with DAI, user will need to set an allowance on the DAI contract for the
   * 'SkyDaiUsdsConverter' contract beforehand.
   *
   * If buying with USDC, user will need to set an allowance on the USDC contract for the
   * 'SkyUsdcUsdsConverter' contract beforehand.
   *                     <Info>
   *                     **Required Allowances**
   *
   *                         In order to make this transaction, token allowances need to be set for the following contracts.
   *
   *                      - `SkyUsdcUsdsConverter`
   *  - `SkyDaiUsdsConverter`
   *                     </Info>
   */
  async skyBuy(
    request: components.SkyBuyRequest,
    options?: RequestOptions,
  ): Promise<components.TransactionResponse> {
    return unwrapAsync(skySkyBuy(
      this,
      request,
      options,
    ));
  }

  /**
   * Sell USDS
   *
   * @remarks
   * Sell USDS for DAI or USDC on a 1:1 basis. There are no fees.
   *
   * If swapping to DAI, user will need to set an allowance on the USDS contract for the
   * 'SkyDaiUsdsConverter' contract beforehand.
   *
   * If swapping to USDC, user will need to set an allowance on the USDS contract for the
   * 'SkyUsdcUsdsConverter' contract beforehand.
   *                     <Info>
   *                     **Required Allowances**
   *
   *                         In order to make this transaction, token allowances need to be set for the following contracts.
   *
   *                      - `SkyUsdcUsdsConverter`
   *  - `SkyDaiUsdsConverter`
   *                     </Info>
   */
  async skySell(
    request: components.SkySellRequest,
    options?: RequestOptions,
  ): Promise<components.TransactionResponse> {
    return unwrapAsync(skySkySell(
      this,
      request,
      options,
    ));
  }

  /**
   * Deposit USDS
   *
   * @remarks
   * Deposit USDS to earn yield. Deposited USDS is represented as sUSDS.
   *
   * Allowance must be set on USDS contract for UsdsVault.
   *
   * There are no fees.
   *                     <Info>
   *                     **Required Allowances**
   *
   *                         In order to make this transaction, token allowances need to be set for the following contracts.
   *
   *                      - `SkyUsdsVault`
   *                     </Info>
   */
  async skyDeposit(
    request: components.SkyDepositRequest,
    options?: RequestOptions,
  ): Promise<components.TransactionResponse> {
    return unwrapAsync(skySkyDeposit(
      this,
      request,
      options,
    ));
  }

  /**
   * Withdraw USDS
   *
   * @remarks
   * Withdraw USDS. Exchange yield-bearing sUSDS for USDS.
   *
   * Allowance must be set on USDS contract for UsdsVault.
   *
   * There are no fees.
   *                     <Info>
   *                     **Required Allowances**
   *
   *                         In order to make this transaction, token allowances need to be set for the following contracts.
   *
   *                      - `SkyUsdsVault`
   *                     </Info>
   */
  async skyWithdraw(
    request: components.SkyWithdrawRequest,
    options?: RequestOptions,
  ): Promise<components.TransactionResponse> {
    return unwrapAsync(skySkyWithdraw(
      this,
      request,
      options,
    ));
  }
}
