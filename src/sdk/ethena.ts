/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { ethenaEthenaDeposit } from "../funcs/ethenaEthenaDeposit.js";
import { ethenaEthenaRequest } from "../funcs/ethenaEthenaRequest.js";
import { ethenaEthenaUnstake } from "../funcs/ethenaEthenaUnstake.js";
import { ethenaEthenaVault } from "../funcs/ethenaEthenaVault.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Ethena extends ClientSDK {
  /**
   * Get Vault & User Position
   *
   * @remarks
   * Get data & user Position for the Ethena vault on Ethereum.
   *
   * Vault address: 0x9d39a5de30e57443bff2a8307a4256c8797a3497
   *
   * The user position is only included in the response if 'user_address' parameter is included in the request.
   */
  async ethenaVault(
    request: operations.V1EthenaVaultRequest,
    options?: RequestOptions,
  ): Promise<components.EthenaGetVaultResponse> {
    return unwrapAsync(ethenaEthenaVault(
      this,
      request,
      options,
    ));
  }

  /**
   * Deposit USDe
   *
   * @remarks
   * Deposit USDe into a Ethena's Vault to earn passive yield.
   *
   * The shares of a deposit are respresented as sUSDe.
   *                     <Info>
   *                     **Required Allowances**
   *
   *                         In order to make this transaction, token allowances need to be set for the following contracts.
   *
   *                      - `EthenaVault`
   *                     </Info>
   */
  async ethenaDeposit(
    request: components.EthenaDepositRequest,
    options?: RequestOptions,
  ): Promise<components.TransactionResponse> {
    return unwrapAsync(ethenaEthenaDeposit(
      this,
      request,
      options,
    ));
  }

  /**
   * Request to Withdraw USDe
   *
   * @remarks
   * Request to withdraw deposited USDe from Ethena's vault.
   *
   * The Ethena vault requires a cooldown period. Once a request to withdraw a specified
   * amount of USDe has been submitted, the alloted cooldown period must pass before the
   * withdraw USDe transaction can be submitted.
   *
   * If an additional amount of USDe is requested to be withdrawn anytime before
   * withdrawing the originally requested amount, the cooldown period restarts.
   *
   * Yield is not earned on USDe while in its cooldown period.
   *
   * An allowance does not have to be set to initiate the cooldown period.
   */
  async ethenaRequest(
    request: components.EthenaRequestToWithdrawRequest,
    options?: RequestOptions,
  ): Promise<components.EthenaRequestToWithdrawTransactionResponse> {
    return unwrapAsync(ethenaEthenaRequest(
      this,
      request,
      options,
    ));
  }

  /**
   * Unstake USDe
   *
   * @remarks
   * Unstake deposited USDe from Ethena's vault.
   *
   * Verify that the USDe being unstaked has completed its mandatory cooldown period
   * using the Ethena 'Get Vault & User Position' endpoint.
   *
   * This is an all or nothing action. All of the USDe that has completed its cooldown
   * period must be withdrawn.
   *
   * The passive yield earned on USDe deposits is represented by the increased value of
   * the shares received (sUSDe) upon depositing USDe. Trade in these shares in exchange
   * for the intial USDe deposited and any accrued yield since depositing.
   *
   * An allowance does not have to be set to unstake USDe that has completed its cooldown
   * period.
   */
  async ethenaUnstake(
    request: components.EthenaUnstakeRequest,
    options?: RequestOptions,
  ): Promise<components.TransactionResponse> {
    return unwrapAsync(ethenaEthenaUnstake(
      this,
      request,
      options,
    ));
  }
}
