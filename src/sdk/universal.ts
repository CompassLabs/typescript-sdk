/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { universalGenericAllowance } from "../funcs/universalGenericAllowance.js";
import { universalGenericAllowanceSet } from "../funcs/universalGenericAllowanceSet.js";
import { universalGenericEns } from "../funcs/universalGenericEns.js";
import { universalGenericPortfolio } from "../funcs/universalGenericPortfolio.js";
import { universalGenericSupportedChains } from "../funcs/universalGenericSupportedChains.js";
import { universalGenericUnwrapWeth } from "../funcs/universalGenericUnwrapWeth.js";
import { universalGenericWrapEth } from "../funcs/universalGenericWrapEth.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Universal extends ClientSDK {
  /**
   * List User Portfolio
   *
   * @remarks
   * Fetch the detailed portfolio of a specific wallet address on a given blockchain.
   *
   * This includes the total value of the portfolio in USD and a breakdown of token
   * balances, including their respective values and quantities.
   */
  async genericPortfolio(
    request: operations.V1GenericPortfolioRequest,
    options?: RequestOptions,
  ): Promise<components.Portfolio> {
    return unwrapAsync(universalGenericPortfolio(
      this,
      request,
      options,
    ));
  }

  /**
   * List Supported Chains
   *
   * @remarks
   * Get the list of supported chains by the Compass API.
   */
  async genericSupportedChains(
    request: operations.V1GenericSupportedChainsRequest,
    options?: RequestOptions,
  ): Promise<components.SupportedChainInfo> {
    return unwrapAsync(universalGenericSupportedChains(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Allowance
   *
   * @remarks
   * In decentralized finance (DeFi) protocols such as Uniswap or AAVE, users must set
   * a token allowance to authorize the protocol to spend a specified amount of their
   * tokens on their behalf.
   *
   * This is a crucial step before engaging in any transactions or operations within
   * these protocols, ensuring that the protocol has the necessary permissions to manage
   * the user's tokens securely and efficiently.
   */
  async genericAllowance(
    request: operations.V1GenericAllowanceRequest,
    options?: RequestOptions,
  ): Promise<components.AllowanceInfoResponse> {
    return unwrapAsync(universalGenericAllowance(
      this,
      request,
      options,
    ));
  }

  /**
   * Resolve ENS
   *
   * @remarks
   * An ENS name is a string ending in `.eth`.
   *
   * E.g. `vitalik.eth`. This endpoint can be used to
   * query the actual ethereum wallet address behind the ENS name.
   */
  async genericEns(
    request: operations.V1GenericEnsRequest,
    options?: RequestOptions,
  ): Promise<components.EnsNameInfoResponse> {
    return unwrapAsync(universalGenericEns(
      this,
      request,
      options,
    ));
  }

  /**
   * Wrap ETH
   *
   * @remarks
   * Wrapping ETH creates an ERC20 compliant form of ETH that is typically needed for
   * it to be traded on DeFi protocols.
   */
  async genericWrapEth(
    request: components.WrapEthRequest,
    options?: RequestOptions,
  ): Promise<components.TransactionResponse> {
    return unwrapAsync(universalGenericWrapEth(
      this,
      request,
      options,
    ));
  }

  /**
   * Unwrap WETH
   *
   * @remarks
   * Unwrapping WETH converts the ERC-20 compliant form of ETH back to native ETH that
   * can be used for gas and other native purposes.
   */
  async genericUnwrapWeth(
    request: components.UnwrapWethRequest,
    options?: RequestOptions,
  ): Promise<components.TransactionResponse> {
    return unwrapAsync(universalGenericUnwrapWeth(
      this,
      request,
      options,
    ));
  }

  /**
   * Set Allowance
   *
   * @remarks
   * This endpoint allows users to modify the token allowance on any ERC-20 token for
   * a specific protocol.
   *
   * In decentralized finance (DeFi), setting an allowance is a necessary step to
   * authorize a protocol to spend a specified amount of tokens on behalf of the user.
   * This operation is crucial for ensuring that the protocol can manage the user's
   * tokens securely and efficiently, enabling seamless transactions and operations
   * within the DeFi ecosystem.
   */
  async genericAllowanceSet(
    request: components.SetAllowanceRequest,
    options?: RequestOptions,
  ): Promise<components.TransactionResponse> {
    return unwrapAsync(universalGenericAllowanceSet(
      this,
      request,
      options,
    ));
  }
}
