/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { morphoMorphoBorrow } from "../funcs/morphoMorphoBorrow.js";
import { morphoMorphoDeposit } from "../funcs/morphoMorphoDeposit.js";
import { morphoMorphoMarket } from "../funcs/morphoMorphoMarket.js";
import { morphoMorphoMarketPosition } from "../funcs/morphoMorphoMarketPosition.js";
import { morphoMorphoMarkets } from "../funcs/morphoMorphoMarkets.js";
import { morphoMorphoRepay } from "../funcs/morphoMorphoRepay.js";
import { morphoMorphoSupplyCollateral } from "../funcs/morphoMorphoSupplyCollateral.js";
import { morphoMorphoUserPosition } from "../funcs/morphoMorphoUserPosition.js";
import { morphoMorphoVault } from "../funcs/morphoMorphoVault.js";
import { morphoMorphoVaults } from "../funcs/morphoMorphoVaults.js";
import { morphoMorphoWithdraw } from "../funcs/morphoMorphoWithdraw.js";
import { morphoMorphoWithdrawCollateral } from "../funcs/morphoMorphoWithdrawCollateral.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class Morpho extends ClientSDK {
  /**
   * Get Vaults
   *
   * @remarks
   * Query a list of vaults you can deposit into.
   *
   * Each vault has one unique token that can be deposited. In exchange for depositing
   * tokens into a vault you receive shares. You earn yield on these shares by their
   * exchange value increasing over time.
   */
  async morphoVaults(
    request: operations.V1MorphoVaultsRequest,
    options?: RequestOptions,
  ): Promise<components.MorphoGetVaultsResponse> {
    return unwrapAsync(morphoMorphoVaults(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Vault & User Position
   *
   * @remarks
   * Get Vault data & User Position.
   *
   * The user position is only included if 'user_address' parameter is included.
   */
  async morphoVault(
    request: operations.V1MorphoVaultRequest,
    options?: RequestOptions,
  ): Promise<components.VaultGetVaultResponse> {
    return unwrapAsync(morphoMorphoVault(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Markets
   *
   * @remarks
   * Query a list of markets you can borrow from.
   *
   * Each market has one unique token that can be borrowed against one unique token that
   * can be used as collateral.
   */
  async morphoMarkets(
    request: operations.V1MorphoMarketsRequest,
    options?: RequestOptions,
  ): Promise<components.MorphoGetMarketsResponse> {
    return unwrapAsync(morphoMorphoMarkets(
      this,
      request,
      options,
    ));
  }

  /**
   * Get Market
   *
   * @remarks
   * Get data & metrics for a specific Morpho market.
   *
   * Including:
   * - Current, daily, weekly, monthly, yearly APY
   * - Collateral & loan asset data
   * - Liquidation loan-to-value ratio
   * - Collateral, borrow & liquidity value
   * - Utilization ratio
   * - Pertinent metadata
   * - Whitelist status
   */
  async morphoMarket(
    request: operations.V1MorphoMarketRequest,
    options?: RequestOptions,
  ): Promise<components.MorphoGetMarketResponse> {
    return unwrapAsync(morphoMorphoMarket(
      this,
      request,
      options,
    ));
  }

  /**
   * Check Market Position
   *
   * @remarks
   * Check how many shares you've borrowed and the equivalent token amount of a given
   * market.
   */
  async morphoMarketPosition(
    request: operations.V1MorphoMarketPositionRequest,
    options?: RequestOptions,
  ): Promise<components.MorphoCheckMarketPositionResponse> {
    return unwrapAsync(morphoMorphoMarketPosition(
      this,
      request,
      options,
    ));
  }

  /**
   * Check User Position
   *
   * @remarks
   * Check user's overall position across the entire Morpho ecosystem.
   *
   * Inlcuding all vault and market position metrics and relavant metadata of said vaults
   * and markets.
   */
  async morphoUserPosition(
    request: operations.V1MorphoUserPositionRequest,
    options?: RequestOptions,
  ): Promise<components.MorphoCheckUserPositionResponse> {
    return unwrapAsync(morphoMorphoUserPosition(
      this,
      request,
      options,
    ));
  }

  /**
   * Deposit to Vault
   *
   * @remarks
   * Deposit tokens into a Morpho Vault to earn passive yield from interest paid by
   * borrowers.
   *
   * Each vault accepts one unique token that can be deposited.
   *
   * A Morpho Vault has one loan asset and can allocate deposits to multiple Morpho
   * markets. Users can deposit into a vault to start earning passive yield from interest
   * paid by borrowers. Vaults feature automated risk management, actively curating risk
   * exposure for all deposited assets so users don't need to make these decisions
   * themselves. Users maintain full control over their assets, can monitor the vault's
   * state at any time, and withdraw their liquidity at their discretion.
   *                     <Info>
   *                     **Required Allowances**
   *
   *                         In order to make this transaction, token allowances need to be set for the following contracts.
   *
   *                      - `<vault-contract-address>`
   *                     </Info>
   */
  async morphoDeposit(
    request: components.MorphoDepositRequest,
    options?: RequestOptions,
  ): Promise<components.TransactionResponse> {
    return unwrapAsync(morphoMorphoDeposit(
      this,
      request,
      options,
    ));
  }

  /**
   * Withdraw from Vault
   *
   * @remarks
   * Withdraw deposited tokens from a Morpho Vault.
   *
   * The passive yield earned on token deposits is represented by the increased value of
   * the shares received upon depositing tokens.
   *
   * A Morpho Vault has one loan asset and can allocate deposits to multiple Morpho
   * markets. Users can deposit into a vault to start earning passive yield from interest
   * paid by borrowers. Vaults feature automated risk management, actively curating risk
   * exposure for all deposited assets so users don't need to make these decisions
   * themselves. Users maintain full control over their assets, can monitor the vault's
   * state at any time, and withdraw their liquidity at their discretion.
   */
  async morphoWithdraw(
    request: components.MorphoWithdrawRequest,
    options?: RequestOptions,
  ): Promise<components.TransactionResponse> {
    return unwrapAsync(morphoMorphoWithdraw(
      this,
      request,
      options,
    ));
  }

  /**
   * Supply Collateral to Market
   *
   * @remarks
   * Supply collateral to a Morpho Market in order to borrow against it.
   *
   * A Morpho Market is a primitive lending pool that pairs one collateral asset with one
   * loan asset. Each market is isolated (meaning risks are contained within each
   * individual market), immutable (cannot be changed after deployment), and will persist
   * as long as the blockchain it is deployed on is live.
   *                     <Info>
   *                     **Required Allowances**
   *
   *                         In order to make this transaction, token allowances need to be set for the following contracts.
   *
   *                      - `Morpho`
   *                     </Info>
   */
  async morphoSupplyCollateral(
    request: components.MorphoSupplyCollateralRequest,
    options?: RequestOptions,
  ): Promise<components.TransactionResponse> {
    return unwrapAsync(morphoMorphoSupplyCollateral(
      this,
      request,
      options,
    ));
  }

  /**
   * Withdraw Collateral from Market
   *
   * @remarks
   * Withdraw collateral that has been supplied to a Morpho Market.
   *
   * A Morpho Market is a primitive lending pool that pairs one collateral asset with one
   * loan asset. Each market is isolated (meaning risks are contained within each
   * individual market), immutable (cannot be changed after deployment), and will persist
   * as long as the blockchain it is deployed on is live.
   *                     <Info>
   *                     **Required Allowances**
   *
   *                         In order to make this transaction, token allowances need to be set for the following contracts.
   *
   *                      - `Morpho`
   *                     </Info>
   */
  async morphoWithdrawCollateral(
    request: components.MorphoWithdrawCollateralRequest,
    options?: RequestOptions,
  ): Promise<components.TransactionResponse> {
    return unwrapAsync(morphoMorphoWithdrawCollateral(
      this,
      request,
      options,
    ));
  }

  /**
   * Borrow from Market
   *
   * @remarks
   * Borrow tokens from a Morpho Market against supplied collateral.
   *
   * The position could be liquidated when a borrower's Loan-To-Value (LTV) exceeds the
   * Liquidation Loan-To-Value (LLTV) threshold of the market.
   *
   * A Morpho Market is a primitive lending pool that pairs one collateral asset with one
   * loan asset. Each market is isolated (meaning risks are contained within each
   * individual market), immutable (cannot be changed after deployment), and will persist
   * as long as the blockchain it is deployed on is live.
   *                     <Info>
   *                     **Required Allowances**
   *
   *                         In order to make this transaction, token allowances need to be set for the following contracts.
   *
   *                      - `Morpho`
   *                     </Info>
   */
  async morphoBorrow(
    request: components.MorphoBorrowRequest,
    options?: RequestOptions,
  ): Promise<components.TransactionResponse> {
    return unwrapAsync(morphoMorphoBorrow(
      this,
      request,
      options,
    ));
  }

  /**
   * Repay to Market
   *
   * @remarks
   * Repay borrowed tokens to a market in order to reduce or eliminate debt.
   *
   * A Morpho Market is a primitive lending pool that pairs one collateral asset with one
   * loan asset. Each market is isolated (meaning risks are contained within each
   * individual market), immutable (cannot be changed after deployment), and will persist
   * as long as the blockchain it is deployed on is live.
   *                     <Info>
   *                     **Required Allowances**
   *
   *                         In order to make this transaction, token allowances need to be set for the following contracts.
   *
   *                      - `Morpho`
   *                     </Info>
   */
  async morphoRepay(
    request: components.MorphoRepayRequest,
    options?: RequestOptions,
  ): Promise<components.TransactionResponse> {
    return unwrapAsync(morphoMorphoRepay(
      this,
      request,
      options,
    ));
  }
}
