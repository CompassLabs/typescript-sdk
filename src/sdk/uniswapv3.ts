/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import { uniswapV3UniswapLiquidityProvisionIncrease } from "../funcs/uniswapV3UniswapLiquidityProvisionIncrease.js";
import { uniswapV3UniswapLiquidityProvisionInRange } from "../funcs/uniswapV3UniswapLiquidityProvisionInRange.js";
import { uniswapV3UniswapLiquidityProvisionMint } from "../funcs/uniswapV3UniswapLiquidityProvisionMint.js";
import { uniswapV3UniswapLiquidityProvisionPositions } from "../funcs/uniswapV3UniswapLiquidityProvisionPositions.js";
import { uniswapV3UniswapLiquidityProvisionWithdraw } from "../funcs/uniswapV3UniswapLiquidityProvisionWithdraw.js";
import { uniswapV3UniswapPoolPrice } from "../funcs/uniswapV3UniswapPoolPrice.js";
import { uniswapV3UniswapQuoteBuyExactly } from "../funcs/uniswapV3UniswapQuoteBuyExactly.js";
import { uniswapV3UniswapQuoteSellExactly } from "../funcs/uniswapV3UniswapQuoteSellExactly.js";
import { uniswapV3UniswapSwapBuyExactly } from "../funcs/uniswapV3UniswapSwapBuyExactly.js";
import { uniswapV3UniswapSwapSellExactly } from "../funcs/uniswapV3UniswapSwapSellExactly.js";
import { ClientSDK, RequestOptions } from "../lib/sdks.js";
import * as components from "../models/components/index.js";
import * as operations from "../models/operations/index.js";
import { unwrapAsync } from "../types/fp.js";

export class UniswapV3 extends ClientSDK {
  /**
   * Get Quote - to Specified Amount
   *
   * @remarks
   * This endpoint calculates the amount of input tokens required to purchase a
   * specified amount of output tokens from a Uniswap pool.
   *
   * It also provides the resulting price after the transaction. The calculation takes
   * into account the current pool state and the specified fee tier.
   */
  async uniswapQuoteBuyExactly(
    request: operations.V1UniswapQuoteBuyExactlyRequest,
    options?: RequestOptions,
  ): Promise<components.UniswapBuyQuoteInfoResponse> {
    return unwrapAsync(uniswapV3UniswapQuoteBuyExactly(
      this,
      request,
      options,
    ));
  }

  /**
   * Get quote - From Specified Amount
   *
   * @remarks
   * This endpoint calculates the amount of input tokens required to purchase a
   * specified amount of output tokens from a Uniswap pool.
   *
   * It also provides the resulting price after the transaction. The calculation takes
   * into account the current pool state and the specified fee tier.
   */
  async uniswapQuoteSellExactly(
    request: operations.V1UniswapQuoteSellExactlyRequest,
    options?: RequestOptions,
  ): Promise<components.UniswapSellQuoteInfoResponse> {
    return unwrapAsync(uniswapV3UniswapQuoteSellExactly(
      this,
      request,
      options,
    ));
  }

  /**
   * Pool Price
   *
   * @remarks
   * This endpoint calculates the price of a token in a Uniswap pool.
   *
   * The price is calculated based on the current pool state and the specified fee tier.
   */
  async uniswapPoolPrice(
    request: operations.V1UniswapPoolPriceRequest,
    options?: RequestOptions,
  ): Promise<components.UniswapPoolPriceResponse> {
    return unwrapAsync(uniswapV3UniswapPoolPrice(
      this,
      request,
      options,
    ));
  }

  /**
   * Check if LP is Active.
   *
   * @remarks
   * This endpoint allows users to check whether a specific liquidity provider ()
   * position is within the active tick range on the uniswap platform.
   *
   * by providing the token id associated with the position, users can verify if the
   * position is currently within the tick range where trading occurs. this information
   * is essential for users to monitor the status of their lp positions and ensure that
   * they are actively participating in the trading activities within the liquidity pool
   * and earning trading fees.
   */
  async uniswapLiquidityProvisionInRange(
    request: operations.V1UniswapLiquidityProvisionInRangeRequest,
    options?: RequestOptions,
  ): Promise<components.UniswapCheckInRangeResponse> {
    return unwrapAsync(uniswapV3UniswapLiquidityProvisionInRange(
      this,
      request,
      options,
    ));
  }

  /**
   * List LP
   *
   * @remarks
   * This endpoint retrieves the number of Liquidity Provider (LP) positions
   * associated with a specific sender address on the Uniswap platform.
   *
   * Users can query this endpoint to obtain detailed information about their LP
   * positions, including the total number of positions and relevant metadata. This
   * information is crucial for users to manage and analyze their liquidity provision
   * activities effectively.
   */
  async uniswapLiquidityProvisionPositions(
    request: operations.V1UniswapLiquidityProvisionPositionsRequest,
    options?: RequestOptions,
  ): Promise<components.UniswapLPPositionsInfoResponse> {
    return unwrapAsync(uniswapV3UniswapLiquidityProvisionPositions(
      this,
      request,
      options,
    ));
  }

  /**
   * Buy exact amount
   *
   * @remarks
   * This endpoint allows users to trade a variable amount of one token to receive an
   * exact amount of another token using the Uniswap protocol.
   *
   * The transaction is executed on the specified blockchain network, and the user must
   * provide the necessary transaction details, including the token to buy, the token to
   * pay with, and the exact amount to receive. If the token being paid with is ETH and
   * needs to be wrapped, the appropriate amount will be wrapped automatically.
   *                     <Info>
   *                     **Required Allowances**
   *
   *                         In order to make this transaction, token allowances need to be set for the following contracts.
   *
   *                      - `UniswapV3Router`
   *                     </Info>
   */
  async uniswapSwapBuyExactly(
    request: components.UniswapBuyExactlyRequest,
    options?: RequestOptions,
  ): Promise<components.UniswapBuyExactlyTransactionResponse> {
    return unwrapAsync(uniswapV3UniswapSwapBuyExactly(
      this,
      request,
      options,
    ));
  }

  /**
   * Sell exact amount
   *
   * @remarks
   * This endpoint allows users to trade a specific amount of one token into another
   * token using the Uniswap protocol.
   *
   * The transaction is executed on the specified blockchain network, and the user must
   * provide the necessary transaction details, including the token to sell, the token to
   * receive, and the amount to sell. If the token being sold is ETH and needs to be
   * wrapped, the appropriate amount will be wrapped automatically.
   *                     <Info>
   *                     **Required Allowances**
   *
   *                         In order to make this transaction, token allowances need to be set for the following contracts.
   *
   *                      - `UniswapV3Router`
   *                     </Info>
   */
  async uniswapSwapSellExactly(
    request: components.UniswapSellExactlyRequest,
    options?: RequestOptions,
  ): Promise<components.UniswapSellExactlyTransactionResponse> {
    return unwrapAsync(uniswapV3UniswapSwapSellExactly(
      this,
      request,
      options,
    ));
  }

  /**
   * Open a new LP position
   *
   * @remarks
   * This endpoint allows users to open a new Liquidity Provider (LP) position on the
   * Uniswap platform.
   *
   * By providing the necessary parameters, users can initiate a minting process to
   * create a new LP token, which represents their stake in a specific liquidity pool.
   * This operation is essential for users looking to participate in liquidity provision,
   * enabling them to earn fees from trades that occur within the pool. The endpoint
   * requires details such as the token pair, amount, and any additional parameters
   * needed for the minting process.
   *                     <Info>
   *                     **Required Allowances**
   *
   *                         In order to make this transaction, token allowances need to be set for the following contracts.
   *
   *                      - `UniswapV3NFTPositionManager`
   *                     </Info>
   */
  async uniswapLiquidityProvisionMint(
    request: components.UniswapMintLiquidityProvisionRequest,
    options?: RequestOptions,
  ): Promise<components.TransactionResponse> {
    return unwrapAsync(uniswapV3UniswapLiquidityProvisionMint(
      this,
      request,
      options,
    ));
  }

  /**
   * Increase an LP position
   *
   * @remarks
   * This endpoint allows users to increase their existing Liquidity Provider (LP)
   * positions on the Uniswap platform.
   *
   * By providing the necessary parameters, users can add more liquidity to their current
   * positions, thereby increasing their stake in the liquidity pool. This operation is
   * beneficial for users who wish to enhance their potential earnings from trading fees
   * within the pool. The endpoint requires details such as the token pair, additional
   * amount to be added, and any other parameters necessary for the liquidity increase
   * process.
   *                     <Info>
   *                     **Required Allowances**
   *
   *                         In order to make this transaction, token allowances need to be set for the following contracts.
   *
   *                      - `AerodromeSlipstreamRouter`
   *                     </Info>
   */
  async uniswapLiquidityProvisionIncrease(
    request: components.UniswapIncreaseLiquidityProvisionRequest,
    options?: RequestOptions,
  ): Promise<components.TransactionResponse> {
    return unwrapAsync(uniswapV3UniswapLiquidityProvisionIncrease(
      this,
      request,
      options,
    ));
  }

  /**
   * Withdraw an LP position
   *
   * @remarks
   * This endpoint allows users to withdraw their Liquidity Provider (LP) positions
   * from the Uniswap platform.
   *
   * By specifying the necessary parameters, users can initiate the withdrawal process to
   * remove their stake from a specific liquidity pool. This operation is crucial for
   * users who wish to reclaim their assets or reallocate their liquidity to different
   * pools or investments. The endpoint requires details such as the token pair, the
   * amount to be withdrawn, and any additional parameters needed for the withdrawal
   * process. Users should ensure they meet any protocol requirements or conditions
   * before initiating a withdrawal to avoid potential issues or penalties.
   *                     <Info>
   *                     **Required Allowances**
   *
   *                         In order to make this transaction, token allowances need to be set for the following contracts.
   *
   *                      - `UniswapV3NFTPositionManager`
   *                     </Info>
   */
  async uniswapLiquidityProvisionWithdraw(
    request: components.UniswapWithdrawLiquidityProvisionRequest,
    options?: RequestOptions,
  ): Promise<components.TransactionResponse> {
    return unwrapAsync(uniswapV3UniswapLiquidityProvisionWithdraw(
      this,
      request,
      options,
    ));
  }
}
