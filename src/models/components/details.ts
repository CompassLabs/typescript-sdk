/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Movement10Percent,
  Movement10Percent$inboundSchema,
  Movement10Percent$Outbound,
  Movement10Percent$outboundSchema,
} from "./movement10percent.js";
import {
  YieldRange,
  YieldRange$inboundSchema,
  YieldRange$Outbound,
  YieldRange$outboundSchema,
} from "./yieldrange.js";

export type Details = {
  liquidity: number;
  pendleApy: number;
  impliedApy: number;
  feeRate: number;
  movement10Percent?: Movement10Percent | null | undefined;
  yieldRange: YieldRange;
  aggregatedApy: number;
  maxBoostedApy: number;
};

/** @internal */
export const Details$inboundSchema: z.ZodType<Details, z.ZodTypeDef, unknown> =
  z.object({
    liquidity: z.number(),
    pendleApy: z.number(),
    impliedApy: z.number(),
    feeRate: z.number(),
    movement10Percent: z.nullable(Movement10Percent$inboundSchema).optional(),
    yieldRange: YieldRange$inboundSchema,
    aggregatedApy: z.number(),
    maxBoostedApy: z.number(),
  });

/** @internal */
export type Details$Outbound = {
  liquidity: number;
  pendleApy: number;
  impliedApy: number;
  feeRate: number;
  movement10Percent?: Movement10Percent$Outbound | null | undefined;
  yieldRange: YieldRange$Outbound;
  aggregatedApy: number;
  maxBoostedApy: number;
};

/** @internal */
export const Details$outboundSchema: z.ZodType<
  Details$Outbound,
  z.ZodTypeDef,
  Details
> = z.object({
  liquidity: z.number(),
  pendleApy: z.number(),
  impliedApy: z.number(),
  feeRate: z.number(),
  movement10Percent: z.nullable(Movement10Percent$outboundSchema).optional(),
  yieldRange: YieldRange$outboundSchema,
  aggregatedApy: z.number(),
  maxBoostedApy: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Details$ {
  /** @deprecated use `Details$inboundSchema` instead. */
  export const inboundSchema = Details$inboundSchema;
  /** @deprecated use `Details$outboundSchema` instead. */
  export const outboundSchema = Details$outboundSchema;
  /** @deprecated use `Details$Outbound` instead. */
  export type Outbound = Details$Outbound;
}

export function detailsToJSON(details: Details): string {
  return JSON.stringify(Details$outboundSchema.parse(details));
}

export function detailsFromJSON(
  jsonString: string,
): SafeParseResult<Details, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Details$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Details' from JSON`,
  );
}
