/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The amount of tokens to deposit into the vault.
 */
export type MorphoDepositRequestAmount = number | string;

export const MorphoDepositRequestChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type MorphoDepositRequestChain = ClosedEnum<
  typeof MorphoDepositRequestChain
>;

export type MorphoDepositRequest = {
  actionType?: "MORPHO_DEPOSIT" | undefined;
  /**
   * The vault address you are depositing to.
   */
  vaultAddress: string;
  /**
   * The amount of tokens to deposit into the vault.
   */
  amount: number | string;
  /**
   * The address which will receive the shares from the vault representing their proportional ownership of the vault's assets. Defaults to the sender.
   */
  receiver?: string | null | undefined;
  chain: MorphoDepositRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const MorphoDepositRequestAmount$inboundSchema: z.ZodType<
  MorphoDepositRequestAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type MorphoDepositRequestAmount$Outbound = number | string;

/** @internal */
export const MorphoDepositRequestAmount$outboundSchema: z.ZodType<
  MorphoDepositRequestAmount$Outbound,
  z.ZodTypeDef,
  MorphoDepositRequestAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MorphoDepositRequestAmount$ {
  /** @deprecated use `MorphoDepositRequestAmount$inboundSchema` instead. */
  export const inboundSchema = MorphoDepositRequestAmount$inboundSchema;
  /** @deprecated use `MorphoDepositRequestAmount$outboundSchema` instead. */
  export const outboundSchema = MorphoDepositRequestAmount$outboundSchema;
  /** @deprecated use `MorphoDepositRequestAmount$Outbound` instead. */
  export type Outbound = MorphoDepositRequestAmount$Outbound;
}

export function morphoDepositRequestAmountToJSON(
  morphoDepositRequestAmount: MorphoDepositRequestAmount,
): string {
  return JSON.stringify(
    MorphoDepositRequestAmount$outboundSchema.parse(morphoDepositRequestAmount),
  );
}

export function morphoDepositRequestAmountFromJSON(
  jsonString: string,
): SafeParseResult<MorphoDepositRequestAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MorphoDepositRequestAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MorphoDepositRequestAmount' from JSON`,
  );
}

/** @internal */
export const MorphoDepositRequestChain$inboundSchema: z.ZodNativeEnum<
  typeof MorphoDepositRequestChain
> = z.nativeEnum(MorphoDepositRequestChain);

/** @internal */
export const MorphoDepositRequestChain$outboundSchema: z.ZodNativeEnum<
  typeof MorphoDepositRequestChain
> = MorphoDepositRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MorphoDepositRequestChain$ {
  /** @deprecated use `MorphoDepositRequestChain$inboundSchema` instead. */
  export const inboundSchema = MorphoDepositRequestChain$inboundSchema;
  /** @deprecated use `MorphoDepositRequestChain$outboundSchema` instead. */
  export const outboundSchema = MorphoDepositRequestChain$outboundSchema;
}

/** @internal */
export const MorphoDepositRequest$inboundSchema: z.ZodType<
  MorphoDepositRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("MORPHO_DEPOSIT").default("MORPHO_DEPOSIT"),
  vault_address: z.string(),
  amount: z.union([z.number(), z.string()]),
  receiver: z.nullable(z.string()).optional(),
  chain: MorphoDepositRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "vault_address": "vaultAddress",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type MorphoDepositRequest$Outbound = {
  action_type: "MORPHO_DEPOSIT";
  vault_address: string;
  amount: number | string;
  receiver?: string | null | undefined;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const MorphoDepositRequest$outboundSchema: z.ZodType<
  MorphoDepositRequest$Outbound,
  z.ZodTypeDef,
  MorphoDepositRequest
> = z.object({
  actionType: z.literal("MORPHO_DEPOSIT").default("MORPHO_DEPOSIT" as const),
  vaultAddress: z.string(),
  amount: z.union([z.number(), z.string()]),
  receiver: z.nullable(z.string()).optional(),
  chain: MorphoDepositRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    vaultAddress: "vault_address",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MorphoDepositRequest$ {
  /** @deprecated use `MorphoDepositRequest$inboundSchema` instead. */
  export const inboundSchema = MorphoDepositRequest$inboundSchema;
  /** @deprecated use `MorphoDepositRequest$outboundSchema` instead. */
  export const outboundSchema = MorphoDepositRequest$outboundSchema;
  /** @deprecated use `MorphoDepositRequest$Outbound` instead. */
  export type Outbound = MorphoDepositRequest$Outbound;
}

export function morphoDepositRequestToJSON(
  morphoDepositRequest: MorphoDepositRequest,
): string {
  return JSON.stringify(
    MorphoDepositRequest$outboundSchema.parse(morphoDepositRequest),
  );
}

export function morphoDepositRequestFromJSON(
  jsonString: string,
): SafeParseResult<MorphoDepositRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MorphoDepositRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MorphoDepositRequest' from JSON`,
  );
}
