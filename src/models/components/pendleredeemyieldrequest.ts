/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const PendleRedeemYieldRequestChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type PendleRedeemYieldRequestChain = ClosedEnum<
  typeof PendleRedeemYieldRequestChain
>;

export type PendleRedeemYieldRequest = {
  actionType?: "PENDLE_REDEEM_YIELD" | undefined;
  /**
   * The address of the market identifying which Yield Token (YT) you would like to claim yield from.
   */
  marketAddress: string;
  chain: PendleRedeemYieldRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const PendleRedeemYieldRequestChain$inboundSchema: z.ZodNativeEnum<
  typeof PendleRedeemYieldRequestChain
> = z.nativeEnum(PendleRedeemYieldRequestChain);

/** @internal */
export const PendleRedeemYieldRequestChain$outboundSchema: z.ZodNativeEnum<
  typeof PendleRedeemYieldRequestChain
> = PendleRedeemYieldRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendleRedeemYieldRequestChain$ {
  /** @deprecated use `PendleRedeemYieldRequestChain$inboundSchema` instead. */
  export const inboundSchema = PendleRedeemYieldRequestChain$inboundSchema;
  /** @deprecated use `PendleRedeemYieldRequestChain$outboundSchema` instead. */
  export const outboundSchema = PendleRedeemYieldRequestChain$outboundSchema;
}

/** @internal */
export const PendleRedeemYieldRequest$inboundSchema: z.ZodType<
  PendleRedeemYieldRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("PENDLE_REDEEM_YIELD").default("PENDLE_REDEEM_YIELD"),
  market_address: z.string(),
  chain: PendleRedeemYieldRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "market_address": "marketAddress",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type PendleRedeemYieldRequest$Outbound = {
  action_type: "PENDLE_REDEEM_YIELD";
  market_address: string;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const PendleRedeemYieldRequest$outboundSchema: z.ZodType<
  PendleRedeemYieldRequest$Outbound,
  z.ZodTypeDef,
  PendleRedeemYieldRequest
> = z.object({
  actionType: z.literal("PENDLE_REDEEM_YIELD").default(
    "PENDLE_REDEEM_YIELD" as const,
  ),
  marketAddress: z.string(),
  chain: PendleRedeemYieldRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    marketAddress: "market_address",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendleRedeemYieldRequest$ {
  /** @deprecated use `PendleRedeemYieldRequest$inboundSchema` instead. */
  export const inboundSchema = PendleRedeemYieldRequest$inboundSchema;
  /** @deprecated use `PendleRedeemYieldRequest$outboundSchema` instead. */
  export const outboundSchema = PendleRedeemYieldRequest$outboundSchema;
  /** @deprecated use `PendleRedeemYieldRequest$Outbound` instead. */
  export type Outbound = PendleRedeemYieldRequest$Outbound;
}

export function pendleRedeemYieldRequestToJSON(
  pendleRedeemYieldRequest: PendleRedeemYieldRequest,
): string {
  return JSON.stringify(
    PendleRedeemYieldRequest$outboundSchema.parse(pendleRedeemYieldRequest),
  );
}

export function pendleRedeemYieldRequestFromJSON(
  jsonString: string,
): SafeParseResult<PendleRedeemYieldRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PendleRedeemYieldRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendleRedeemYieldRequest' from JSON`,
  );
}
