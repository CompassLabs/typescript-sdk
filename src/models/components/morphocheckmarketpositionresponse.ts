/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MorphoCheckMarketPositionResponse = {
  borrowShares: number;
  /**
   * The amount of the loan token borrowed.
   */
  borrowAmount: string;
  /**
   * The amount of the collateral token supplied.
   */
  collateralAmount: string;
  /**
   * The Loan-To-Value ratio measures the proportion of debt relative to collateral value. If this ratio exceeds the 'liquidation_loan_to_value_threshold', the position is liquidatable.
   */
  currentLoanToValue: string;
  /**
   * Maximum borrowing percentage before liquidation risk. E.g: LLTV of 80% means for a collateral value equivalent of $100, the maximum one can borrow in value is $80. If above like $80.0001, the position is liquidatable.
   */
  liquidationLoanToValueThreshold: string;
};

/** @internal */
export const MorphoCheckMarketPositionResponse$inboundSchema: z.ZodType<
  MorphoCheckMarketPositionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  borrow_shares: z.number().int(),
  borrow_amount: z.string(),
  collateral_amount: z.string(),
  current_loan_to_value: z.string(),
  liquidation_loan_to_value_threshold: z.string(),
}).transform((v) => {
  return remap$(v, {
    "borrow_shares": "borrowShares",
    "borrow_amount": "borrowAmount",
    "collateral_amount": "collateralAmount",
    "current_loan_to_value": "currentLoanToValue",
    "liquidation_loan_to_value_threshold": "liquidationLoanToValueThreshold",
  });
});

/** @internal */
export type MorphoCheckMarketPositionResponse$Outbound = {
  borrow_shares: number;
  borrow_amount: string;
  collateral_amount: string;
  current_loan_to_value: string;
  liquidation_loan_to_value_threshold: string;
};

/** @internal */
export const MorphoCheckMarketPositionResponse$outboundSchema: z.ZodType<
  MorphoCheckMarketPositionResponse$Outbound,
  z.ZodTypeDef,
  MorphoCheckMarketPositionResponse
> = z.object({
  borrowShares: z.number().int(),
  borrowAmount: z.string(),
  collateralAmount: z.string(),
  currentLoanToValue: z.string(),
  liquidationLoanToValueThreshold: z.string(),
}).transform((v) => {
  return remap$(v, {
    borrowShares: "borrow_shares",
    borrowAmount: "borrow_amount",
    collateralAmount: "collateral_amount",
    currentLoanToValue: "current_loan_to_value",
    liquidationLoanToValueThreshold: "liquidation_loan_to_value_threshold",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MorphoCheckMarketPositionResponse$ {
  /** @deprecated use `MorphoCheckMarketPositionResponse$inboundSchema` instead. */
  export const inboundSchema = MorphoCheckMarketPositionResponse$inboundSchema;
  /** @deprecated use `MorphoCheckMarketPositionResponse$outboundSchema` instead. */
  export const outboundSchema =
    MorphoCheckMarketPositionResponse$outboundSchema;
  /** @deprecated use `MorphoCheckMarketPositionResponse$Outbound` instead. */
  export type Outbound = MorphoCheckMarketPositionResponse$Outbound;
}

export function morphoCheckMarketPositionResponseToJSON(
  morphoCheckMarketPositionResponse: MorphoCheckMarketPositionResponse,
): string {
  return JSON.stringify(
    MorphoCheckMarketPositionResponse$outboundSchema.parse(
      morphoCheckMarketPositionResponse,
    ),
  );
}

export function morphoCheckMarketPositionResponseFromJSON(
  jsonString: string,
): SafeParseResult<MorphoCheckMarketPositionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MorphoCheckMarketPositionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MorphoCheckMarketPositionResponse' from JSON`,
  );
}
