/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UnsignedTransaction,
  UnsignedTransaction$inboundSchema,
  UnsignedTransaction$Outbound,
  UnsignedTransaction$outboundSchema,
} from "./unsignedtransaction.js";
import {
  UserOperationResponse,
  UserOperationResponse$inboundSchema,
  UserOperationResponse$Outbound,
  UserOperationResponse$outboundSchema,
} from "./useroperationresponse.js";

/**
 * The unsigned transaction data. User must sign and broadcast to network.
 */
export type TransactionResponseTransaction =
  | UnsignedTransaction
  | UserOperationResponse;

export type TransactionResponse = {
  /**
   * The unsigned transaction data. User must sign and broadcast to network.
   */
  transaction: UnsignedTransaction | UserOperationResponse;
};

/** @internal */
export const TransactionResponseTransaction$inboundSchema: z.ZodType<
  TransactionResponseTransaction,
  z.ZodTypeDef,
  unknown
> = z.union([
  UnsignedTransaction$inboundSchema,
  UserOperationResponse$inboundSchema,
]);

/** @internal */
export type TransactionResponseTransaction$Outbound =
  | UnsignedTransaction$Outbound
  | UserOperationResponse$Outbound;

/** @internal */
export const TransactionResponseTransaction$outboundSchema: z.ZodType<
  TransactionResponseTransaction$Outbound,
  z.ZodTypeDef,
  TransactionResponseTransaction
> = z.union([
  UnsignedTransaction$outboundSchema,
  UserOperationResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionResponseTransaction$ {
  /** @deprecated use `TransactionResponseTransaction$inboundSchema` instead. */
  export const inboundSchema = TransactionResponseTransaction$inboundSchema;
  /** @deprecated use `TransactionResponseTransaction$outboundSchema` instead. */
  export const outboundSchema = TransactionResponseTransaction$outboundSchema;
  /** @deprecated use `TransactionResponseTransaction$Outbound` instead. */
  export type Outbound = TransactionResponseTransaction$Outbound;
}

export function transactionResponseTransactionToJSON(
  transactionResponseTransaction: TransactionResponseTransaction,
): string {
  return JSON.stringify(
    TransactionResponseTransaction$outboundSchema.parse(
      transactionResponseTransaction,
    ),
  );
}

export function transactionResponseTransactionFromJSON(
  jsonString: string,
): SafeParseResult<TransactionResponseTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionResponseTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionResponseTransaction' from JSON`,
  );
}

/** @internal */
export const TransactionResponse$inboundSchema: z.ZodType<
  TransactionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  transaction: z.union([
    UnsignedTransaction$inboundSchema,
    UserOperationResponse$inboundSchema,
  ]),
});

/** @internal */
export type TransactionResponse$Outbound = {
  transaction: UnsignedTransaction$Outbound | UserOperationResponse$Outbound;
};

/** @internal */
export const TransactionResponse$outboundSchema: z.ZodType<
  TransactionResponse$Outbound,
  z.ZodTypeDef,
  TransactionResponse
> = z.object({
  transaction: z.union([
    UnsignedTransaction$outboundSchema,
    UserOperationResponse$outboundSchema,
  ]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TransactionResponse$ {
  /** @deprecated use `TransactionResponse$inboundSchema` instead. */
  export const inboundSchema = TransactionResponse$inboundSchema;
  /** @deprecated use `TransactionResponse$outboundSchema` instead. */
  export const outboundSchema = TransactionResponse$outboundSchema;
  /** @deprecated use `TransactionResponse$Outbound` instead. */
  export type Outbound = TransactionResponse$Outbound;
}

export function transactionResponseToJSON(
  transactionResponse: TransactionResponse,
): string {
  return JSON.stringify(
    TransactionResponse$outboundSchema.parse(transactionResponse),
  );
}

export function transactionResponseFromJSON(
  jsonString: string,
): SafeParseResult<TransactionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TransactionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TransactionResponse' from JSON`,
  );
}
