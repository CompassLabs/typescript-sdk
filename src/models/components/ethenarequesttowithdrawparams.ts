/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EthenaRequestToWithdrawParams = {
  actionType?: "ETHENA_REQUEST_WITHDRAW" | undefined;
  /**
   * The amount of USDe to request to withdraw from Ethena's vault. If set to 'ALL', your total deposited USDe amount will be requested to be withdrawn.
   */
  amount?: any | undefined;
};

/** @internal */
export const EthenaRequestToWithdrawParams$inboundSchema: z.ZodType<
  EthenaRequestToWithdrawParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("ETHENA_REQUEST_WITHDRAW").default(
    "ETHENA_REQUEST_WITHDRAW",
  ),
  amount: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
  });
});

/** @internal */
export type EthenaRequestToWithdrawParams$Outbound = {
  action_type: "ETHENA_REQUEST_WITHDRAW";
  amount?: any | undefined;
};

/** @internal */
export const EthenaRequestToWithdrawParams$outboundSchema: z.ZodType<
  EthenaRequestToWithdrawParams$Outbound,
  z.ZodTypeDef,
  EthenaRequestToWithdrawParams
> = z.object({
  actionType: z.literal("ETHENA_REQUEST_WITHDRAW").default(
    "ETHENA_REQUEST_WITHDRAW" as const,
  ),
  amount: z.any().optional(),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EthenaRequestToWithdrawParams$ {
  /** @deprecated use `EthenaRequestToWithdrawParams$inboundSchema` instead. */
  export const inboundSchema = EthenaRequestToWithdrawParams$inboundSchema;
  /** @deprecated use `EthenaRequestToWithdrawParams$outboundSchema` instead. */
  export const outboundSchema = EthenaRequestToWithdrawParams$outboundSchema;
  /** @deprecated use `EthenaRequestToWithdrawParams$Outbound` instead. */
  export type Outbound = EthenaRequestToWithdrawParams$Outbound;
}

export function ethenaRequestToWithdrawParamsToJSON(
  ethenaRequestToWithdrawParams: EthenaRequestToWithdrawParams,
): string {
  return JSON.stringify(
    EthenaRequestToWithdrawParams$outboundSchema.parse(
      ethenaRequestToWithdrawParams,
    ),
  );
}

export function ethenaRequestToWithdrawParamsFromJSON(
  jsonString: string,
): SafeParseResult<EthenaRequestToWithdrawParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EthenaRequestToWithdrawParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EthenaRequestToWithdrawParams' from JSON`,
  );
}
