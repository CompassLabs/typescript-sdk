/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The token you would like to swap 1:1 with USDS. Choose from DAI or USDC.
 */
export const SkySellParamsTokenOut = {
  Dai: "DAI",
  Usdc: "USDC",
} as const;
/**
 * The token you would like to swap 1:1 with USDS. Choose from DAI or USDC.
 */
export type SkySellParamsTokenOut = ClosedEnum<typeof SkySellParamsTokenOut>;

/**
 * The amount of USDS you would like to sell 1:1 for 'token_out'.
 */
export type SkySellParamsAmount = number | string;

export type SkySellParams = {
  actionType?: "SKY_SELL" | undefined;
  /**
   * The token you would like to swap 1:1 with USDS. Choose from DAI or USDC.
   */
  tokenOut: SkySellParamsTokenOut;
  /**
   * The amount of USDS you would like to sell 1:1 for 'token_out'.
   */
  amount: number | string;
};

/** @internal */
export const SkySellParamsTokenOut$inboundSchema: z.ZodNativeEnum<
  typeof SkySellParamsTokenOut
> = z.nativeEnum(SkySellParamsTokenOut);

/** @internal */
export const SkySellParamsTokenOut$outboundSchema: z.ZodNativeEnum<
  typeof SkySellParamsTokenOut
> = SkySellParamsTokenOut$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkySellParamsTokenOut$ {
  /** @deprecated use `SkySellParamsTokenOut$inboundSchema` instead. */
  export const inboundSchema = SkySellParamsTokenOut$inboundSchema;
  /** @deprecated use `SkySellParamsTokenOut$outboundSchema` instead. */
  export const outboundSchema = SkySellParamsTokenOut$outboundSchema;
}

/** @internal */
export const SkySellParamsAmount$inboundSchema: z.ZodType<
  SkySellParamsAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type SkySellParamsAmount$Outbound = number | string;

/** @internal */
export const SkySellParamsAmount$outboundSchema: z.ZodType<
  SkySellParamsAmount$Outbound,
  z.ZodTypeDef,
  SkySellParamsAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkySellParamsAmount$ {
  /** @deprecated use `SkySellParamsAmount$inboundSchema` instead. */
  export const inboundSchema = SkySellParamsAmount$inboundSchema;
  /** @deprecated use `SkySellParamsAmount$outboundSchema` instead. */
  export const outboundSchema = SkySellParamsAmount$outboundSchema;
  /** @deprecated use `SkySellParamsAmount$Outbound` instead. */
  export type Outbound = SkySellParamsAmount$Outbound;
}

export function skySellParamsAmountToJSON(
  skySellParamsAmount: SkySellParamsAmount,
): string {
  return JSON.stringify(
    SkySellParamsAmount$outboundSchema.parse(skySellParamsAmount),
  );
}

export function skySellParamsAmountFromJSON(
  jsonString: string,
): SafeParseResult<SkySellParamsAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SkySellParamsAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SkySellParamsAmount' from JSON`,
  );
}

/** @internal */
export const SkySellParams$inboundSchema: z.ZodType<
  SkySellParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("SKY_SELL").default("SKY_SELL"),
  token_out: SkySellParamsTokenOut$inboundSchema,
  amount: z.union([z.number(), z.string()]),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "token_out": "tokenOut",
  });
});

/** @internal */
export type SkySellParams$Outbound = {
  action_type: "SKY_SELL";
  token_out: string;
  amount: number | string;
};

/** @internal */
export const SkySellParams$outboundSchema: z.ZodType<
  SkySellParams$Outbound,
  z.ZodTypeDef,
  SkySellParams
> = z.object({
  actionType: z.literal("SKY_SELL").default("SKY_SELL" as const),
  tokenOut: SkySellParamsTokenOut$outboundSchema,
  amount: z.union([z.number(), z.string()]),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    tokenOut: "token_out",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkySellParams$ {
  /** @deprecated use `SkySellParams$inboundSchema` instead. */
  export const inboundSchema = SkySellParams$inboundSchema;
  /** @deprecated use `SkySellParams$outboundSchema` instead. */
  export const outboundSchema = SkySellParams$outboundSchema;
  /** @deprecated use `SkySellParams$Outbound` instead. */
  export type Outbound = SkySellParams$Outbound;
}

export function skySellParamsToJSON(skySellParams: SkySellParams): string {
  return JSON.stringify(SkySellParams$outboundSchema.parse(skySellParams));
}

export function skySellParamsFromJSON(
  jsonString: string,
): SafeParseResult<SkySellParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SkySellParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SkySellParams' from JSON`,
  );
}
