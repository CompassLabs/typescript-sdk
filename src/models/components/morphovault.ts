/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  ChainInfo,
  ChainInfo$inboundSchema,
  ChainInfo$Outbound,
  ChainInfo$outboundSchema,
} from "./chaininfo.js";
import {
  CompassApiBackendModelsMorphoReadResponseGetVaultsAsset,
  CompassApiBackendModelsMorphoReadResponseGetVaultsAsset$inboundSchema,
  CompassApiBackendModelsMorphoReadResponseGetVaultsAsset$Outbound,
  CompassApiBackendModelsMorphoReadResponseGetVaultsAsset$outboundSchema,
} from "./compassapibackendmodelsmorphoreadresponsegetvaultsasset.js";
import {
  CompassApiBackendModelsMorphoReadResponseGetVaultsVaultState,
  CompassApiBackendModelsMorphoReadResponseGetVaultsVaultState$inboundSchema,
  CompassApiBackendModelsMorphoReadResponseGetVaultsVaultState$Outbound,
  CompassApiBackendModelsMorphoReadResponseGetVaultsVaultState$outboundSchema,
} from "./compassapibackendmodelsmorphoreadresponsegetvaultsvaultstate.js";

export type MorphoVault = {
  address: string;
  symbol: string;
  name: string;
  creationBlockNumber: number;
  creationTimestamp: number;
  creatorAddress: string;
  whitelisted: boolean;
  asset: CompassApiBackendModelsMorphoReadResponseGetVaultsAsset;
  chain: ChainInfo;
  state: CompassApiBackendModelsMorphoReadResponseGetVaultsVaultState;
};

/** @internal */
export const MorphoVault$inboundSchema: z.ZodType<
  MorphoVault,
  z.ZodTypeDef,
  unknown
> = z.object({
  address: z.string(),
  symbol: z.string(),
  name: z.string(),
  creationBlockNumber: z.number().int(),
  creationTimestamp: z.number().int(),
  creatorAddress: z.string(),
  whitelisted: z.boolean(),
  asset: CompassApiBackendModelsMorphoReadResponseGetVaultsAsset$inboundSchema,
  chain: ChainInfo$inboundSchema,
  state:
    CompassApiBackendModelsMorphoReadResponseGetVaultsVaultState$inboundSchema,
});

/** @internal */
export type MorphoVault$Outbound = {
  address: string;
  symbol: string;
  name: string;
  creationBlockNumber: number;
  creationTimestamp: number;
  creatorAddress: string;
  whitelisted: boolean;
  asset: CompassApiBackendModelsMorphoReadResponseGetVaultsAsset$Outbound;
  chain: ChainInfo$Outbound;
  state: CompassApiBackendModelsMorphoReadResponseGetVaultsVaultState$Outbound;
};

/** @internal */
export const MorphoVault$outboundSchema: z.ZodType<
  MorphoVault$Outbound,
  z.ZodTypeDef,
  MorphoVault
> = z.object({
  address: z.string(),
  symbol: z.string(),
  name: z.string(),
  creationBlockNumber: z.number().int(),
  creationTimestamp: z.number().int(),
  creatorAddress: z.string(),
  whitelisted: z.boolean(),
  asset: CompassApiBackendModelsMorphoReadResponseGetVaultsAsset$outboundSchema,
  chain: ChainInfo$outboundSchema,
  state:
    CompassApiBackendModelsMorphoReadResponseGetVaultsVaultState$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MorphoVault$ {
  /** @deprecated use `MorphoVault$inboundSchema` instead. */
  export const inboundSchema = MorphoVault$inboundSchema;
  /** @deprecated use `MorphoVault$outboundSchema` instead. */
  export const outboundSchema = MorphoVault$outboundSchema;
  /** @deprecated use `MorphoVault$Outbound` instead. */
  export type Outbound = MorphoVault$Outbound;
}

export function morphoVaultToJSON(morphoVault: MorphoVault): string {
  return JSON.stringify(MorphoVault$outboundSchema.parse(morphoVault));
}

export function morphoVaultFromJSON(
  jsonString: string,
): SafeParseResult<MorphoVault, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MorphoVault$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MorphoVault' from JSON`,
  );
}
