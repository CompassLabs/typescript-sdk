/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type MorphoWithdrawParams = {
  actionType?: "MORPHO_WITHDRAW" | undefined;
  /**
   * The vault address you are withdrawing from.
   */
  vaultAddress: string;
  /**
   * The amount of tokens to withdraw from the vault. If set to 'ALL', your total deposited token amount will be withdrawn.
   */
  amount?: any | undefined;
  /**
   * The address which will receive the tokens withdrawn. Defaults to the sender.
   */
  receiver?: string | null | undefined;
};

/** @internal */
export const MorphoWithdrawParams$inboundSchema: z.ZodType<
  MorphoWithdrawParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("MORPHO_WITHDRAW").default("MORPHO_WITHDRAW"),
  vault_address: z.string(),
  amount: z.any().optional(),
  receiver: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "vault_address": "vaultAddress",
  });
});

/** @internal */
export type MorphoWithdrawParams$Outbound = {
  action_type: "MORPHO_WITHDRAW";
  vault_address: string;
  amount?: any | undefined;
  receiver?: string | null | undefined;
};

/** @internal */
export const MorphoWithdrawParams$outboundSchema: z.ZodType<
  MorphoWithdrawParams$Outbound,
  z.ZodTypeDef,
  MorphoWithdrawParams
> = z.object({
  actionType: z.literal("MORPHO_WITHDRAW").default("MORPHO_WITHDRAW" as const),
  vaultAddress: z.string(),
  amount: z.any().optional(),
  receiver: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    vaultAddress: "vault_address",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MorphoWithdrawParams$ {
  /** @deprecated use `MorphoWithdrawParams$inboundSchema` instead. */
  export const inboundSchema = MorphoWithdrawParams$inboundSchema;
  /** @deprecated use `MorphoWithdrawParams$outboundSchema` instead. */
  export const outboundSchema = MorphoWithdrawParams$outboundSchema;
  /** @deprecated use `MorphoWithdrawParams$Outbound` instead. */
  export type Outbound = MorphoWithdrawParams$Outbound;
}

export function morphoWithdrawParamsToJSON(
  morphoWithdrawParams: MorphoWithdrawParams,
): string {
  return JSON.stringify(
    MorphoWithdrawParams$outboundSchema.parse(morphoWithdrawParams),
  );
}

export function morphoWithdrawParamsFromJSON(
  jsonString: string,
): SafeParseResult<MorphoWithdrawParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MorphoWithdrawParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MorphoWithdrawParams' from JSON`,
  );
}
