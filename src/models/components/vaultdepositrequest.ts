/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The amount of tokens to deposit into the vault.
 */
export type VaultDepositRequestAmount = number | string;

export const VaultDepositRequestChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type VaultDepositRequestChain = ClosedEnum<
  typeof VaultDepositRequestChain
>;

export type VaultDepositRequest = {
  actionType?: "VAULT_DEPOSIT" | undefined;
  /**
   * The vault address you are depositing to.
   */
  vaultAddress: string;
  /**
   * The amount of tokens to deposit into the vault.
   */
  amount: number | string;
  /**
   * The address which will receive the shares from the vault representing their proportional ownership of the vault's assets. Defaults to the sender.
   */
  receiver?: string | null | undefined;
  chain: VaultDepositRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const VaultDepositRequestAmount$inboundSchema: z.ZodType<
  VaultDepositRequestAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type VaultDepositRequestAmount$Outbound = number | string;

/** @internal */
export const VaultDepositRequestAmount$outboundSchema: z.ZodType<
  VaultDepositRequestAmount$Outbound,
  z.ZodTypeDef,
  VaultDepositRequestAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VaultDepositRequestAmount$ {
  /** @deprecated use `VaultDepositRequestAmount$inboundSchema` instead. */
  export const inboundSchema = VaultDepositRequestAmount$inboundSchema;
  /** @deprecated use `VaultDepositRequestAmount$outboundSchema` instead. */
  export const outboundSchema = VaultDepositRequestAmount$outboundSchema;
  /** @deprecated use `VaultDepositRequestAmount$Outbound` instead. */
  export type Outbound = VaultDepositRequestAmount$Outbound;
}

export function vaultDepositRequestAmountToJSON(
  vaultDepositRequestAmount: VaultDepositRequestAmount,
): string {
  return JSON.stringify(
    VaultDepositRequestAmount$outboundSchema.parse(vaultDepositRequestAmount),
  );
}

export function vaultDepositRequestAmountFromJSON(
  jsonString: string,
): SafeParseResult<VaultDepositRequestAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VaultDepositRequestAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VaultDepositRequestAmount' from JSON`,
  );
}

/** @internal */
export const VaultDepositRequestChain$inboundSchema: z.ZodNativeEnum<
  typeof VaultDepositRequestChain
> = z.nativeEnum(VaultDepositRequestChain);

/** @internal */
export const VaultDepositRequestChain$outboundSchema: z.ZodNativeEnum<
  typeof VaultDepositRequestChain
> = VaultDepositRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VaultDepositRequestChain$ {
  /** @deprecated use `VaultDepositRequestChain$inboundSchema` instead. */
  export const inboundSchema = VaultDepositRequestChain$inboundSchema;
  /** @deprecated use `VaultDepositRequestChain$outboundSchema` instead. */
  export const outboundSchema = VaultDepositRequestChain$outboundSchema;
}

/** @internal */
export const VaultDepositRequest$inboundSchema: z.ZodType<
  VaultDepositRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("VAULT_DEPOSIT").default("VAULT_DEPOSIT"),
  vault_address: z.string(),
  amount: z.union([z.number(), z.string()]),
  receiver: z.nullable(z.string()).optional(),
  chain: VaultDepositRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "vault_address": "vaultAddress",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type VaultDepositRequest$Outbound = {
  action_type: "VAULT_DEPOSIT";
  vault_address: string;
  amount: number | string;
  receiver?: string | null | undefined;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const VaultDepositRequest$outboundSchema: z.ZodType<
  VaultDepositRequest$Outbound,
  z.ZodTypeDef,
  VaultDepositRequest
> = z.object({
  actionType: z.literal("VAULT_DEPOSIT").default("VAULT_DEPOSIT" as const),
  vaultAddress: z.string(),
  amount: z.union([z.number(), z.string()]),
  receiver: z.nullable(z.string()).optional(),
  chain: VaultDepositRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    vaultAddress: "vault_address",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VaultDepositRequest$ {
  /** @deprecated use `VaultDepositRequest$inboundSchema` instead. */
  export const inboundSchema = VaultDepositRequest$inboundSchema;
  /** @deprecated use `VaultDepositRequest$outboundSchema` instead. */
  export const outboundSchema = VaultDepositRequest$outboundSchema;
  /** @deprecated use `VaultDepositRequest$Outbound` instead. */
  export type Outbound = VaultDepositRequest$Outbound;
}

export function vaultDepositRequestToJSON(
  vaultDepositRequest: VaultDepositRequest,
): string {
  return JSON.stringify(
    VaultDepositRequest$outboundSchema.parse(vaultDepositRequest),
  );
}

export function vaultDepositRequestFromJSON(
  jsonString: string,
): SafeParseResult<VaultDepositRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VaultDepositRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VaultDepositRequest' from JSON`,
  );
}
