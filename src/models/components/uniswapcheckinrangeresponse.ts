/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UniswapCheckInRangeResponse = {
  /**
   * Whether the position is in active tick range or not. If not in range, the position is not earning trading fees.
   */
  inRange: boolean;
};

/** @internal */
export const UniswapCheckInRangeResponse$inboundSchema: z.ZodType<
  UniswapCheckInRangeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  in_range: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "in_range": "inRange",
  });
});

/** @internal */
export type UniswapCheckInRangeResponse$Outbound = {
  in_range: boolean;
};

/** @internal */
export const UniswapCheckInRangeResponse$outboundSchema: z.ZodType<
  UniswapCheckInRangeResponse$Outbound,
  z.ZodTypeDef,
  UniswapCheckInRangeResponse
> = z.object({
  inRange: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    inRange: "in_range",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapCheckInRangeResponse$ {
  /** @deprecated use `UniswapCheckInRangeResponse$inboundSchema` instead. */
  export const inboundSchema = UniswapCheckInRangeResponse$inboundSchema;
  /** @deprecated use `UniswapCheckInRangeResponse$outboundSchema` instead. */
  export const outboundSchema = UniswapCheckInRangeResponse$outboundSchema;
  /** @deprecated use `UniswapCheckInRangeResponse$Outbound` instead. */
  export type Outbound = UniswapCheckInRangeResponse$Outbound;
}

export function uniswapCheckInRangeResponseToJSON(
  uniswapCheckInRangeResponse: UniswapCheckInRangeResponse,
): string {
  return JSON.stringify(
    UniswapCheckInRangeResponse$outboundSchema.parse(
      uniswapCheckInRangeResponse,
    ),
  );
}

export function uniswapCheckInRangeResponseFromJSON(
  jsonString: string,
): SafeParseResult<UniswapCheckInRangeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UniswapCheckInRangeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UniswapCheckInRangeResponse' from JSON`,
  );
}
