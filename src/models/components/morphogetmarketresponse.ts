/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CompassApiBackendModelsMorphoReadResponseGetMarketApyData,
  CompassApiBackendModelsMorphoReadResponseGetMarketApyData$inboundSchema,
  CompassApiBackendModelsMorphoReadResponseGetMarketApyData$Outbound,
  CompassApiBackendModelsMorphoReadResponseGetMarketApyData$outboundSchema,
} from "./compassapibackendmodelsmorphoreadresponsegetmarketapydata.js";
import {
  CompassApiBackendModelsMorphoReadResponseGetMarketAsset,
  CompassApiBackendModelsMorphoReadResponseGetMarketAsset$inboundSchema,
  CompassApiBackendModelsMorphoReadResponseGetMarketAsset$Outbound,
  CompassApiBackendModelsMorphoReadResponseGetMarketAsset$outboundSchema,
} from "./compassapibackendmodelsmorphoreadresponsegetmarketasset.js";
import {
  CompassApiBackendModelsMorphoReadResponseGetMarketMarketState,
  CompassApiBackendModelsMorphoReadResponseGetMarketMarketState$inboundSchema,
  CompassApiBackendModelsMorphoReadResponseGetMarketMarketState$Outbound,
  CompassApiBackendModelsMorphoReadResponseGetMarketMarketState$outboundSchema,
} from "./compassapibackendmodelsmorphoreadresponsegetmarketmarketstate.js";

export type MorphoGetMarketResponse = {
  /**
   * Whether the market is whitelisted or not.
   */
  whitelisted: boolean;
  /**
   * (Liquidation Loan-To-Value) Maximum borrowing percentage before liquidation risk. Scaled by 1e18.
   */
  lltv: string;
  dailyApys: CompassApiBackendModelsMorphoReadResponseGetMarketApyData;
  weeklyApys: CompassApiBackendModelsMorphoReadResponseGetMarketApyData;
  monthlyApys: CompassApiBackendModelsMorphoReadResponseGetMarketApyData;
  yearlyApys: CompassApiBackendModelsMorphoReadResponseGetMarketApyData;
  allTimeApys: CompassApiBackendModelsMorphoReadResponseGetMarketApyData;
  collateralAsset: CompassApiBackendModelsMorphoReadResponseGetMarketAsset;
  loanAsset: CompassApiBackendModelsMorphoReadResponseGetMarketAsset;
  state: CompassApiBackendModelsMorphoReadResponseGetMarketMarketState;
};

/** @internal */
export const MorphoGetMarketResponse$inboundSchema: z.ZodType<
  MorphoGetMarketResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  whitelisted: z.boolean(),
  lltv: z.string(),
  dailyApys:
    CompassApiBackendModelsMorphoReadResponseGetMarketApyData$inboundSchema,
  weeklyApys:
    CompassApiBackendModelsMorphoReadResponseGetMarketApyData$inboundSchema,
  monthlyApys:
    CompassApiBackendModelsMorphoReadResponseGetMarketApyData$inboundSchema,
  yearlyApys:
    CompassApiBackendModelsMorphoReadResponseGetMarketApyData$inboundSchema,
  allTimeApys:
    CompassApiBackendModelsMorphoReadResponseGetMarketApyData$inboundSchema,
  collateralAsset:
    CompassApiBackendModelsMorphoReadResponseGetMarketAsset$inboundSchema,
  loanAsset:
    CompassApiBackendModelsMorphoReadResponseGetMarketAsset$inboundSchema,
  state:
    CompassApiBackendModelsMorphoReadResponseGetMarketMarketState$inboundSchema,
});

/** @internal */
export type MorphoGetMarketResponse$Outbound = {
  whitelisted: boolean;
  lltv: string;
  dailyApys: CompassApiBackendModelsMorphoReadResponseGetMarketApyData$Outbound;
  weeklyApys:
    CompassApiBackendModelsMorphoReadResponseGetMarketApyData$Outbound;
  monthlyApys:
    CompassApiBackendModelsMorphoReadResponseGetMarketApyData$Outbound;
  yearlyApys:
    CompassApiBackendModelsMorphoReadResponseGetMarketApyData$Outbound;
  allTimeApys:
    CompassApiBackendModelsMorphoReadResponseGetMarketApyData$Outbound;
  collateralAsset:
    CompassApiBackendModelsMorphoReadResponseGetMarketAsset$Outbound;
  loanAsset: CompassApiBackendModelsMorphoReadResponseGetMarketAsset$Outbound;
  state: CompassApiBackendModelsMorphoReadResponseGetMarketMarketState$Outbound;
};

/** @internal */
export const MorphoGetMarketResponse$outboundSchema: z.ZodType<
  MorphoGetMarketResponse$Outbound,
  z.ZodTypeDef,
  MorphoGetMarketResponse
> = z.object({
  whitelisted: z.boolean(),
  lltv: z.string(),
  dailyApys:
    CompassApiBackendModelsMorphoReadResponseGetMarketApyData$outboundSchema,
  weeklyApys:
    CompassApiBackendModelsMorphoReadResponseGetMarketApyData$outboundSchema,
  monthlyApys:
    CompassApiBackendModelsMorphoReadResponseGetMarketApyData$outboundSchema,
  yearlyApys:
    CompassApiBackendModelsMorphoReadResponseGetMarketApyData$outboundSchema,
  allTimeApys:
    CompassApiBackendModelsMorphoReadResponseGetMarketApyData$outboundSchema,
  collateralAsset:
    CompassApiBackendModelsMorphoReadResponseGetMarketAsset$outboundSchema,
  loanAsset:
    CompassApiBackendModelsMorphoReadResponseGetMarketAsset$outboundSchema,
  state:
    CompassApiBackendModelsMorphoReadResponseGetMarketMarketState$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MorphoGetMarketResponse$ {
  /** @deprecated use `MorphoGetMarketResponse$inboundSchema` instead. */
  export const inboundSchema = MorphoGetMarketResponse$inboundSchema;
  /** @deprecated use `MorphoGetMarketResponse$outboundSchema` instead. */
  export const outboundSchema = MorphoGetMarketResponse$outboundSchema;
  /** @deprecated use `MorphoGetMarketResponse$Outbound` instead. */
  export type Outbound = MorphoGetMarketResponse$Outbound;
}

export function morphoGetMarketResponseToJSON(
  morphoGetMarketResponse: MorphoGetMarketResponse,
): string {
  return JSON.stringify(
    MorphoGetMarketResponse$outboundSchema.parse(morphoGetMarketResponse),
  );
}

export function morphoGetMarketResponseFromJSON(
  jsonString: string,
): SafeParseResult<MorphoGetMarketResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MorphoGetMarketResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MorphoGetMarketResponse' from JSON`,
  );
}
