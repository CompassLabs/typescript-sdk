/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The amount of tokens to deposit into the vault.
 */
export type MorphoDepositParamsAmount = number | string;

export type MorphoDepositParams = {
  actionType?: "MORPHO_DEPOSIT" | undefined;
  /**
   * The vault address you are depositing to.
   */
  vaultAddress: string;
  /**
   * The amount of tokens to deposit into the vault.
   */
  amount: number | string;
  /**
   * The address which will receive the shares from the vault representing their proportional ownership of the vault's assets. Defaults to the sender.
   */
  receiver?: string | null | undefined;
};

/** @internal */
export const MorphoDepositParamsAmount$inboundSchema: z.ZodType<
  MorphoDepositParamsAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type MorphoDepositParamsAmount$Outbound = number | string;

/** @internal */
export const MorphoDepositParamsAmount$outboundSchema: z.ZodType<
  MorphoDepositParamsAmount$Outbound,
  z.ZodTypeDef,
  MorphoDepositParamsAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MorphoDepositParamsAmount$ {
  /** @deprecated use `MorphoDepositParamsAmount$inboundSchema` instead. */
  export const inboundSchema = MorphoDepositParamsAmount$inboundSchema;
  /** @deprecated use `MorphoDepositParamsAmount$outboundSchema` instead. */
  export const outboundSchema = MorphoDepositParamsAmount$outboundSchema;
  /** @deprecated use `MorphoDepositParamsAmount$Outbound` instead. */
  export type Outbound = MorphoDepositParamsAmount$Outbound;
}

export function morphoDepositParamsAmountToJSON(
  morphoDepositParamsAmount: MorphoDepositParamsAmount,
): string {
  return JSON.stringify(
    MorphoDepositParamsAmount$outboundSchema.parse(morphoDepositParamsAmount),
  );
}

export function morphoDepositParamsAmountFromJSON(
  jsonString: string,
): SafeParseResult<MorphoDepositParamsAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MorphoDepositParamsAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MorphoDepositParamsAmount' from JSON`,
  );
}

/** @internal */
export const MorphoDepositParams$inboundSchema: z.ZodType<
  MorphoDepositParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("MORPHO_DEPOSIT").default("MORPHO_DEPOSIT"),
  vault_address: z.string(),
  amount: z.union([z.number(), z.string()]),
  receiver: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "vault_address": "vaultAddress",
  });
});

/** @internal */
export type MorphoDepositParams$Outbound = {
  action_type: "MORPHO_DEPOSIT";
  vault_address: string;
  amount: number | string;
  receiver?: string | null | undefined;
};

/** @internal */
export const MorphoDepositParams$outboundSchema: z.ZodType<
  MorphoDepositParams$Outbound,
  z.ZodTypeDef,
  MorphoDepositParams
> = z.object({
  actionType: z.literal("MORPHO_DEPOSIT").default("MORPHO_DEPOSIT" as const),
  vaultAddress: z.string(),
  amount: z.union([z.number(), z.string()]),
  receiver: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    vaultAddress: "vault_address",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MorphoDepositParams$ {
  /** @deprecated use `MorphoDepositParams$inboundSchema` instead. */
  export const inboundSchema = MorphoDepositParams$inboundSchema;
  /** @deprecated use `MorphoDepositParams$outboundSchema` instead. */
  export const outboundSchema = MorphoDepositParams$outboundSchema;
  /** @deprecated use `MorphoDepositParams$Outbound` instead. */
  export type Outbound = MorphoDepositParams$Outbound;
}

export function morphoDepositParamsToJSON(
  morphoDepositParams: MorphoDepositParams,
): string {
  return JSON.stringify(
    MorphoDepositParams$outboundSchema.parse(morphoDepositParams),
  );
}

export function morphoDepositParamsFromJSON(
  jsonString: string,
): SafeParseResult<MorphoDepositParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MorphoDepositParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MorphoDepositParams' from JSON`,
  );
}
