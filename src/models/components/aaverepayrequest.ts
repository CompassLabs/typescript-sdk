/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  InterestRateMode,
  InterestRateMode$inboundSchema,
  InterestRateMode$outboundSchema,
} from "./interestratemode.js";

/**
 * The amount of the asset to repay
 */
export type AaveRepayRequestAmount = number | string;

export const AaveRepayRequestChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type AaveRepayRequestChain = ClosedEnum<typeof AaveRepayRequestChain>;

export type AaveRepayRequest = {
  actionType?: "AAVE_REPAY" | undefined;
  /**
   * The symbol of the underlying asset to repay..
   */
  token: string;
  /**
   * The amount of the asset to repay
   */
  amount: number | string;
  /**
   * On AAVE there are 2 different interest modes.
   *
   * @remarks
   *
   * A stable (but typically higher rate), or a variable rate.
   */
  interestRateMode: InterestRateMode;
  /**
   * The address on behalf of whom the supply is made
   */
  onBehalfOf?: string | null | undefined;
  chain: AaveRepayRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const AaveRepayRequestAmount$inboundSchema: z.ZodType<
  AaveRepayRequestAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type AaveRepayRequestAmount$Outbound = number | string;

/** @internal */
export const AaveRepayRequestAmount$outboundSchema: z.ZodType<
  AaveRepayRequestAmount$Outbound,
  z.ZodTypeDef,
  AaveRepayRequestAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AaveRepayRequestAmount$ {
  /** @deprecated use `AaveRepayRequestAmount$inboundSchema` instead. */
  export const inboundSchema = AaveRepayRequestAmount$inboundSchema;
  /** @deprecated use `AaveRepayRequestAmount$outboundSchema` instead. */
  export const outboundSchema = AaveRepayRequestAmount$outboundSchema;
  /** @deprecated use `AaveRepayRequestAmount$Outbound` instead. */
  export type Outbound = AaveRepayRequestAmount$Outbound;
}

export function aaveRepayRequestAmountToJSON(
  aaveRepayRequestAmount: AaveRepayRequestAmount,
): string {
  return JSON.stringify(
    AaveRepayRequestAmount$outboundSchema.parse(aaveRepayRequestAmount),
  );
}

export function aaveRepayRequestAmountFromJSON(
  jsonString: string,
): SafeParseResult<AaveRepayRequestAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AaveRepayRequestAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AaveRepayRequestAmount' from JSON`,
  );
}

/** @internal */
export const AaveRepayRequestChain$inboundSchema: z.ZodNativeEnum<
  typeof AaveRepayRequestChain
> = z.nativeEnum(AaveRepayRequestChain);

/** @internal */
export const AaveRepayRequestChain$outboundSchema: z.ZodNativeEnum<
  typeof AaveRepayRequestChain
> = AaveRepayRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AaveRepayRequestChain$ {
  /** @deprecated use `AaveRepayRequestChain$inboundSchema` instead. */
  export const inboundSchema = AaveRepayRequestChain$inboundSchema;
  /** @deprecated use `AaveRepayRequestChain$outboundSchema` instead. */
  export const outboundSchema = AaveRepayRequestChain$outboundSchema;
}

/** @internal */
export const AaveRepayRequest$inboundSchema: z.ZodType<
  AaveRepayRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("AAVE_REPAY").default("AAVE_REPAY"),
  token: z.string(),
  amount: z.union([z.number(), z.string()]),
  interest_rate_mode: InterestRateMode$inboundSchema,
  on_behalf_of: z.nullable(z.string()).optional(),
  chain: AaveRepayRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "interest_rate_mode": "interestRateMode",
    "on_behalf_of": "onBehalfOf",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type AaveRepayRequest$Outbound = {
  action_type: "AAVE_REPAY";
  token: string;
  amount: number | string;
  interest_rate_mode: string;
  on_behalf_of?: string | null | undefined;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const AaveRepayRequest$outboundSchema: z.ZodType<
  AaveRepayRequest$Outbound,
  z.ZodTypeDef,
  AaveRepayRequest
> = z.object({
  actionType: z.literal("AAVE_REPAY").default("AAVE_REPAY" as const),
  token: z.string(),
  amount: z.union([z.number(), z.string()]),
  interestRateMode: InterestRateMode$outboundSchema,
  onBehalfOf: z.nullable(z.string()).optional(),
  chain: AaveRepayRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    interestRateMode: "interest_rate_mode",
    onBehalfOf: "on_behalf_of",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AaveRepayRequest$ {
  /** @deprecated use `AaveRepayRequest$inboundSchema` instead. */
  export const inboundSchema = AaveRepayRequest$inboundSchema;
  /** @deprecated use `AaveRepayRequest$outboundSchema` instead. */
  export const outboundSchema = AaveRepayRequest$outboundSchema;
  /** @deprecated use `AaveRepayRequest$Outbound` instead. */
  export type Outbound = AaveRepayRequest$Outbound;
}

export function aaveRepayRequestToJSON(
  aaveRepayRequest: AaveRepayRequest,
): string {
  return JSON.stringify(
    AaveRepayRequest$outboundSchema.parse(aaveRepayRequest),
  );
}

export function aaveRepayRequestFromJSON(
  jsonString: string,
): SafeParseResult<AaveRepayRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AaveRepayRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AaveRepayRequest' from JSON`,
  );
}
