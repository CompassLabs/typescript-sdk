/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const SetAllowanceParamsContractEnum = {
  AaveV3Pool: "AaveV3Pool",
  AerodromeBasicRouter: "AerodromeBasicRouter",
  AerodromeSlipstreamRouter: "AerodromeSlipstreamRouter",
  AerodromeSlipstreamNonfungiblePositionManager:
    "AerodromeSlipstreamNonfungiblePositionManager",
  UniswapV3Router: "UniswapV3Router",
  UniswapV3NFTPositionManager: "UniswapV3NFTPositionManager",
  Morpho: "Morpho",
  SkyDaiUsdsConverter: "SkyDaiUsdsConverter",
  SkyUsdcUsdsConverter: "SkyUsdcUsdsConverter",
  SkyUsdsVault: "SkyUsdsVault",
  PendleRouter: "PendleRouter",
  OdosRouter: "OdosRouter",
  EthenaVault: "EthenaVault",
} as const;
export type SetAllowanceParamsContractEnum = ClosedEnum<
  typeof SetAllowanceParamsContractEnum
>;

/**
 * The name or address of the contract to set spending allowance for.
 */
export type SetAllowanceParamsContractUnion =
  | SetAllowanceParamsContractEnum
  | string;

/**
 * The amount to set the allowance to.
 */
export type SetAllowanceParamsAmount = number | string;

/**
 * Parameters model for setting the token allowance for a given contract.
 */
export type SetAllowanceParams = {
  actionType?: "SET_ALLOWANCE" | undefined;
  /**
   * The symbol or address of the token for which the allowance is set..
   */
  token: string;
  /**
   * The name or address of the contract to set spending allowance for.
   */
  contract: SetAllowanceParamsContractEnum | string;
  /**
   * The amount to set the allowance to.
   */
  amount: number | string;
};

/** @internal */
export const SetAllowanceParamsContractEnum$inboundSchema: z.ZodNativeEnum<
  typeof SetAllowanceParamsContractEnum
> = z.nativeEnum(SetAllowanceParamsContractEnum);

/** @internal */
export const SetAllowanceParamsContractEnum$outboundSchema: z.ZodNativeEnum<
  typeof SetAllowanceParamsContractEnum
> = SetAllowanceParamsContractEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetAllowanceParamsContractEnum$ {
  /** @deprecated use `SetAllowanceParamsContractEnum$inboundSchema` instead. */
  export const inboundSchema = SetAllowanceParamsContractEnum$inboundSchema;
  /** @deprecated use `SetAllowanceParamsContractEnum$outboundSchema` instead. */
  export const outboundSchema = SetAllowanceParamsContractEnum$outboundSchema;
}

/** @internal */
export const SetAllowanceParamsContractUnion$inboundSchema: z.ZodType<
  SetAllowanceParamsContractUnion,
  z.ZodTypeDef,
  unknown
> = z.union([SetAllowanceParamsContractEnum$inboundSchema, z.string()]);

/** @internal */
export type SetAllowanceParamsContractUnion$Outbound = string | string;

/** @internal */
export const SetAllowanceParamsContractUnion$outboundSchema: z.ZodType<
  SetAllowanceParamsContractUnion$Outbound,
  z.ZodTypeDef,
  SetAllowanceParamsContractUnion
> = z.union([SetAllowanceParamsContractEnum$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetAllowanceParamsContractUnion$ {
  /** @deprecated use `SetAllowanceParamsContractUnion$inboundSchema` instead. */
  export const inboundSchema = SetAllowanceParamsContractUnion$inboundSchema;
  /** @deprecated use `SetAllowanceParamsContractUnion$outboundSchema` instead. */
  export const outboundSchema = SetAllowanceParamsContractUnion$outboundSchema;
  /** @deprecated use `SetAllowanceParamsContractUnion$Outbound` instead. */
  export type Outbound = SetAllowanceParamsContractUnion$Outbound;
}

export function setAllowanceParamsContractUnionToJSON(
  setAllowanceParamsContractUnion: SetAllowanceParamsContractUnion,
): string {
  return JSON.stringify(
    SetAllowanceParamsContractUnion$outboundSchema.parse(
      setAllowanceParamsContractUnion,
    ),
  );
}

export function setAllowanceParamsContractUnionFromJSON(
  jsonString: string,
): SafeParseResult<SetAllowanceParamsContractUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SetAllowanceParamsContractUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SetAllowanceParamsContractUnion' from JSON`,
  );
}

/** @internal */
export const SetAllowanceParamsAmount$inboundSchema: z.ZodType<
  SetAllowanceParamsAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type SetAllowanceParamsAmount$Outbound = number | string;

/** @internal */
export const SetAllowanceParamsAmount$outboundSchema: z.ZodType<
  SetAllowanceParamsAmount$Outbound,
  z.ZodTypeDef,
  SetAllowanceParamsAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetAllowanceParamsAmount$ {
  /** @deprecated use `SetAllowanceParamsAmount$inboundSchema` instead. */
  export const inboundSchema = SetAllowanceParamsAmount$inboundSchema;
  /** @deprecated use `SetAllowanceParamsAmount$outboundSchema` instead. */
  export const outboundSchema = SetAllowanceParamsAmount$outboundSchema;
  /** @deprecated use `SetAllowanceParamsAmount$Outbound` instead. */
  export type Outbound = SetAllowanceParamsAmount$Outbound;
}

export function setAllowanceParamsAmountToJSON(
  setAllowanceParamsAmount: SetAllowanceParamsAmount,
): string {
  return JSON.stringify(
    SetAllowanceParamsAmount$outboundSchema.parse(setAllowanceParamsAmount),
  );
}

export function setAllowanceParamsAmountFromJSON(
  jsonString: string,
): SafeParseResult<SetAllowanceParamsAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SetAllowanceParamsAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SetAllowanceParamsAmount' from JSON`,
  );
}

/** @internal */
export const SetAllowanceParams$inboundSchema: z.ZodType<
  SetAllowanceParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("SET_ALLOWANCE").default("SET_ALLOWANCE"),
  token: z.string(),
  contract: z.union([SetAllowanceParamsContractEnum$inboundSchema, z.string()]),
  amount: z.union([z.number(), z.string()]),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
  });
});

/** @internal */
export type SetAllowanceParams$Outbound = {
  action_type: "SET_ALLOWANCE";
  token: string;
  contract: string | string;
  amount: number | string;
};

/** @internal */
export const SetAllowanceParams$outboundSchema: z.ZodType<
  SetAllowanceParams$Outbound,
  z.ZodTypeDef,
  SetAllowanceParams
> = z.object({
  actionType: z.literal("SET_ALLOWANCE").default("SET_ALLOWANCE" as const),
  token: z.string(),
  contract: z.union([
    SetAllowanceParamsContractEnum$outboundSchema,
    z.string(),
  ]),
  amount: z.union([z.number(), z.string()]),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetAllowanceParams$ {
  /** @deprecated use `SetAllowanceParams$inboundSchema` instead. */
  export const inboundSchema = SetAllowanceParams$inboundSchema;
  /** @deprecated use `SetAllowanceParams$outboundSchema` instead. */
  export const outboundSchema = SetAllowanceParams$outboundSchema;
  /** @deprecated use `SetAllowanceParams$Outbound` instead. */
  export type Outbound = SetAllowanceParams$Outbound;
}

export function setAllowanceParamsToJSON(
  setAllowanceParams: SetAllowanceParams,
): string {
  return JSON.stringify(
    SetAllowanceParams$outboundSchema.parse(setAllowanceParams),
  );
}

export function setAllowanceParamsFromJSON(
  jsonString: string,
): SafeParseResult<SetAllowanceParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SetAllowanceParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SetAllowanceParams' from JSON`,
  );
}
