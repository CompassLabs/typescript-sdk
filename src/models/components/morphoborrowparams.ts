/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Amount of the token to borrow from the market.
 */
export type MorphoBorrowParamsAmount = number | string;

export type MorphoBorrowParams = {
  actionType?: "MORPHO_BORROW" | undefined;
  /**
   * Amount of the token to borrow from the market.
   */
  amount: number | string;
  /**
   * The key that uniquely identifies the market. This can be found using the 'Get Markets' endpoint.
   */
  uniqueMarketKey: string;
  /**
   * The address where the collateral is borrowed against. Defaults to sender.
   */
  onBehalfOf?: string | null | undefined;
  /**
   * The address of the receiver of the tokens borrowed. Defaults to the transaction sender.
   */
  receiver?: string | null | undefined;
};

/** @internal */
export const MorphoBorrowParamsAmount$inboundSchema: z.ZodType<
  MorphoBorrowParamsAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type MorphoBorrowParamsAmount$Outbound = number | string;

/** @internal */
export const MorphoBorrowParamsAmount$outboundSchema: z.ZodType<
  MorphoBorrowParamsAmount$Outbound,
  z.ZodTypeDef,
  MorphoBorrowParamsAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MorphoBorrowParamsAmount$ {
  /** @deprecated use `MorphoBorrowParamsAmount$inboundSchema` instead. */
  export const inboundSchema = MorphoBorrowParamsAmount$inboundSchema;
  /** @deprecated use `MorphoBorrowParamsAmount$outboundSchema` instead. */
  export const outboundSchema = MorphoBorrowParamsAmount$outboundSchema;
  /** @deprecated use `MorphoBorrowParamsAmount$Outbound` instead. */
  export type Outbound = MorphoBorrowParamsAmount$Outbound;
}

export function morphoBorrowParamsAmountToJSON(
  morphoBorrowParamsAmount: MorphoBorrowParamsAmount,
): string {
  return JSON.stringify(
    MorphoBorrowParamsAmount$outboundSchema.parse(morphoBorrowParamsAmount),
  );
}

export function morphoBorrowParamsAmountFromJSON(
  jsonString: string,
): SafeParseResult<MorphoBorrowParamsAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MorphoBorrowParamsAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MorphoBorrowParamsAmount' from JSON`,
  );
}

/** @internal */
export const MorphoBorrowParams$inboundSchema: z.ZodType<
  MorphoBorrowParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("MORPHO_BORROW").default("MORPHO_BORROW"),
  amount: z.union([z.number(), z.string()]),
  unique_market_key: z.string(),
  on_behalf_of: z.nullable(z.string()).optional(),
  receiver: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "unique_market_key": "uniqueMarketKey",
    "on_behalf_of": "onBehalfOf",
  });
});

/** @internal */
export type MorphoBorrowParams$Outbound = {
  action_type: "MORPHO_BORROW";
  amount: number | string;
  unique_market_key: string;
  on_behalf_of?: string | null | undefined;
  receiver?: string | null | undefined;
};

/** @internal */
export const MorphoBorrowParams$outboundSchema: z.ZodType<
  MorphoBorrowParams$Outbound,
  z.ZodTypeDef,
  MorphoBorrowParams
> = z.object({
  actionType: z.literal("MORPHO_BORROW").default("MORPHO_BORROW" as const),
  amount: z.union([z.number(), z.string()]),
  uniqueMarketKey: z.string(),
  onBehalfOf: z.nullable(z.string()).optional(),
  receiver: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    uniqueMarketKey: "unique_market_key",
    onBehalfOf: "on_behalf_of",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MorphoBorrowParams$ {
  /** @deprecated use `MorphoBorrowParams$inboundSchema` instead. */
  export const inboundSchema = MorphoBorrowParams$inboundSchema;
  /** @deprecated use `MorphoBorrowParams$outboundSchema` instead. */
  export const outboundSchema = MorphoBorrowParams$outboundSchema;
  /** @deprecated use `MorphoBorrowParams$Outbound` instead. */
  export type Outbound = MorphoBorrowParams$Outbound;
}

export function morphoBorrowParamsToJSON(
  morphoBorrowParams: MorphoBorrowParams,
): string {
  return JSON.stringify(
    MorphoBorrowParams$outboundSchema.parse(morphoBorrowParams),
  );
}

export function morphoBorrowParamsFromJSON(
  jsonString: string,
): SafeParseResult<MorphoBorrowParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MorphoBorrowParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MorphoBorrowParams' from JSON`,
  );
}
