/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type CompassApiBackendModelsPendleReadResponseMarketUserPosition = {
  /**
   * The amount of yield that can be claimed in the underlying token.
   */
  claimableYield: string;
  /**
   * The amount of SY tokens the user currently holds.
   */
  syBalance: string;
  /**
   * The amount of PT tokens the user currently holds.
   */
  ptBalance: string;
  /**
   * The amount of YT tokens the user currently holds.
   */
  ytBalance: string;
  /**
   * The amount of LP tokens the user currently holds.
   */
  lpBalance: string;
  /**
   * The amount of underlying tokens the user currently holds.
   */
  underlyingTokenBalance: string;
  /**
   * The amount of accounting assets the user currently holds.
   */
  accountingAssetBalance?: string | null | undefined;
};

/** @internal */
export const CompassApiBackendModelsPendleReadResponseMarketUserPosition$inboundSchema:
  z.ZodType<
    CompassApiBackendModelsPendleReadResponseMarketUserPosition,
    z.ZodTypeDef,
    unknown
  > = z.object({
    claimable_yield: z.string(),
    sy_balance: z.string(),
    pt_balance: z.string(),
    yt_balance: z.string(),
    lp_balance: z.string(),
    underlying_token_balance: z.string(),
    accounting_asset_balance: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      "claimable_yield": "claimableYield",
      "sy_balance": "syBalance",
      "pt_balance": "ptBalance",
      "yt_balance": "ytBalance",
      "lp_balance": "lpBalance",
      "underlying_token_balance": "underlyingTokenBalance",
      "accounting_asset_balance": "accountingAssetBalance",
    });
  });

/** @internal */
export type CompassApiBackendModelsPendleReadResponseMarketUserPosition$Outbound =
  {
    claimable_yield: string;
    sy_balance: string;
    pt_balance: string;
    yt_balance: string;
    lp_balance: string;
    underlying_token_balance: string;
    accounting_asset_balance?: string | null | undefined;
  };

/** @internal */
export const CompassApiBackendModelsPendleReadResponseMarketUserPosition$outboundSchema:
  z.ZodType<
    CompassApiBackendModelsPendleReadResponseMarketUserPosition$Outbound,
    z.ZodTypeDef,
    CompassApiBackendModelsPendleReadResponseMarketUserPosition
  > = z.object({
    claimableYield: z.string(),
    syBalance: z.string(),
    ptBalance: z.string(),
    ytBalance: z.string(),
    lpBalance: z.string(),
    underlyingTokenBalance: z.string(),
    accountingAssetBalance: z.nullable(z.string()).optional(),
  }).transform((v) => {
    return remap$(v, {
      claimableYield: "claimable_yield",
      syBalance: "sy_balance",
      ptBalance: "pt_balance",
      ytBalance: "yt_balance",
      lpBalance: "lp_balance",
      underlyingTokenBalance: "underlying_token_balance",
      accountingAssetBalance: "accounting_asset_balance",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CompassApiBackendModelsPendleReadResponseMarketUserPosition$ {
  /** @deprecated use `CompassApiBackendModelsPendleReadResponseMarketUserPosition$inboundSchema` instead. */
  export const inboundSchema =
    CompassApiBackendModelsPendleReadResponseMarketUserPosition$inboundSchema;
  /** @deprecated use `CompassApiBackendModelsPendleReadResponseMarketUserPosition$outboundSchema` instead. */
  export const outboundSchema =
    CompassApiBackendModelsPendleReadResponseMarketUserPosition$outboundSchema;
  /** @deprecated use `CompassApiBackendModelsPendleReadResponseMarketUserPosition$Outbound` instead. */
  export type Outbound =
    CompassApiBackendModelsPendleReadResponseMarketUserPosition$Outbound;
}

export function compassApiBackendModelsPendleReadResponseMarketUserPositionToJSON(
  compassApiBackendModelsPendleReadResponseMarketUserPosition:
    CompassApiBackendModelsPendleReadResponseMarketUserPosition,
): string {
  return JSON.stringify(
    CompassApiBackendModelsPendleReadResponseMarketUserPosition$outboundSchema
      .parse(compassApiBackendModelsPendleReadResponseMarketUserPosition),
  );
}

export function compassApiBackendModelsPendleReadResponseMarketUserPositionFromJSON(
  jsonString: string,
): SafeParseResult<
  CompassApiBackendModelsPendleReadResponseMarketUserPosition,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      CompassApiBackendModelsPendleReadResponseMarketUserPosition$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'CompassApiBackendModelsPendleReadResponseMarketUserPosition' from JSON`,
  );
}
