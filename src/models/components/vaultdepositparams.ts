/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The amount of tokens to deposit into the vault.
 */
export type VaultDepositParamsAmount = number | string;

export type VaultDepositParams = {
  actionType?: "VAULT_DEPOSIT" | undefined;
  /**
   * The vault address you are depositing to.
   */
  vaultAddress: string;
  /**
   * The amount of tokens to deposit into the vault.
   */
  amount: number | string;
  /**
   * The address which will receive the shares from the vault representing their proportional ownership of the vault's assets. Defaults to the sender.
   */
  receiver?: string | null | undefined;
};

/** @internal */
export const VaultDepositParamsAmount$inboundSchema: z.ZodType<
  VaultDepositParamsAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type VaultDepositParamsAmount$Outbound = number | string;

/** @internal */
export const VaultDepositParamsAmount$outboundSchema: z.ZodType<
  VaultDepositParamsAmount$Outbound,
  z.ZodTypeDef,
  VaultDepositParamsAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VaultDepositParamsAmount$ {
  /** @deprecated use `VaultDepositParamsAmount$inboundSchema` instead. */
  export const inboundSchema = VaultDepositParamsAmount$inboundSchema;
  /** @deprecated use `VaultDepositParamsAmount$outboundSchema` instead. */
  export const outboundSchema = VaultDepositParamsAmount$outboundSchema;
  /** @deprecated use `VaultDepositParamsAmount$Outbound` instead. */
  export type Outbound = VaultDepositParamsAmount$Outbound;
}

export function vaultDepositParamsAmountToJSON(
  vaultDepositParamsAmount: VaultDepositParamsAmount,
): string {
  return JSON.stringify(
    VaultDepositParamsAmount$outboundSchema.parse(vaultDepositParamsAmount),
  );
}

export function vaultDepositParamsAmountFromJSON(
  jsonString: string,
): SafeParseResult<VaultDepositParamsAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VaultDepositParamsAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VaultDepositParamsAmount' from JSON`,
  );
}

/** @internal */
export const VaultDepositParams$inboundSchema: z.ZodType<
  VaultDepositParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("VAULT_DEPOSIT").default("VAULT_DEPOSIT"),
  vault_address: z.string(),
  amount: z.union([z.number(), z.string()]),
  receiver: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "vault_address": "vaultAddress",
  });
});

/** @internal */
export type VaultDepositParams$Outbound = {
  action_type: "VAULT_DEPOSIT";
  vault_address: string;
  amount: number | string;
  receiver?: string | null | undefined;
};

/** @internal */
export const VaultDepositParams$outboundSchema: z.ZodType<
  VaultDepositParams$Outbound,
  z.ZodTypeDef,
  VaultDepositParams
> = z.object({
  actionType: z.literal("VAULT_DEPOSIT").default("VAULT_DEPOSIT" as const),
  vaultAddress: z.string(),
  amount: z.union([z.number(), z.string()]),
  receiver: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    vaultAddress: "vault_address",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VaultDepositParams$ {
  /** @deprecated use `VaultDepositParams$inboundSchema` instead. */
  export const inboundSchema = VaultDepositParams$inboundSchema;
  /** @deprecated use `VaultDepositParams$outboundSchema` instead. */
  export const outboundSchema = VaultDepositParams$outboundSchema;
  /** @deprecated use `VaultDepositParams$Outbound` instead. */
  export type Outbound = VaultDepositParams$Outbound;
}

export function vaultDepositParamsToJSON(
  vaultDepositParams: VaultDepositParams,
): string {
  return JSON.stringify(
    VaultDepositParams$outboundSchema.parse(vaultDepositParams),
  );
}

export function vaultDepositParamsFromJSON(
  jsonString: string,
): SafeParseResult<VaultDepositParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VaultDepositParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VaultDepositParams' from JSON`,
  );
}
