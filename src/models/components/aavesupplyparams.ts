/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The amount of the asset to supply
 */
export type AaveSupplyParamsAmount = number | string;

export type AaveSupplyParams = {
  actionType?: "AAVE_SUPPLY" | undefined;
  /**
   * The symbol or address of the underlying asset to supply as collateral. You can borrow against it..
   */
  token: string;
  /**
   * The amount of the asset to supply
   */
  amount: number | string;
  /**
   * The address on behalf of whom the supply is made. Defaults to the transaction sender.
   */
  onBehalfOf?: string | null | undefined;
};

/** @internal */
export const AaveSupplyParamsAmount$inboundSchema: z.ZodType<
  AaveSupplyParamsAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type AaveSupplyParamsAmount$Outbound = number | string;

/** @internal */
export const AaveSupplyParamsAmount$outboundSchema: z.ZodType<
  AaveSupplyParamsAmount$Outbound,
  z.ZodTypeDef,
  AaveSupplyParamsAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AaveSupplyParamsAmount$ {
  /** @deprecated use `AaveSupplyParamsAmount$inboundSchema` instead. */
  export const inboundSchema = AaveSupplyParamsAmount$inboundSchema;
  /** @deprecated use `AaveSupplyParamsAmount$outboundSchema` instead. */
  export const outboundSchema = AaveSupplyParamsAmount$outboundSchema;
  /** @deprecated use `AaveSupplyParamsAmount$Outbound` instead. */
  export type Outbound = AaveSupplyParamsAmount$Outbound;
}

export function aaveSupplyParamsAmountToJSON(
  aaveSupplyParamsAmount: AaveSupplyParamsAmount,
): string {
  return JSON.stringify(
    AaveSupplyParamsAmount$outboundSchema.parse(aaveSupplyParamsAmount),
  );
}

export function aaveSupplyParamsAmountFromJSON(
  jsonString: string,
): SafeParseResult<AaveSupplyParamsAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AaveSupplyParamsAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AaveSupplyParamsAmount' from JSON`,
  );
}

/** @internal */
export const AaveSupplyParams$inboundSchema: z.ZodType<
  AaveSupplyParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("AAVE_SUPPLY").default("AAVE_SUPPLY"),
  token: z.string(),
  amount: z.union([z.number(), z.string()]),
  on_behalf_of: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "on_behalf_of": "onBehalfOf",
  });
});

/** @internal */
export type AaveSupplyParams$Outbound = {
  action_type: "AAVE_SUPPLY";
  token: string;
  amount: number | string;
  on_behalf_of?: string | null | undefined;
};

/** @internal */
export const AaveSupplyParams$outboundSchema: z.ZodType<
  AaveSupplyParams$Outbound,
  z.ZodTypeDef,
  AaveSupplyParams
> = z.object({
  actionType: z.literal("AAVE_SUPPLY").default("AAVE_SUPPLY" as const),
  token: z.string(),
  amount: z.union([z.number(), z.string()]),
  onBehalfOf: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    onBehalfOf: "on_behalf_of",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AaveSupplyParams$ {
  /** @deprecated use `AaveSupplyParams$inboundSchema` instead. */
  export const inboundSchema = AaveSupplyParams$inboundSchema;
  /** @deprecated use `AaveSupplyParams$outboundSchema` instead. */
  export const outboundSchema = AaveSupplyParams$outboundSchema;
  /** @deprecated use `AaveSupplyParams$Outbound` instead. */
  export type Outbound = AaveSupplyParams$Outbound;
}

export function aaveSupplyParamsToJSON(
  aaveSupplyParams: AaveSupplyParams,
): string {
  return JSON.stringify(
    AaveSupplyParams$outboundSchema.parse(aaveSupplyParams),
  );
}

export function aaveSupplyParamsFromJSON(
  jsonString: string,
): SafeParseResult<AaveSupplyParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AaveSupplyParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AaveSupplyParams' from JSON`,
  );
}
