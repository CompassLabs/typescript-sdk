/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CompassApiBackendModelsPendleReadResponsePositionsTokenBalance,
  CompassApiBackendModelsPendleReadResponsePositionsTokenBalance$inboundSchema,
  CompassApiBackendModelsPendleReadResponsePositionsTokenBalance$Outbound,
  CompassApiBackendModelsPendleReadResponsePositionsTokenBalance$outboundSchema,
} from "./compassapibackendmodelspendlereadresponsepositionstokenbalance.js";
import {
  LpBalance,
  LpBalance$inboundSchema,
  LpBalance$Outbound,
  LpBalance$outboundSchema,
} from "./lpbalance.js";

export type OpenPosition = {
  marketId: string;
  pt: CompassApiBackendModelsPendleReadResponsePositionsTokenBalance;
  yt: CompassApiBackendModelsPendleReadResponsePositionsTokenBalance;
  lp: LpBalance;
};

/** @internal */
export const OpenPosition$inboundSchema: z.ZodType<
  OpenPosition,
  z.ZodTypeDef,
  unknown
> = z.object({
  marketId: z.string(),
  pt:
    CompassApiBackendModelsPendleReadResponsePositionsTokenBalance$inboundSchema,
  yt:
    CompassApiBackendModelsPendleReadResponsePositionsTokenBalance$inboundSchema,
  lp: LpBalance$inboundSchema,
});

/** @internal */
export type OpenPosition$Outbound = {
  marketId: string;
  pt: CompassApiBackendModelsPendleReadResponsePositionsTokenBalance$Outbound;
  yt: CompassApiBackendModelsPendleReadResponsePositionsTokenBalance$Outbound;
  lp: LpBalance$Outbound;
};

/** @internal */
export const OpenPosition$outboundSchema: z.ZodType<
  OpenPosition$Outbound,
  z.ZodTypeDef,
  OpenPosition
> = z.object({
  marketId: z.string(),
  pt:
    CompassApiBackendModelsPendleReadResponsePositionsTokenBalance$outboundSchema,
  yt:
    CompassApiBackendModelsPendleReadResponsePositionsTokenBalance$outboundSchema,
  lp: LpBalance$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OpenPosition$ {
  /** @deprecated use `OpenPosition$inboundSchema` instead. */
  export const inboundSchema = OpenPosition$inboundSchema;
  /** @deprecated use `OpenPosition$outboundSchema` instead. */
  export const outboundSchema = OpenPosition$outboundSchema;
  /** @deprecated use `OpenPosition$Outbound` instead. */
  export type Outbound = OpenPosition$Outbound;
}

export function openPositionToJSON(openPosition: OpenPosition): string {
  return JSON.stringify(OpenPosition$outboundSchema.parse(openPosition));
}

export function openPositionFromJSON(
  jsonString: string,
): SafeParseResult<OpenPosition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OpenPosition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OpenPosition' from JSON`,
  );
}
