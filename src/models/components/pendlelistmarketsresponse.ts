/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  PendleMarket,
  PendleMarket$inboundSchema,
  PendleMarket$Outbound,
  PendleMarket$outboundSchema,
} from "./pendlemarket.js";

export type PendleListMarketsResponse = {
  /**
   * A list of active markets on the inputted chain.
   */
  markets: Array<PendleMarket>;
};

/** @internal */
export const PendleListMarketsResponse$inboundSchema: z.ZodType<
  PendleListMarketsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  markets: z.array(PendleMarket$inboundSchema),
});

/** @internal */
export type PendleListMarketsResponse$Outbound = {
  markets: Array<PendleMarket$Outbound>;
};

/** @internal */
export const PendleListMarketsResponse$outboundSchema: z.ZodType<
  PendleListMarketsResponse$Outbound,
  z.ZodTypeDef,
  PendleListMarketsResponse
> = z.object({
  markets: z.array(PendleMarket$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendleListMarketsResponse$ {
  /** @deprecated use `PendleListMarketsResponse$inboundSchema` instead. */
  export const inboundSchema = PendleListMarketsResponse$inboundSchema;
  /** @deprecated use `PendleListMarketsResponse$outboundSchema` instead. */
  export const outboundSchema = PendleListMarketsResponse$outboundSchema;
  /** @deprecated use `PendleListMarketsResponse$Outbound` instead. */
  export type Outbound = PendleListMarketsResponse$Outbound;
}

export function pendleListMarketsResponseToJSON(
  pendleListMarketsResponse: PendleListMarketsResponse,
): string {
  return JSON.stringify(
    PendleListMarketsResponse$outboundSchema.parse(pendleListMarketsResponse),
  );
}

export function pendleListMarketsResponseFromJSON(
  jsonString: string,
): SafeParseResult<PendleListMarketsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PendleListMarketsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendleListMarketsResponse' from JSON`,
  );
}
