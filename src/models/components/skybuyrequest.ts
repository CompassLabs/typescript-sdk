/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The token you would like to swap 1:1 for USDS. Choose from DAI or USDC.
 */
export const SkyBuyRequestTokenIn = {
  Dai: "DAI",
  Usdc: "USDC",
} as const;
/**
 * The token you would like to swap 1:1 for USDS. Choose from DAI or USDC.
 */
export type SkyBuyRequestTokenIn = ClosedEnum<typeof SkyBuyRequestTokenIn>;

/**
 * The amount of USDS you would like to buy 1:1 with 'token_in'.
 */
export type SkyBuyRequestAmount = number | string;

export const SkyBuyRequestChain = {
  Ethereum: "ethereum",
} as const;
export type SkyBuyRequestChain = ClosedEnum<typeof SkyBuyRequestChain>;

export type SkyBuyRequest = {
  actionType?: "SKY_BUY" | undefined;
  /**
   * The token you would like to swap 1:1 for USDS. Choose from DAI or USDC.
   */
  tokenIn: SkyBuyRequestTokenIn;
  /**
   * The amount of USDS you would like to buy 1:1 with 'token_in'.
   */
  amount: number | string;
  chain: SkyBuyRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const SkyBuyRequestTokenIn$inboundSchema: z.ZodNativeEnum<
  typeof SkyBuyRequestTokenIn
> = z.nativeEnum(SkyBuyRequestTokenIn);

/** @internal */
export const SkyBuyRequestTokenIn$outboundSchema: z.ZodNativeEnum<
  typeof SkyBuyRequestTokenIn
> = SkyBuyRequestTokenIn$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkyBuyRequestTokenIn$ {
  /** @deprecated use `SkyBuyRequestTokenIn$inboundSchema` instead. */
  export const inboundSchema = SkyBuyRequestTokenIn$inboundSchema;
  /** @deprecated use `SkyBuyRequestTokenIn$outboundSchema` instead. */
  export const outboundSchema = SkyBuyRequestTokenIn$outboundSchema;
}

/** @internal */
export const SkyBuyRequestAmount$inboundSchema: z.ZodType<
  SkyBuyRequestAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type SkyBuyRequestAmount$Outbound = number | string;

/** @internal */
export const SkyBuyRequestAmount$outboundSchema: z.ZodType<
  SkyBuyRequestAmount$Outbound,
  z.ZodTypeDef,
  SkyBuyRequestAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkyBuyRequestAmount$ {
  /** @deprecated use `SkyBuyRequestAmount$inboundSchema` instead. */
  export const inboundSchema = SkyBuyRequestAmount$inboundSchema;
  /** @deprecated use `SkyBuyRequestAmount$outboundSchema` instead. */
  export const outboundSchema = SkyBuyRequestAmount$outboundSchema;
  /** @deprecated use `SkyBuyRequestAmount$Outbound` instead. */
  export type Outbound = SkyBuyRequestAmount$Outbound;
}

export function skyBuyRequestAmountToJSON(
  skyBuyRequestAmount: SkyBuyRequestAmount,
): string {
  return JSON.stringify(
    SkyBuyRequestAmount$outboundSchema.parse(skyBuyRequestAmount),
  );
}

export function skyBuyRequestAmountFromJSON(
  jsonString: string,
): SafeParseResult<SkyBuyRequestAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SkyBuyRequestAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SkyBuyRequestAmount' from JSON`,
  );
}

/** @internal */
export const SkyBuyRequestChain$inboundSchema: z.ZodNativeEnum<
  typeof SkyBuyRequestChain
> = z.nativeEnum(SkyBuyRequestChain);

/** @internal */
export const SkyBuyRequestChain$outboundSchema: z.ZodNativeEnum<
  typeof SkyBuyRequestChain
> = SkyBuyRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkyBuyRequestChain$ {
  /** @deprecated use `SkyBuyRequestChain$inboundSchema` instead. */
  export const inboundSchema = SkyBuyRequestChain$inboundSchema;
  /** @deprecated use `SkyBuyRequestChain$outboundSchema` instead. */
  export const outboundSchema = SkyBuyRequestChain$outboundSchema;
}

/** @internal */
export const SkyBuyRequest$inboundSchema: z.ZodType<
  SkyBuyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("SKY_BUY").default("SKY_BUY"),
  token_in: SkyBuyRequestTokenIn$inboundSchema,
  amount: z.union([z.number(), z.string()]),
  chain: SkyBuyRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "token_in": "tokenIn",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type SkyBuyRequest$Outbound = {
  action_type: "SKY_BUY";
  token_in: string;
  amount: number | string;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const SkyBuyRequest$outboundSchema: z.ZodType<
  SkyBuyRequest$Outbound,
  z.ZodTypeDef,
  SkyBuyRequest
> = z.object({
  actionType: z.literal("SKY_BUY").default("SKY_BUY" as const),
  tokenIn: SkyBuyRequestTokenIn$outboundSchema,
  amount: z.union([z.number(), z.string()]),
  chain: SkyBuyRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    tokenIn: "token_in",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkyBuyRequest$ {
  /** @deprecated use `SkyBuyRequest$inboundSchema` instead. */
  export const inboundSchema = SkyBuyRequest$inboundSchema;
  /** @deprecated use `SkyBuyRequest$outboundSchema` instead. */
  export const outboundSchema = SkyBuyRequest$outboundSchema;
  /** @deprecated use `SkyBuyRequest$Outbound` instead. */
  export type Outbound = SkyBuyRequest$Outbound;
}

export function skyBuyRequestToJSON(skyBuyRequest: SkyBuyRequest): string {
  return JSON.stringify(SkyBuyRequest$outboundSchema.parse(skyBuyRequest));
}

export function skyBuyRequestFromJSON(
  jsonString: string,
): SafeParseResult<SkyBuyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SkyBuyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SkyBuyRequest' from JSON`,
  );
}
