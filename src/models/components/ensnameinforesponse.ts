/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Response model for ENS name details.
 */
export type EnsNameInfoResponse = {
  /**
   * The wallet address of the user
   */
  walletAddress: string;
  /**
   * The registrant of the ENS
   */
  registrant: string;
};

/** @internal */
export const EnsNameInfoResponse$inboundSchema: z.ZodType<
  EnsNameInfoResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  wallet_address: z.string(),
  registrant: z.string(),
}).transform((v) => {
  return remap$(v, {
    "wallet_address": "walletAddress",
  });
});

/** @internal */
export type EnsNameInfoResponse$Outbound = {
  wallet_address: string;
  registrant: string;
};

/** @internal */
export const EnsNameInfoResponse$outboundSchema: z.ZodType<
  EnsNameInfoResponse$Outbound,
  z.ZodTypeDef,
  EnsNameInfoResponse
> = z.object({
  walletAddress: z.string(),
  registrant: z.string(),
}).transform((v) => {
  return remap$(v, {
    walletAddress: "wallet_address",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EnsNameInfoResponse$ {
  /** @deprecated use `EnsNameInfoResponse$inboundSchema` instead. */
  export const inboundSchema = EnsNameInfoResponse$inboundSchema;
  /** @deprecated use `EnsNameInfoResponse$outboundSchema` instead. */
  export const outboundSchema = EnsNameInfoResponse$outboundSchema;
  /** @deprecated use `EnsNameInfoResponse$Outbound` instead. */
  export type Outbound = EnsNameInfoResponse$Outbound;
}

export function ensNameInfoResponseToJSON(
  ensNameInfoResponse: EnsNameInfoResponse,
): string {
  return JSON.stringify(
    EnsNameInfoResponse$outboundSchema.parse(ensNameInfoResponse),
  );
}

export function ensNameInfoResponseFromJSON(
  jsonString: string,
): SafeParseResult<EnsNameInfoResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EnsNameInfoResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EnsNameInfoResponse' from JSON`,
  );
}
