/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SignedAuthorization,
  SignedAuthorization$inboundSchema,
  SignedAuthorization$Outbound,
  SignedAuthorization$outboundSchema,
} from "./signedauthorization.js";
import {
  UserOperation,
  UserOperation$inboundSchema,
  UserOperation$Outbound,
  UserOperation$outboundSchema,
} from "./useroperation.js";

export const MulticallExecuteRequestChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type MulticallExecuteRequestChain = ClosedEnum<
  typeof MulticallExecuteRequestChain
>;

/**
 * Request model for executing a multicall.
 */
export type MulticallExecuteRequest = {
  chain: MulticallExecuteRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
  /**
   * EIP-7702 authorization
   */
  signedAuthorization?: SignedAuthorization | null | undefined;
  /**
   * List of possible actions for multicall
   */
  actions: Array<UserOperation>;
};

/** @internal */
export const MulticallExecuteRequestChain$inboundSchema: z.ZodNativeEnum<
  typeof MulticallExecuteRequestChain
> = z.nativeEnum(MulticallExecuteRequestChain);

/** @internal */
export const MulticallExecuteRequestChain$outboundSchema: z.ZodNativeEnum<
  typeof MulticallExecuteRequestChain
> = MulticallExecuteRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MulticallExecuteRequestChain$ {
  /** @deprecated use `MulticallExecuteRequestChain$inboundSchema` instead. */
  export const inboundSchema = MulticallExecuteRequestChain$inboundSchema;
  /** @deprecated use `MulticallExecuteRequestChain$outboundSchema` instead. */
  export const outboundSchema = MulticallExecuteRequestChain$outboundSchema;
}

/** @internal */
export const MulticallExecuteRequest$inboundSchema: z.ZodType<
  MulticallExecuteRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chain: MulticallExecuteRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
  signed_authorization: z.nullable(SignedAuthorization$inboundSchema)
    .optional(),
  actions: z.array(UserOperation$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "estimate_gas": "estimateGas",
    "signed_authorization": "signedAuthorization",
  });
});

/** @internal */
export type MulticallExecuteRequest$Outbound = {
  chain: string;
  sender: string;
  estimate_gas: boolean;
  signed_authorization?: SignedAuthorization$Outbound | null | undefined;
  actions: Array<UserOperation$Outbound>;
};

/** @internal */
export const MulticallExecuteRequest$outboundSchema: z.ZodType<
  MulticallExecuteRequest$Outbound,
  z.ZodTypeDef,
  MulticallExecuteRequest
> = z.object({
  chain: MulticallExecuteRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
  signedAuthorization: z.nullable(SignedAuthorization$outboundSchema)
    .optional(),
  actions: z.array(UserOperation$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    estimateGas: "estimate_gas",
    signedAuthorization: "signed_authorization",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MulticallExecuteRequest$ {
  /** @deprecated use `MulticallExecuteRequest$inboundSchema` instead. */
  export const inboundSchema = MulticallExecuteRequest$inboundSchema;
  /** @deprecated use `MulticallExecuteRequest$outboundSchema` instead. */
  export const outboundSchema = MulticallExecuteRequest$outboundSchema;
  /** @deprecated use `MulticallExecuteRequest$Outbound` instead. */
  export type Outbound = MulticallExecuteRequest$Outbound;
}

export function multicallExecuteRequestToJSON(
  multicallExecuteRequest: MulticallExecuteRequest,
): string {
  return JSON.stringify(
    MulticallExecuteRequest$outboundSchema.parse(multicallExecuteRequest),
  );
}

export function multicallExecuteRequestFromJSON(
  jsonString: string,
): SafeParseResult<MulticallExecuteRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MulticallExecuteRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MulticallExecuteRequest' from JSON`,
  );
}
