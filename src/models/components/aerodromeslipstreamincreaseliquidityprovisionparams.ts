/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The desired amount of the first token to deposit
 */
export type AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Desired =
  | number
  | string;

/**
 * The desired amount of the second token to deposit
 */
export type AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Desired =
  | number
  | string;

/**
 * The minimum amount of the first token to deposit
 */
export type AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Min =
  | number
  | string;

/**
 * The minimum amount of the second token to deposit
 */
export type AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Min =
  | number
  | string;

/**
 * Endpoint parameters for increasing liquidity provision on aerodrome slipstream.
 *
 * @remarks
 *
 * This action is performed on the NonfungiblePosition Manager to increase the
 * liquidity of an existing position.
 */
export type AerodromeSlipstreamIncreaseLiquidityProvisionParams = {
  actionType?: "AERODROME_SLIPSTREAM_INCREASE_LIQUIDITY_PROVISION" | undefined;
  /**
   * Token ID of the NFT representing the liquidity provisioned position.
   */
  tokenId: number;
  /**
   * The desired amount of the first token to deposit
   */
  amount0Desired: number | string;
  /**
   * The desired amount of the second token to deposit
   */
  amount1Desired: number | string;
  /**
   * The minimum amount of the first token to deposit
   */
  amount0Min: number | string;
  /**
   * The minimum amount of the second token to deposit
   */
  amount1Min: number | string;
};

/** @internal */
export const AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Desired$inboundSchema:
  z.ZodType<
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Desired,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Desired$Outbound =
  | number
  | string;

/** @internal */
export const AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Desired$outboundSchema:
  z.ZodType<
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Desired$Outbound,
    z.ZodTypeDef,
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Desired
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Desired$ {
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Desired$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Desired$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Desired$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Desired$outboundSchema;
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Desired$Outbound` instead. */
  export type Outbound =
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Desired$Outbound;
}

export function aerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0DesiredToJSON(
  aerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Desired:
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Desired,
): string {
  return JSON.stringify(
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Desired$outboundSchema
      .parse(aerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Desired),
  );
}

export function aerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0DesiredFromJSON(
  jsonString: string,
): SafeParseResult<
  AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Desired,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Desired$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Desired' from JSON`,
  );
}

/** @internal */
export const AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Desired$inboundSchema:
  z.ZodType<
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Desired,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Desired$Outbound =
  | number
  | string;

/** @internal */
export const AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Desired$outboundSchema:
  z.ZodType<
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Desired$Outbound,
    z.ZodTypeDef,
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Desired
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Desired$ {
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Desired$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Desired$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Desired$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Desired$outboundSchema;
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Desired$Outbound` instead. */
  export type Outbound =
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Desired$Outbound;
}

export function aerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1DesiredToJSON(
  aerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Desired:
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Desired,
): string {
  return JSON.stringify(
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Desired$outboundSchema
      .parse(aerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Desired),
  );
}

export function aerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1DesiredFromJSON(
  jsonString: string,
): SafeParseResult<
  AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Desired,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Desired$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Desired' from JSON`,
  );
}

/** @internal */
export const AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Min$inboundSchema:
  z.ZodType<
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Min,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Min$Outbound =
  | number
  | string;

/** @internal */
export const AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Min$outboundSchema:
  z.ZodType<
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Min$Outbound,
    z.ZodTypeDef,
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Min
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Min$ {
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Min$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Min$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Min$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Min$outboundSchema;
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Min$Outbound` instead. */
  export type Outbound =
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Min$Outbound;
}

export function aerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0MinToJSON(
  aerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Min:
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Min,
): string {
  return JSON.stringify(
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Min$outboundSchema
      .parse(aerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Min),
  );
}

export function aerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0MinFromJSON(
  jsonString: string,
): SafeParseResult<
  AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Min,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Min$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount0Min' from JSON`,
  );
}

/** @internal */
export const AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Min$inboundSchema:
  z.ZodType<
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Min,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Min$Outbound =
  | number
  | string;

/** @internal */
export const AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Min$outboundSchema:
  z.ZodType<
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Min$Outbound,
    z.ZodTypeDef,
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Min
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Min$ {
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Min$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Min$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Min$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Min$outboundSchema;
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Min$Outbound` instead. */
  export type Outbound =
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Min$Outbound;
}

export function aerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1MinToJSON(
  aerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Min:
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Min,
): string {
  return JSON.stringify(
    AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Min$outboundSchema
      .parse(aerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Min),
  );
}

export function aerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1MinFromJSON(
  jsonString: string,
): SafeParseResult<
  AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Min,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Min$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'AerodromeSlipstreamIncreaseLiquidityProvisionParamsAmount1Min' from JSON`,
  );
}

/** @internal */
export const AerodromeSlipstreamIncreaseLiquidityProvisionParams$inboundSchema:
  z.ZodType<
    AerodromeSlipstreamIncreaseLiquidityProvisionParams,
    z.ZodTypeDef,
    unknown
  > = z.object({
    action_type: z.literal("AERODROME_SLIPSTREAM_INCREASE_LIQUIDITY_PROVISION")
      .default("AERODROME_SLIPSTREAM_INCREASE_LIQUIDITY_PROVISION"),
    token_id: z.number().int(),
    amount0_desired: z.union([z.number(), z.string()]),
    amount1_desired: z.union([z.number(), z.string()]),
    amount0_min: z.union([z.number(), z.string()]),
    amount1_min: z.union([z.number(), z.string()]),
  }).transform((v) => {
    return remap$(v, {
      "action_type": "actionType",
      "token_id": "tokenId",
      "amount0_desired": "amount0Desired",
      "amount1_desired": "amount1Desired",
      "amount0_min": "amount0Min",
      "amount1_min": "amount1Min",
    });
  });

/** @internal */
export type AerodromeSlipstreamIncreaseLiquidityProvisionParams$Outbound = {
  action_type: "AERODROME_SLIPSTREAM_INCREASE_LIQUIDITY_PROVISION";
  token_id: number;
  amount0_desired: number | string;
  amount1_desired: number | string;
  amount0_min: number | string;
  amount1_min: number | string;
};

/** @internal */
export const AerodromeSlipstreamIncreaseLiquidityProvisionParams$outboundSchema:
  z.ZodType<
    AerodromeSlipstreamIncreaseLiquidityProvisionParams$Outbound,
    z.ZodTypeDef,
    AerodromeSlipstreamIncreaseLiquidityProvisionParams
  > = z.object({
    actionType: z.literal("AERODROME_SLIPSTREAM_INCREASE_LIQUIDITY_PROVISION")
      .default("AERODROME_SLIPSTREAM_INCREASE_LIQUIDITY_PROVISION" as const),
    tokenId: z.number().int(),
    amount0Desired: z.union([z.number(), z.string()]),
    amount1Desired: z.union([z.number(), z.string()]),
    amount0Min: z.union([z.number(), z.string()]),
    amount1Min: z.union([z.number(), z.string()]),
  }).transform((v) => {
    return remap$(v, {
      actionType: "action_type",
      tokenId: "token_id",
      amount0Desired: "amount0_desired",
      amount1Desired: "amount1_desired",
      amount0Min: "amount0_min",
      amount1Min: "amount1_min",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamIncreaseLiquidityProvisionParams$ {
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionParams$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamIncreaseLiquidityProvisionParams$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionParams$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamIncreaseLiquidityProvisionParams$outboundSchema;
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionParams$Outbound` instead. */
  export type Outbound =
    AerodromeSlipstreamIncreaseLiquidityProvisionParams$Outbound;
}

export function aerodromeSlipstreamIncreaseLiquidityProvisionParamsToJSON(
  aerodromeSlipstreamIncreaseLiquidityProvisionParams:
    AerodromeSlipstreamIncreaseLiquidityProvisionParams,
): string {
  return JSON.stringify(
    AerodromeSlipstreamIncreaseLiquidityProvisionParams$outboundSchema.parse(
      aerodromeSlipstreamIncreaseLiquidityProvisionParams,
    ),
  );
}

export function aerodromeSlipstreamIncreaseLiquidityProvisionParamsFromJSON(
  jsonString: string,
): SafeParseResult<
  AerodromeSlipstreamIncreaseLiquidityProvisionParams,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AerodromeSlipstreamIncreaseLiquidityProvisionParams$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AerodromeSlipstreamIncreaseLiquidityProvisionParams' from JSON`,
  );
}
