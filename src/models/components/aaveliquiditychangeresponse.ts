/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AaveLiquidityChangeResponse = {
  /**
   * The change in the liquidity index between the two times, expressed as a percentage.
   */
  liquidityChange: string;
  /**
   * Dateime of starting block
   */
  startTime: Date;
  /**
   * Datetime of ending block
   */
  endTime: Date;
};

/** @internal */
export const AaveLiquidityChangeResponse$inboundSchema: z.ZodType<
  AaveLiquidityChangeResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  liquidity_change: z.string(),
  start_time: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  end_time: z.string().datetime({ offset: true }).transform(v => new Date(v)),
}).transform((v) => {
  return remap$(v, {
    "liquidity_change": "liquidityChange",
    "start_time": "startTime",
    "end_time": "endTime",
  });
});

/** @internal */
export type AaveLiquidityChangeResponse$Outbound = {
  liquidity_change: string;
  start_time: string;
  end_time: string;
};

/** @internal */
export const AaveLiquidityChangeResponse$outboundSchema: z.ZodType<
  AaveLiquidityChangeResponse$Outbound,
  z.ZodTypeDef,
  AaveLiquidityChangeResponse
> = z.object({
  liquidityChange: z.string(),
  startTime: z.date().transform(v => v.toISOString()),
  endTime: z.date().transform(v => v.toISOString()),
}).transform((v) => {
  return remap$(v, {
    liquidityChange: "liquidity_change",
    startTime: "start_time",
    endTime: "end_time",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AaveLiquidityChangeResponse$ {
  /** @deprecated use `AaveLiquidityChangeResponse$inboundSchema` instead. */
  export const inboundSchema = AaveLiquidityChangeResponse$inboundSchema;
  /** @deprecated use `AaveLiquidityChangeResponse$outboundSchema` instead. */
  export const outboundSchema = AaveLiquidityChangeResponse$outboundSchema;
  /** @deprecated use `AaveLiquidityChangeResponse$Outbound` instead. */
  export type Outbound = AaveLiquidityChangeResponse$Outbound;
}

export function aaveLiquidityChangeResponseToJSON(
  aaveLiquidityChangeResponse: AaveLiquidityChangeResponse,
): string {
  return JSON.stringify(
    AaveLiquidityChangeResponse$outboundSchema.parse(
      aaveLiquidityChangeResponse,
    ),
  );
}

export function aaveLiquidityChangeResponseFromJSON(
  jsonString: string,
): SafeParseResult<AaveLiquidityChangeResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AaveLiquidityChangeResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AaveLiquidityChangeResponse' from JSON`,
  );
}
