/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The amount of USDe to deposit into Ethena's vault.
 */
export type EthenaDepositParamsAmount = number | string;

export type EthenaDepositParams = {
  actionType?: "ETHENA_DEPOSIT" | undefined;
  /**
   * The amount of USDe to deposit into Ethena's vault.
   */
  amount: number | string;
  /**
   * The address which will receive the shares (sUSDe) from Ethena's vault representing their proportional ownership of the vault's assets. Defaults to the sender.
   */
  receiver?: string | null | undefined;
};

/** @internal */
export const EthenaDepositParamsAmount$inboundSchema: z.ZodType<
  EthenaDepositParamsAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type EthenaDepositParamsAmount$Outbound = number | string;

/** @internal */
export const EthenaDepositParamsAmount$outboundSchema: z.ZodType<
  EthenaDepositParamsAmount$Outbound,
  z.ZodTypeDef,
  EthenaDepositParamsAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EthenaDepositParamsAmount$ {
  /** @deprecated use `EthenaDepositParamsAmount$inboundSchema` instead. */
  export const inboundSchema = EthenaDepositParamsAmount$inboundSchema;
  /** @deprecated use `EthenaDepositParamsAmount$outboundSchema` instead. */
  export const outboundSchema = EthenaDepositParamsAmount$outboundSchema;
  /** @deprecated use `EthenaDepositParamsAmount$Outbound` instead. */
  export type Outbound = EthenaDepositParamsAmount$Outbound;
}

export function ethenaDepositParamsAmountToJSON(
  ethenaDepositParamsAmount: EthenaDepositParamsAmount,
): string {
  return JSON.stringify(
    EthenaDepositParamsAmount$outboundSchema.parse(ethenaDepositParamsAmount),
  );
}

export function ethenaDepositParamsAmountFromJSON(
  jsonString: string,
): SafeParseResult<EthenaDepositParamsAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EthenaDepositParamsAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EthenaDepositParamsAmount' from JSON`,
  );
}

/** @internal */
export const EthenaDepositParams$inboundSchema: z.ZodType<
  EthenaDepositParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("ETHENA_DEPOSIT").default("ETHENA_DEPOSIT"),
  amount: z.union([z.number(), z.string()]),
  receiver: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
  });
});

/** @internal */
export type EthenaDepositParams$Outbound = {
  action_type: "ETHENA_DEPOSIT";
  amount: number | string;
  receiver?: string | null | undefined;
};

/** @internal */
export const EthenaDepositParams$outboundSchema: z.ZodType<
  EthenaDepositParams$Outbound,
  z.ZodTypeDef,
  EthenaDepositParams
> = z.object({
  actionType: z.literal("ETHENA_DEPOSIT").default("ETHENA_DEPOSIT" as const),
  amount: z.union([z.number(), z.string()]),
  receiver: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EthenaDepositParams$ {
  /** @deprecated use `EthenaDepositParams$inboundSchema` instead. */
  export const inboundSchema = EthenaDepositParams$inboundSchema;
  /** @deprecated use `EthenaDepositParams$outboundSchema` instead. */
  export const outboundSchema = EthenaDepositParams$outboundSchema;
  /** @deprecated use `EthenaDepositParams$Outbound` instead. */
  export type Outbound = EthenaDepositParams$Outbound;
}

export function ethenaDepositParamsToJSON(
  ethenaDepositParams: EthenaDepositParams,
): string {
  return JSON.stringify(
    EthenaDepositParams$outboundSchema.parse(ethenaDepositParams),
  );
}

export function ethenaDepositParamsFromJSON(
  jsonString: string,
): SafeParseResult<EthenaDepositParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EthenaDepositParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EthenaDepositParams' from JSON`,
  );
}
