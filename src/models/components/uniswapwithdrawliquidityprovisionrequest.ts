/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * How much liquidity to take out in percentage.
 */
export type UniswapWithdrawLiquidityProvisionRequestPercentageForWithdrawal =
  | number
  | string;

export const UniswapWithdrawLiquidityProvisionRequestChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type UniswapWithdrawLiquidityProvisionRequestChain = ClosedEnum<
  typeof UniswapWithdrawLiquidityProvisionRequestChain
>;

export type UniswapWithdrawLiquidityProvisionRequest = {
  actionType?: "UNISWAP_WITHDRAW_LIQUIDITY_PROVISION" | undefined;
  /**
   * Token ID of the NFT representing the liquidity provisioned position.
   */
  tokenId: number;
  /**
   * How much liquidity to take out in percentage.
   */
  percentageForWithdrawal: number | string;
  chain: UniswapWithdrawLiquidityProvisionRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const UniswapWithdrawLiquidityProvisionRequestPercentageForWithdrawal$inboundSchema:
  z.ZodType<
    UniswapWithdrawLiquidityProvisionRequestPercentageForWithdrawal,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type UniswapWithdrawLiquidityProvisionRequestPercentageForWithdrawal$Outbound =
  | number
  | string;

/** @internal */
export const UniswapWithdrawLiquidityProvisionRequestPercentageForWithdrawal$outboundSchema:
  z.ZodType<
    UniswapWithdrawLiquidityProvisionRequestPercentageForWithdrawal$Outbound,
    z.ZodTypeDef,
    UniswapWithdrawLiquidityProvisionRequestPercentageForWithdrawal
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapWithdrawLiquidityProvisionRequestPercentageForWithdrawal$ {
  /** @deprecated use `UniswapWithdrawLiquidityProvisionRequestPercentageForWithdrawal$inboundSchema` instead. */
  export const inboundSchema =
    UniswapWithdrawLiquidityProvisionRequestPercentageForWithdrawal$inboundSchema;
  /** @deprecated use `UniswapWithdrawLiquidityProvisionRequestPercentageForWithdrawal$outboundSchema` instead. */
  export const outboundSchema =
    UniswapWithdrawLiquidityProvisionRequestPercentageForWithdrawal$outboundSchema;
  /** @deprecated use `UniswapWithdrawLiquidityProvisionRequestPercentageForWithdrawal$Outbound` instead. */
  export type Outbound =
    UniswapWithdrawLiquidityProvisionRequestPercentageForWithdrawal$Outbound;
}

export function uniswapWithdrawLiquidityProvisionRequestPercentageForWithdrawalToJSON(
  uniswapWithdrawLiquidityProvisionRequestPercentageForWithdrawal:
    UniswapWithdrawLiquidityProvisionRequestPercentageForWithdrawal,
): string {
  return JSON.stringify(
    UniswapWithdrawLiquidityProvisionRequestPercentageForWithdrawal$outboundSchema
      .parse(uniswapWithdrawLiquidityProvisionRequestPercentageForWithdrawal),
  );
}

export function uniswapWithdrawLiquidityProvisionRequestPercentageForWithdrawalFromJSON(
  jsonString: string,
): SafeParseResult<
  UniswapWithdrawLiquidityProvisionRequestPercentageForWithdrawal,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UniswapWithdrawLiquidityProvisionRequestPercentageForWithdrawal$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UniswapWithdrawLiquidityProvisionRequestPercentageForWithdrawal' from JSON`,
  );
}

/** @internal */
export const UniswapWithdrawLiquidityProvisionRequestChain$inboundSchema:
  z.ZodNativeEnum<typeof UniswapWithdrawLiquidityProvisionRequestChain> = z
    .nativeEnum(UniswapWithdrawLiquidityProvisionRequestChain);

/** @internal */
export const UniswapWithdrawLiquidityProvisionRequestChain$outboundSchema:
  z.ZodNativeEnum<typeof UniswapWithdrawLiquidityProvisionRequestChain> =
    UniswapWithdrawLiquidityProvisionRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapWithdrawLiquidityProvisionRequestChain$ {
  /** @deprecated use `UniswapWithdrawLiquidityProvisionRequestChain$inboundSchema` instead. */
  export const inboundSchema =
    UniswapWithdrawLiquidityProvisionRequestChain$inboundSchema;
  /** @deprecated use `UniswapWithdrawLiquidityProvisionRequestChain$outboundSchema` instead. */
  export const outboundSchema =
    UniswapWithdrawLiquidityProvisionRequestChain$outboundSchema;
}

/** @internal */
export const UniswapWithdrawLiquidityProvisionRequest$inboundSchema: z.ZodType<
  UniswapWithdrawLiquidityProvisionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("UNISWAP_WITHDRAW_LIQUIDITY_PROVISION").default(
    "UNISWAP_WITHDRAW_LIQUIDITY_PROVISION",
  ),
  token_id: z.number().int(),
  percentage_for_withdrawal: z.union([z.number(), z.string()]),
  chain: UniswapWithdrawLiquidityProvisionRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "token_id": "tokenId",
    "percentage_for_withdrawal": "percentageForWithdrawal",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type UniswapWithdrawLiquidityProvisionRequest$Outbound = {
  action_type: "UNISWAP_WITHDRAW_LIQUIDITY_PROVISION";
  token_id: number;
  percentage_for_withdrawal: number | string;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const UniswapWithdrawLiquidityProvisionRequest$outboundSchema: z.ZodType<
  UniswapWithdrawLiquidityProvisionRequest$Outbound,
  z.ZodTypeDef,
  UniswapWithdrawLiquidityProvisionRequest
> = z.object({
  actionType: z.literal("UNISWAP_WITHDRAW_LIQUIDITY_PROVISION").default(
    "UNISWAP_WITHDRAW_LIQUIDITY_PROVISION" as const,
  ),
  tokenId: z.number().int(),
  percentageForWithdrawal: z.union([z.number(), z.string()]),
  chain: UniswapWithdrawLiquidityProvisionRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    tokenId: "token_id",
    percentageForWithdrawal: "percentage_for_withdrawal",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapWithdrawLiquidityProvisionRequest$ {
  /** @deprecated use `UniswapWithdrawLiquidityProvisionRequest$inboundSchema` instead. */
  export const inboundSchema =
    UniswapWithdrawLiquidityProvisionRequest$inboundSchema;
  /** @deprecated use `UniswapWithdrawLiquidityProvisionRequest$outboundSchema` instead. */
  export const outboundSchema =
    UniswapWithdrawLiquidityProvisionRequest$outboundSchema;
  /** @deprecated use `UniswapWithdrawLiquidityProvisionRequest$Outbound` instead. */
  export type Outbound = UniswapWithdrawLiquidityProvisionRequest$Outbound;
}

export function uniswapWithdrawLiquidityProvisionRequestToJSON(
  uniswapWithdrawLiquidityProvisionRequest:
    UniswapWithdrawLiquidityProvisionRequest,
): string {
  return JSON.stringify(
    UniswapWithdrawLiquidityProvisionRequest$outboundSchema.parse(
      uniswapWithdrawLiquidityProvisionRequest,
    ),
  );
}

export function uniswapWithdrawLiquidityProvisionRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  UniswapWithdrawLiquidityProvisionRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UniswapWithdrawLiquidityProvisionRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UniswapWithdrawLiquidityProvisionRequest' from JSON`,
  );
}
