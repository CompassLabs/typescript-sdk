/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CompassApiBackendModelsMorphoReadResponseCheckUserPositionVaultState,
  CompassApiBackendModelsMorphoReadResponseCheckUserPositionVaultState$inboundSchema,
  CompassApiBackendModelsMorphoReadResponseCheckUserPositionVaultState$Outbound,
  CompassApiBackendModelsMorphoReadResponseCheckUserPositionVaultState$outboundSchema,
} from "./compassapibackendmodelsmorphoreadresponsecheckuserpositionvaultstate.js";
import {
  Vault,
  Vault$inboundSchema,
  Vault$Outbound,
  Vault$outboundSchema,
} from "./vault.js";

export type VaultPosition = {
  id: string;
  state: CompassApiBackendModelsMorphoReadResponseCheckUserPositionVaultState;
  vault: Vault;
};

/** @internal */
export const VaultPosition$inboundSchema: z.ZodType<
  VaultPosition,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  state:
    CompassApiBackendModelsMorphoReadResponseCheckUserPositionVaultState$inboundSchema,
  vault: Vault$inboundSchema,
});

/** @internal */
export type VaultPosition$Outbound = {
  id: string;
  state:
    CompassApiBackendModelsMorphoReadResponseCheckUserPositionVaultState$Outbound;
  vault: Vault$Outbound;
};

/** @internal */
export const VaultPosition$outboundSchema: z.ZodType<
  VaultPosition$Outbound,
  z.ZodTypeDef,
  VaultPosition
> = z.object({
  id: z.string(),
  state:
    CompassApiBackendModelsMorphoReadResponseCheckUserPositionVaultState$outboundSchema,
  vault: Vault$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VaultPosition$ {
  /** @deprecated use `VaultPosition$inboundSchema` instead. */
  export const inboundSchema = VaultPosition$inboundSchema;
  /** @deprecated use `VaultPosition$outboundSchema` instead. */
  export const outboundSchema = VaultPosition$outboundSchema;
  /** @deprecated use `VaultPosition$Outbound` instead. */
  export type Outbound = VaultPosition$Outbound;
}

export function vaultPositionToJSON(vaultPosition: VaultPosition): string {
  return JSON.stringify(VaultPosition$outboundSchema.parse(vaultPosition));
}

export function vaultPositionFromJSON(
  jsonString: string,
): SafeParseResult<VaultPosition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VaultPosition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VaultPosition' from JSON`,
  );
}
