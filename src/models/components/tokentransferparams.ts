/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Amount of token to transfer
 */
export type TokenTransferParamsAmount = number | string;

/**
 * Parameters model for transferring ETH or ERC20 tokens.
 */
export type TokenTransferParams = {
  actionType?: "TOKEN_TRANSFER" | undefined;
  /**
   * The recipient of the tokens.
   */
  to: string;
  /**
   * The symbol or address of the token to transfer.
   */
  token: string;
  /**
   * Amount of token to transfer
   */
  amount: number | string;
};

/** @internal */
export const TokenTransferParamsAmount$inboundSchema: z.ZodType<
  TokenTransferParamsAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type TokenTransferParamsAmount$Outbound = number | string;

/** @internal */
export const TokenTransferParamsAmount$outboundSchema: z.ZodType<
  TokenTransferParamsAmount$Outbound,
  z.ZodTypeDef,
  TokenTransferParamsAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TokenTransferParamsAmount$ {
  /** @deprecated use `TokenTransferParamsAmount$inboundSchema` instead. */
  export const inboundSchema = TokenTransferParamsAmount$inboundSchema;
  /** @deprecated use `TokenTransferParamsAmount$outboundSchema` instead. */
  export const outboundSchema = TokenTransferParamsAmount$outboundSchema;
  /** @deprecated use `TokenTransferParamsAmount$Outbound` instead. */
  export type Outbound = TokenTransferParamsAmount$Outbound;
}

export function tokenTransferParamsAmountToJSON(
  tokenTransferParamsAmount: TokenTransferParamsAmount,
): string {
  return JSON.stringify(
    TokenTransferParamsAmount$outboundSchema.parse(tokenTransferParamsAmount),
  );
}

export function tokenTransferParamsAmountFromJSON(
  jsonString: string,
): SafeParseResult<TokenTransferParamsAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TokenTransferParamsAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TokenTransferParamsAmount' from JSON`,
  );
}

/** @internal */
export const TokenTransferParams$inboundSchema: z.ZodType<
  TokenTransferParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("TOKEN_TRANSFER").default("TOKEN_TRANSFER"),
  to: z.string(),
  token: z.string(),
  amount: z.union([z.number(), z.string()]),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
  });
});

/** @internal */
export type TokenTransferParams$Outbound = {
  action_type: "TOKEN_TRANSFER";
  to: string;
  token: string;
  amount: number | string;
};

/** @internal */
export const TokenTransferParams$outboundSchema: z.ZodType<
  TokenTransferParams$Outbound,
  z.ZodTypeDef,
  TokenTransferParams
> = z.object({
  actionType: z.literal("TOKEN_TRANSFER").default("TOKEN_TRANSFER" as const),
  to: z.string(),
  token: z.string(),
  amount: z.union([z.number(), z.string()]),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TokenTransferParams$ {
  /** @deprecated use `TokenTransferParams$inboundSchema` instead. */
  export const inboundSchema = TokenTransferParams$inboundSchema;
  /** @deprecated use `TokenTransferParams$outboundSchema` instead. */
  export const outboundSchema = TokenTransferParams$outboundSchema;
  /** @deprecated use `TokenTransferParams$Outbound` instead. */
  export type Outbound = TokenTransferParams$Outbound;
}

export function tokenTransferParamsToJSON(
  tokenTransferParams: TokenTransferParams,
): string {
  return JSON.stringify(
    TokenTransferParams$outboundSchema.parse(tokenTransferParams),
  );
}

export function tokenTransferParamsFromJSON(
  jsonString: string,
): SafeParseResult<TokenTransferParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TokenTransferParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TokenTransferParams' from JSON`,
  );
}
