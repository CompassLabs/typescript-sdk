/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The amount of the token to swap from
 */
export type AerodromeSlipstreamSellExactlyRequestAmountIn = number | string;

/**
 * The minimum amount of the token to swap to, defaults to 0
 */
export type AerodromeSlipstreamSellExactlyRequestAmountOutMinimum =
  | number
  | string;

export const AerodromeSlipstreamSellExactlyRequestChain = {
  Base: "base",
} as const;
export type AerodromeSlipstreamSellExactlyRequestChain = ClosedEnum<
  typeof AerodromeSlipstreamSellExactlyRequestChain
>;

/**
 * Request model for selling exactly an amount of tokens.
 */
export type AerodromeSlipstreamSellExactlyRequest = {
  actionType?: "AERODROME_SLIPSTREAM_SELL_EXACTLY" | undefined;
  /**
   * The symbol or address of the token to swap from.
   */
  tokenIn: string;
  /**
   * The symbol or address of the token to swap to.
   */
  tokenOut: string;
  /**
   * The tick spacing of the pool
   */
  tickSpacing: number;
  /**
   * The amount of the token to swap from
   */
  amountIn: number | string;
  /**
   * The minimum amount of the token to swap to, defaults to 0
   */
  amountOutMinimum?: number | string | undefined;
  chain: AerodromeSlipstreamSellExactlyRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const AerodromeSlipstreamSellExactlyRequestAmountIn$inboundSchema:
  z.ZodType<
    AerodromeSlipstreamSellExactlyRequestAmountIn,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type AerodromeSlipstreamSellExactlyRequestAmountIn$Outbound =
  | number
  | string;

/** @internal */
export const AerodromeSlipstreamSellExactlyRequestAmountIn$outboundSchema:
  z.ZodType<
    AerodromeSlipstreamSellExactlyRequestAmountIn$Outbound,
    z.ZodTypeDef,
    AerodromeSlipstreamSellExactlyRequestAmountIn
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamSellExactlyRequestAmountIn$ {
  /** @deprecated use `AerodromeSlipstreamSellExactlyRequestAmountIn$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamSellExactlyRequestAmountIn$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamSellExactlyRequestAmountIn$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamSellExactlyRequestAmountIn$outboundSchema;
  /** @deprecated use `AerodromeSlipstreamSellExactlyRequestAmountIn$Outbound` instead. */
  export type Outbound = AerodromeSlipstreamSellExactlyRequestAmountIn$Outbound;
}

export function aerodromeSlipstreamSellExactlyRequestAmountInToJSON(
  aerodromeSlipstreamSellExactlyRequestAmountIn:
    AerodromeSlipstreamSellExactlyRequestAmountIn,
): string {
  return JSON.stringify(
    AerodromeSlipstreamSellExactlyRequestAmountIn$outboundSchema.parse(
      aerodromeSlipstreamSellExactlyRequestAmountIn,
    ),
  );
}

export function aerodromeSlipstreamSellExactlyRequestAmountInFromJSON(
  jsonString: string,
): SafeParseResult<
  AerodromeSlipstreamSellExactlyRequestAmountIn,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AerodromeSlipstreamSellExactlyRequestAmountIn$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AerodromeSlipstreamSellExactlyRequestAmountIn' from JSON`,
  );
}

/** @internal */
export const AerodromeSlipstreamSellExactlyRequestAmountOutMinimum$inboundSchema:
  z.ZodType<
    AerodromeSlipstreamSellExactlyRequestAmountOutMinimum,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type AerodromeSlipstreamSellExactlyRequestAmountOutMinimum$Outbound =
  | number
  | string;

/** @internal */
export const AerodromeSlipstreamSellExactlyRequestAmountOutMinimum$outboundSchema:
  z.ZodType<
    AerodromeSlipstreamSellExactlyRequestAmountOutMinimum$Outbound,
    z.ZodTypeDef,
    AerodromeSlipstreamSellExactlyRequestAmountOutMinimum
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamSellExactlyRequestAmountOutMinimum$ {
  /** @deprecated use `AerodromeSlipstreamSellExactlyRequestAmountOutMinimum$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamSellExactlyRequestAmountOutMinimum$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamSellExactlyRequestAmountOutMinimum$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamSellExactlyRequestAmountOutMinimum$outboundSchema;
  /** @deprecated use `AerodromeSlipstreamSellExactlyRequestAmountOutMinimum$Outbound` instead. */
  export type Outbound =
    AerodromeSlipstreamSellExactlyRequestAmountOutMinimum$Outbound;
}

export function aerodromeSlipstreamSellExactlyRequestAmountOutMinimumToJSON(
  aerodromeSlipstreamSellExactlyRequestAmountOutMinimum:
    AerodromeSlipstreamSellExactlyRequestAmountOutMinimum,
): string {
  return JSON.stringify(
    AerodromeSlipstreamSellExactlyRequestAmountOutMinimum$outboundSchema.parse(
      aerodromeSlipstreamSellExactlyRequestAmountOutMinimum,
    ),
  );
}

export function aerodromeSlipstreamSellExactlyRequestAmountOutMinimumFromJSON(
  jsonString: string,
): SafeParseResult<
  AerodromeSlipstreamSellExactlyRequestAmountOutMinimum,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AerodromeSlipstreamSellExactlyRequestAmountOutMinimum$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AerodromeSlipstreamSellExactlyRequestAmountOutMinimum' from JSON`,
  );
}

/** @internal */
export const AerodromeSlipstreamSellExactlyRequestChain$inboundSchema:
  z.ZodNativeEnum<typeof AerodromeSlipstreamSellExactlyRequestChain> = z
    .nativeEnum(AerodromeSlipstreamSellExactlyRequestChain);

/** @internal */
export const AerodromeSlipstreamSellExactlyRequestChain$outboundSchema:
  z.ZodNativeEnum<typeof AerodromeSlipstreamSellExactlyRequestChain> =
    AerodromeSlipstreamSellExactlyRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamSellExactlyRequestChain$ {
  /** @deprecated use `AerodromeSlipstreamSellExactlyRequestChain$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamSellExactlyRequestChain$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamSellExactlyRequestChain$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamSellExactlyRequestChain$outboundSchema;
}

/** @internal */
export const AerodromeSlipstreamSellExactlyRequest$inboundSchema: z.ZodType<
  AerodromeSlipstreamSellExactlyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("AERODROME_SLIPSTREAM_SELL_EXACTLY").default(
    "AERODROME_SLIPSTREAM_SELL_EXACTLY",
  ),
  token_in: z.string(),
  token_out: z.string(),
  tick_spacing: z.number().int(),
  amount_in: z.union([z.number(), z.string()]),
  amount_out_minimum: z.union([z.number(), z.string()]).optional(),
  chain: AerodromeSlipstreamSellExactlyRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "token_in": "tokenIn",
    "token_out": "tokenOut",
    "tick_spacing": "tickSpacing",
    "amount_in": "amountIn",
    "amount_out_minimum": "amountOutMinimum",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type AerodromeSlipstreamSellExactlyRequest$Outbound = {
  action_type: "AERODROME_SLIPSTREAM_SELL_EXACTLY";
  token_in: string;
  token_out: string;
  tick_spacing: number;
  amount_in: number | string;
  amount_out_minimum?: number | string | undefined;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const AerodromeSlipstreamSellExactlyRequest$outboundSchema: z.ZodType<
  AerodromeSlipstreamSellExactlyRequest$Outbound,
  z.ZodTypeDef,
  AerodromeSlipstreamSellExactlyRequest
> = z.object({
  actionType: z.literal("AERODROME_SLIPSTREAM_SELL_EXACTLY").default(
    "AERODROME_SLIPSTREAM_SELL_EXACTLY" as const,
  ),
  tokenIn: z.string(),
  tokenOut: z.string(),
  tickSpacing: z.number().int(),
  amountIn: z.union([z.number(), z.string()]),
  amountOutMinimum: z.union([z.number(), z.string()]).optional(),
  chain: AerodromeSlipstreamSellExactlyRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    tokenIn: "token_in",
    tokenOut: "token_out",
    tickSpacing: "tick_spacing",
    amountIn: "amount_in",
    amountOutMinimum: "amount_out_minimum",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamSellExactlyRequest$ {
  /** @deprecated use `AerodromeSlipstreamSellExactlyRequest$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamSellExactlyRequest$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamSellExactlyRequest$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamSellExactlyRequest$outboundSchema;
  /** @deprecated use `AerodromeSlipstreamSellExactlyRequest$Outbound` instead. */
  export type Outbound = AerodromeSlipstreamSellExactlyRequest$Outbound;
}

export function aerodromeSlipstreamSellExactlyRequestToJSON(
  aerodromeSlipstreamSellExactlyRequest: AerodromeSlipstreamSellExactlyRequest,
): string {
  return JSON.stringify(
    AerodromeSlipstreamSellExactlyRequest$outboundSchema.parse(
      aerodromeSlipstreamSellExactlyRequest,
    ),
  );
}

export function aerodromeSlipstreamSellExactlyRequestFromJSON(
  jsonString: string,
): SafeParseResult<AerodromeSlipstreamSellExactlyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AerodromeSlipstreamSellExactlyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AerodromeSlipstreamSellExactlyRequest' from JSON`,
  );
}
