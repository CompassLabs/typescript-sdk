/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CompassApiBackendModelsMorphoReadResponseCheckUserPositionApyData,
  CompassApiBackendModelsMorphoReadResponseCheckUserPositionApyData$inboundSchema,
  CompassApiBackendModelsMorphoReadResponseCheckUserPositionApyData$Outbound,
  CompassApiBackendModelsMorphoReadResponseCheckUserPositionApyData$outboundSchema,
} from "./compassapibackendmodelsmorphoreadresponsecheckuserpositionapydata.js";
import {
  CompassApiBackendModelsMorphoReadResponseCheckUserPositionAsset,
  CompassApiBackendModelsMorphoReadResponseCheckUserPositionAsset$inboundSchema,
  CompassApiBackendModelsMorphoReadResponseCheckUserPositionAsset$Outbound,
  CompassApiBackendModelsMorphoReadResponseCheckUserPositionAsset$outboundSchema,
} from "./compassapibackendmodelsmorphoreadresponsecheckuserpositionasset.js";

export type Vault = {
  address: string;
  name: string;
  symbol: string;
  whitelisted: boolean;
  asset: CompassApiBackendModelsMorphoReadResponseCheckUserPositionAsset;
  dailyApys: CompassApiBackendModelsMorphoReadResponseCheckUserPositionApyData;
  weeklyApys: CompassApiBackendModelsMorphoReadResponseCheckUserPositionApyData;
  monthlyApys:
    CompassApiBackendModelsMorphoReadResponseCheckUserPositionApyData;
};

/** @internal */
export const Vault$inboundSchema: z.ZodType<Vault, z.ZodTypeDef, unknown> = z
  .object({
    address: z.string(),
    name: z.string(),
    symbol: z.string(),
    whitelisted: z.boolean(),
    asset:
      CompassApiBackendModelsMorphoReadResponseCheckUserPositionAsset$inboundSchema,
    dailyApys:
      CompassApiBackendModelsMorphoReadResponseCheckUserPositionApyData$inboundSchema,
    weeklyApys:
      CompassApiBackendModelsMorphoReadResponseCheckUserPositionApyData$inboundSchema,
    monthlyApys:
      CompassApiBackendModelsMorphoReadResponseCheckUserPositionApyData$inboundSchema,
  });

/** @internal */
export type Vault$Outbound = {
  address: string;
  name: string;
  symbol: string;
  whitelisted: boolean;
  asset:
    CompassApiBackendModelsMorphoReadResponseCheckUserPositionAsset$Outbound;
  dailyApys:
    CompassApiBackendModelsMorphoReadResponseCheckUserPositionApyData$Outbound;
  weeklyApys:
    CompassApiBackendModelsMorphoReadResponseCheckUserPositionApyData$Outbound;
  monthlyApys:
    CompassApiBackendModelsMorphoReadResponseCheckUserPositionApyData$Outbound;
};

/** @internal */
export const Vault$outboundSchema: z.ZodType<
  Vault$Outbound,
  z.ZodTypeDef,
  Vault
> = z.object({
  address: z.string(),
  name: z.string(),
  symbol: z.string(),
  whitelisted: z.boolean(),
  asset:
    CompassApiBackendModelsMorphoReadResponseCheckUserPositionAsset$outboundSchema,
  dailyApys:
    CompassApiBackendModelsMorphoReadResponseCheckUserPositionApyData$outboundSchema,
  weeklyApys:
    CompassApiBackendModelsMorphoReadResponseCheckUserPositionApyData$outboundSchema,
  monthlyApys:
    CompassApiBackendModelsMorphoReadResponseCheckUserPositionApyData$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Vault$ {
  /** @deprecated use `Vault$inboundSchema` instead. */
  export const inboundSchema = Vault$inboundSchema;
  /** @deprecated use `Vault$outboundSchema` instead. */
  export const outboundSchema = Vault$outboundSchema;
  /** @deprecated use `Vault$Outbound` instead. */
  export type Outbound = Vault$Outbound;
}

export function vaultToJSON(vault: Vault): string {
  return JSON.stringify(Vault$outboundSchema.parse(vault));
}

export function vaultFromJSON(
  jsonString: string,
): SafeParseResult<Vault, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Vault$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Vault' from JSON`,
  );
}
