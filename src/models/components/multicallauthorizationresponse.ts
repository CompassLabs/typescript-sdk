/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Response model for multicall authorization.
 */
export type MulticallAuthorizationResponse = {
  /**
   * A unique nonce value for this authorization
   */
  nonce: number;
  /**
   * The Ethereum address authorized for multicall
   */
  address: string;
  /**
   * The chain ID for the blockchain network
   */
  chainId: number;
};

/** @internal */
export const MulticallAuthorizationResponse$inboundSchema: z.ZodType<
  MulticallAuthorizationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  nonce: z.number().int(),
  address: z.string(),
  chainId: z.number().int(),
});

/** @internal */
export type MulticallAuthorizationResponse$Outbound = {
  nonce: number;
  address: string;
  chainId: number;
};

/** @internal */
export const MulticallAuthorizationResponse$outboundSchema: z.ZodType<
  MulticallAuthorizationResponse$Outbound,
  z.ZodTypeDef,
  MulticallAuthorizationResponse
> = z.object({
  nonce: z.number().int(),
  address: z.string(),
  chainId: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MulticallAuthorizationResponse$ {
  /** @deprecated use `MulticallAuthorizationResponse$inboundSchema` instead. */
  export const inboundSchema = MulticallAuthorizationResponse$inboundSchema;
  /** @deprecated use `MulticallAuthorizationResponse$outboundSchema` instead. */
  export const outboundSchema = MulticallAuthorizationResponse$outboundSchema;
  /** @deprecated use `MulticallAuthorizationResponse$Outbound` instead. */
  export type Outbound = MulticallAuthorizationResponse$Outbound;
}

export function multicallAuthorizationResponseToJSON(
  multicallAuthorizationResponse: MulticallAuthorizationResponse,
): string {
  return JSON.stringify(
    MulticallAuthorizationResponse$outboundSchema.parse(
      multicallAuthorizationResponse,
    ),
  );
}

export function multicallAuthorizationResponseFromJSON(
  jsonString: string,
): SafeParseResult<MulticallAuthorizationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MulticallAuthorizationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MulticallAuthorizationResponse' from JSON`,
  );
}
