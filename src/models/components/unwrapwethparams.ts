/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The amount of WETH to unwrap.
 */
export type UnwrapWethParamsAmount = number | string;

/**
 * Parameters model for unwrapping WETH back to native ETH.
 */
export type UnwrapWethParams = {
  actionType?: "UNWRAP_WETH" | undefined;
  /**
   * The amount of WETH to unwrap.
   */
  amount: number | string;
};

/** @internal */
export const UnwrapWethParamsAmount$inboundSchema: z.ZodType<
  UnwrapWethParamsAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type UnwrapWethParamsAmount$Outbound = number | string;

/** @internal */
export const UnwrapWethParamsAmount$outboundSchema: z.ZodType<
  UnwrapWethParamsAmount$Outbound,
  z.ZodTypeDef,
  UnwrapWethParamsAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnwrapWethParamsAmount$ {
  /** @deprecated use `UnwrapWethParamsAmount$inboundSchema` instead. */
  export const inboundSchema = UnwrapWethParamsAmount$inboundSchema;
  /** @deprecated use `UnwrapWethParamsAmount$outboundSchema` instead. */
  export const outboundSchema = UnwrapWethParamsAmount$outboundSchema;
  /** @deprecated use `UnwrapWethParamsAmount$Outbound` instead. */
  export type Outbound = UnwrapWethParamsAmount$Outbound;
}

export function unwrapWethParamsAmountToJSON(
  unwrapWethParamsAmount: UnwrapWethParamsAmount,
): string {
  return JSON.stringify(
    UnwrapWethParamsAmount$outboundSchema.parse(unwrapWethParamsAmount),
  );
}

export function unwrapWethParamsAmountFromJSON(
  jsonString: string,
): SafeParseResult<UnwrapWethParamsAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnwrapWethParamsAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnwrapWethParamsAmount' from JSON`,
  );
}

/** @internal */
export const UnwrapWethParams$inboundSchema: z.ZodType<
  UnwrapWethParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("UNWRAP_WETH").default("UNWRAP_WETH"),
  amount: z.union([z.number(), z.string()]),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
  });
});

/** @internal */
export type UnwrapWethParams$Outbound = {
  action_type: "UNWRAP_WETH";
  amount: number | string;
};

/** @internal */
export const UnwrapWethParams$outboundSchema: z.ZodType<
  UnwrapWethParams$Outbound,
  z.ZodTypeDef,
  UnwrapWethParams
> = z.object({
  actionType: z.literal("UNWRAP_WETH").default("UNWRAP_WETH" as const),
  amount: z.union([z.number(), z.string()]),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnwrapWethParams$ {
  /** @deprecated use `UnwrapWethParams$inboundSchema` instead. */
  export const inboundSchema = UnwrapWethParams$inboundSchema;
  /** @deprecated use `UnwrapWethParams$outboundSchema` instead. */
  export const outboundSchema = UnwrapWethParams$outboundSchema;
  /** @deprecated use `UnwrapWethParams$Outbound` instead. */
  export type Outbound = UnwrapWethParams$Outbound;
}

export function unwrapWethParamsToJSON(
  unwrapWethParams: UnwrapWethParams,
): string {
  return JSON.stringify(
    UnwrapWethParams$outboundSchema.parse(unwrapWethParams),
  );
}

export function unwrapWethParamsFromJSON(
  jsonString: string,
): SafeParseResult<UnwrapWethParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnwrapWethParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnwrapWethParams' from JSON`,
  );
}
