/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The token you would like to swap 1:1 for USDS. Choose from DAI or USDC.
 */
export const SkyBuyParamsTokenIn = {
  Dai: "DAI",
  Usdc: "USDC",
} as const;
/**
 * The token you would like to swap 1:1 for USDS. Choose from DAI or USDC.
 */
export type SkyBuyParamsTokenIn = ClosedEnum<typeof SkyBuyParamsTokenIn>;

/**
 * The amount of USDS you would like to buy 1:1 with 'token_in'.
 */
export type SkyBuyParamsAmount = number | string;

export type SkyBuyParams = {
  actionType?: "SKY_BUY" | undefined;
  /**
   * The token you would like to swap 1:1 for USDS. Choose from DAI or USDC.
   */
  tokenIn: SkyBuyParamsTokenIn;
  /**
   * The amount of USDS you would like to buy 1:1 with 'token_in'.
   */
  amount: number | string;
};

/** @internal */
export const SkyBuyParamsTokenIn$inboundSchema: z.ZodNativeEnum<
  typeof SkyBuyParamsTokenIn
> = z.nativeEnum(SkyBuyParamsTokenIn);

/** @internal */
export const SkyBuyParamsTokenIn$outboundSchema: z.ZodNativeEnum<
  typeof SkyBuyParamsTokenIn
> = SkyBuyParamsTokenIn$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkyBuyParamsTokenIn$ {
  /** @deprecated use `SkyBuyParamsTokenIn$inboundSchema` instead. */
  export const inboundSchema = SkyBuyParamsTokenIn$inboundSchema;
  /** @deprecated use `SkyBuyParamsTokenIn$outboundSchema` instead. */
  export const outboundSchema = SkyBuyParamsTokenIn$outboundSchema;
}

/** @internal */
export const SkyBuyParamsAmount$inboundSchema: z.ZodType<
  SkyBuyParamsAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type SkyBuyParamsAmount$Outbound = number | string;

/** @internal */
export const SkyBuyParamsAmount$outboundSchema: z.ZodType<
  SkyBuyParamsAmount$Outbound,
  z.ZodTypeDef,
  SkyBuyParamsAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkyBuyParamsAmount$ {
  /** @deprecated use `SkyBuyParamsAmount$inboundSchema` instead. */
  export const inboundSchema = SkyBuyParamsAmount$inboundSchema;
  /** @deprecated use `SkyBuyParamsAmount$outboundSchema` instead. */
  export const outboundSchema = SkyBuyParamsAmount$outboundSchema;
  /** @deprecated use `SkyBuyParamsAmount$Outbound` instead. */
  export type Outbound = SkyBuyParamsAmount$Outbound;
}

export function skyBuyParamsAmountToJSON(
  skyBuyParamsAmount: SkyBuyParamsAmount,
): string {
  return JSON.stringify(
    SkyBuyParamsAmount$outboundSchema.parse(skyBuyParamsAmount),
  );
}

export function skyBuyParamsAmountFromJSON(
  jsonString: string,
): SafeParseResult<SkyBuyParamsAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SkyBuyParamsAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SkyBuyParamsAmount' from JSON`,
  );
}

/** @internal */
export const SkyBuyParams$inboundSchema: z.ZodType<
  SkyBuyParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("SKY_BUY").default("SKY_BUY"),
  token_in: SkyBuyParamsTokenIn$inboundSchema,
  amount: z.union([z.number(), z.string()]),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "token_in": "tokenIn",
  });
});

/** @internal */
export type SkyBuyParams$Outbound = {
  action_type: "SKY_BUY";
  token_in: string;
  amount: number | string;
};

/** @internal */
export const SkyBuyParams$outboundSchema: z.ZodType<
  SkyBuyParams$Outbound,
  z.ZodTypeDef,
  SkyBuyParams
> = z.object({
  actionType: z.literal("SKY_BUY").default("SKY_BUY" as const),
  tokenIn: SkyBuyParamsTokenIn$outboundSchema,
  amount: z.union([z.number(), z.string()]),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    tokenIn: "token_in",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkyBuyParams$ {
  /** @deprecated use `SkyBuyParams$inboundSchema` instead. */
  export const inboundSchema = SkyBuyParams$inboundSchema;
  /** @deprecated use `SkyBuyParams$outboundSchema` instead. */
  export const outboundSchema = SkyBuyParams$outboundSchema;
  /** @deprecated use `SkyBuyParams$Outbound` instead. */
  export type Outbound = SkyBuyParams$Outbound;
}

export function skyBuyParamsToJSON(skyBuyParams: SkyBuyParams): string {
  return JSON.stringify(SkyBuyParams$outboundSchema.parse(skyBuyParams));
}

export function skyBuyParamsFromJSON(
  jsonString: string,
): SafeParseResult<SkyBuyParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SkyBuyParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SkyBuyParams' from JSON`,
  );
}
