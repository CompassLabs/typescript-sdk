/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The amount of the token to swap to
 */
export type AerodromeSlipstreamBuyExactlyRequestAmountOut = number | string;

/**
 * The maximum amount of the token to swap from
 */
export type AerodromeSlipstreamBuyExactlyRequestAmountInMaximum =
  | number
  | string;

export const AerodromeSlipstreamBuyExactlyRequestChain = {
  Base: "base",
} as const;
export type AerodromeSlipstreamBuyExactlyRequestChain = ClosedEnum<
  typeof AerodromeSlipstreamBuyExactlyRequestChain
>;

/**
 * Request model for buying exactly an amount of tokens.
 */
export type AerodromeSlipstreamBuyExactlyRequest = {
  actionType?: "AERODROME_SLIPSTREAM_BUY_EXACTLY" | undefined;
  /**
   * The symbol of the token to swap from.
   */
  tokenIn: string;
  /**
   * The symbol of the token to swap to.
   */
  tokenOut: string;
  /**
   * The tick spacing of the pool
   */
  tickSpacing: number;
  /**
   * The amount of the token to swap to
   */
  amountOut: number | string;
  /**
   * The maximum amount of the token to swap from
   */
  amountInMaximum: number | string;
  chain: AerodromeSlipstreamBuyExactlyRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const AerodromeSlipstreamBuyExactlyRequestAmountOut$inboundSchema:
  z.ZodType<
    AerodromeSlipstreamBuyExactlyRequestAmountOut,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type AerodromeSlipstreamBuyExactlyRequestAmountOut$Outbound =
  | number
  | string;

/** @internal */
export const AerodromeSlipstreamBuyExactlyRequestAmountOut$outboundSchema:
  z.ZodType<
    AerodromeSlipstreamBuyExactlyRequestAmountOut$Outbound,
    z.ZodTypeDef,
    AerodromeSlipstreamBuyExactlyRequestAmountOut
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamBuyExactlyRequestAmountOut$ {
  /** @deprecated use `AerodromeSlipstreamBuyExactlyRequestAmountOut$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamBuyExactlyRequestAmountOut$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamBuyExactlyRequestAmountOut$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamBuyExactlyRequestAmountOut$outboundSchema;
  /** @deprecated use `AerodromeSlipstreamBuyExactlyRequestAmountOut$Outbound` instead. */
  export type Outbound = AerodromeSlipstreamBuyExactlyRequestAmountOut$Outbound;
}

export function aerodromeSlipstreamBuyExactlyRequestAmountOutToJSON(
  aerodromeSlipstreamBuyExactlyRequestAmountOut:
    AerodromeSlipstreamBuyExactlyRequestAmountOut,
): string {
  return JSON.stringify(
    AerodromeSlipstreamBuyExactlyRequestAmountOut$outboundSchema.parse(
      aerodromeSlipstreamBuyExactlyRequestAmountOut,
    ),
  );
}

export function aerodromeSlipstreamBuyExactlyRequestAmountOutFromJSON(
  jsonString: string,
): SafeParseResult<
  AerodromeSlipstreamBuyExactlyRequestAmountOut,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AerodromeSlipstreamBuyExactlyRequestAmountOut$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AerodromeSlipstreamBuyExactlyRequestAmountOut' from JSON`,
  );
}

/** @internal */
export const AerodromeSlipstreamBuyExactlyRequestAmountInMaximum$inboundSchema:
  z.ZodType<
    AerodromeSlipstreamBuyExactlyRequestAmountInMaximum,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type AerodromeSlipstreamBuyExactlyRequestAmountInMaximum$Outbound =
  | number
  | string;

/** @internal */
export const AerodromeSlipstreamBuyExactlyRequestAmountInMaximum$outboundSchema:
  z.ZodType<
    AerodromeSlipstreamBuyExactlyRequestAmountInMaximum$Outbound,
    z.ZodTypeDef,
    AerodromeSlipstreamBuyExactlyRequestAmountInMaximum
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamBuyExactlyRequestAmountInMaximum$ {
  /** @deprecated use `AerodromeSlipstreamBuyExactlyRequestAmountInMaximum$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamBuyExactlyRequestAmountInMaximum$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamBuyExactlyRequestAmountInMaximum$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamBuyExactlyRequestAmountInMaximum$outboundSchema;
  /** @deprecated use `AerodromeSlipstreamBuyExactlyRequestAmountInMaximum$Outbound` instead. */
  export type Outbound =
    AerodromeSlipstreamBuyExactlyRequestAmountInMaximum$Outbound;
}

export function aerodromeSlipstreamBuyExactlyRequestAmountInMaximumToJSON(
  aerodromeSlipstreamBuyExactlyRequestAmountInMaximum:
    AerodromeSlipstreamBuyExactlyRequestAmountInMaximum,
): string {
  return JSON.stringify(
    AerodromeSlipstreamBuyExactlyRequestAmountInMaximum$outboundSchema.parse(
      aerodromeSlipstreamBuyExactlyRequestAmountInMaximum,
    ),
  );
}

export function aerodromeSlipstreamBuyExactlyRequestAmountInMaximumFromJSON(
  jsonString: string,
): SafeParseResult<
  AerodromeSlipstreamBuyExactlyRequestAmountInMaximum,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AerodromeSlipstreamBuyExactlyRequestAmountInMaximum$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AerodromeSlipstreamBuyExactlyRequestAmountInMaximum' from JSON`,
  );
}

/** @internal */
export const AerodromeSlipstreamBuyExactlyRequestChain$inboundSchema:
  z.ZodNativeEnum<typeof AerodromeSlipstreamBuyExactlyRequestChain> = z
    .nativeEnum(AerodromeSlipstreamBuyExactlyRequestChain);

/** @internal */
export const AerodromeSlipstreamBuyExactlyRequestChain$outboundSchema:
  z.ZodNativeEnum<typeof AerodromeSlipstreamBuyExactlyRequestChain> =
    AerodromeSlipstreamBuyExactlyRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamBuyExactlyRequestChain$ {
  /** @deprecated use `AerodromeSlipstreamBuyExactlyRequestChain$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamBuyExactlyRequestChain$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamBuyExactlyRequestChain$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamBuyExactlyRequestChain$outboundSchema;
}

/** @internal */
export const AerodromeSlipstreamBuyExactlyRequest$inboundSchema: z.ZodType<
  AerodromeSlipstreamBuyExactlyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("AERODROME_SLIPSTREAM_BUY_EXACTLY").default(
    "AERODROME_SLIPSTREAM_BUY_EXACTLY",
  ),
  token_in: z.string(),
  token_out: z.string(),
  tick_spacing: z.number().int(),
  amount_out: z.union([z.number(), z.string()]),
  amount_in_maximum: z.union([z.number(), z.string()]),
  chain: AerodromeSlipstreamBuyExactlyRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "token_in": "tokenIn",
    "token_out": "tokenOut",
    "tick_spacing": "tickSpacing",
    "amount_out": "amountOut",
    "amount_in_maximum": "amountInMaximum",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type AerodromeSlipstreamBuyExactlyRequest$Outbound = {
  action_type: "AERODROME_SLIPSTREAM_BUY_EXACTLY";
  token_in: string;
  token_out: string;
  tick_spacing: number;
  amount_out: number | string;
  amount_in_maximum: number | string;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const AerodromeSlipstreamBuyExactlyRequest$outboundSchema: z.ZodType<
  AerodromeSlipstreamBuyExactlyRequest$Outbound,
  z.ZodTypeDef,
  AerodromeSlipstreamBuyExactlyRequest
> = z.object({
  actionType: z.literal("AERODROME_SLIPSTREAM_BUY_EXACTLY").default(
    "AERODROME_SLIPSTREAM_BUY_EXACTLY" as const,
  ),
  tokenIn: z.string(),
  tokenOut: z.string(),
  tickSpacing: z.number().int(),
  amountOut: z.union([z.number(), z.string()]),
  amountInMaximum: z.union([z.number(), z.string()]),
  chain: AerodromeSlipstreamBuyExactlyRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    tokenIn: "token_in",
    tokenOut: "token_out",
    tickSpacing: "tick_spacing",
    amountOut: "amount_out",
    amountInMaximum: "amount_in_maximum",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamBuyExactlyRequest$ {
  /** @deprecated use `AerodromeSlipstreamBuyExactlyRequest$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamBuyExactlyRequest$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamBuyExactlyRequest$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamBuyExactlyRequest$outboundSchema;
  /** @deprecated use `AerodromeSlipstreamBuyExactlyRequest$Outbound` instead. */
  export type Outbound = AerodromeSlipstreamBuyExactlyRequest$Outbound;
}

export function aerodromeSlipstreamBuyExactlyRequestToJSON(
  aerodromeSlipstreamBuyExactlyRequest: AerodromeSlipstreamBuyExactlyRequest,
): string {
  return JSON.stringify(
    AerodromeSlipstreamBuyExactlyRequest$outboundSchema.parse(
      aerodromeSlipstreamBuyExactlyRequest,
    ),
  );
}

export function aerodromeSlipstreamBuyExactlyRequestFromJSON(
  jsonString: string,
): SafeParseResult<AerodromeSlipstreamBuyExactlyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AerodromeSlipstreamBuyExactlyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AerodromeSlipstreamBuyExactlyRequest' from JSON`,
  );
}
