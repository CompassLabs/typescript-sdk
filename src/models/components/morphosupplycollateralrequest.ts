/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as b64$ from "../../lib/base64.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Amount of the token to supply to the market as collateral.
 */
export type MorphoSupplyCollateralRequestAmount = number | string;

export const MorphoSupplyCollateralRequestChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type MorphoSupplyCollateralRequestChain = ClosedEnum<
  typeof MorphoSupplyCollateralRequestChain
>;

export type MorphoSupplyCollateralRequest = {
  actionType?: "MORPHO_SUPPLY_COLLATERAL" | undefined;
  /**
   * Amount of the token to supply to the market as collateral.
   */
  amount: number | string;
  /**
   * The key that uniquely identifies the market. This can be found using the 'Get Markets' endpoint.
   */
  uniqueMarketKey: string;
  /**
   * The address on behalf of whom the supplied collateral is made. Defaults to sender.
   */
  onBehalfOf?: string | null | undefined;
  /**
   * An optional field for callback byte data that will be triggered upon successful supplying of collateral.
   */
  callbackData?: Uint8Array | string | null | undefined;
  chain: MorphoSupplyCollateralRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const MorphoSupplyCollateralRequestAmount$inboundSchema: z.ZodType<
  MorphoSupplyCollateralRequestAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type MorphoSupplyCollateralRequestAmount$Outbound = number | string;

/** @internal */
export const MorphoSupplyCollateralRequestAmount$outboundSchema: z.ZodType<
  MorphoSupplyCollateralRequestAmount$Outbound,
  z.ZodTypeDef,
  MorphoSupplyCollateralRequestAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MorphoSupplyCollateralRequestAmount$ {
  /** @deprecated use `MorphoSupplyCollateralRequestAmount$inboundSchema` instead. */
  export const inboundSchema =
    MorphoSupplyCollateralRequestAmount$inboundSchema;
  /** @deprecated use `MorphoSupplyCollateralRequestAmount$outboundSchema` instead. */
  export const outboundSchema =
    MorphoSupplyCollateralRequestAmount$outboundSchema;
  /** @deprecated use `MorphoSupplyCollateralRequestAmount$Outbound` instead. */
  export type Outbound = MorphoSupplyCollateralRequestAmount$Outbound;
}

export function morphoSupplyCollateralRequestAmountToJSON(
  morphoSupplyCollateralRequestAmount: MorphoSupplyCollateralRequestAmount,
): string {
  return JSON.stringify(
    MorphoSupplyCollateralRequestAmount$outboundSchema.parse(
      morphoSupplyCollateralRequestAmount,
    ),
  );
}

export function morphoSupplyCollateralRequestAmountFromJSON(
  jsonString: string,
): SafeParseResult<MorphoSupplyCollateralRequestAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MorphoSupplyCollateralRequestAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MorphoSupplyCollateralRequestAmount' from JSON`,
  );
}

/** @internal */
export const MorphoSupplyCollateralRequestChain$inboundSchema: z.ZodNativeEnum<
  typeof MorphoSupplyCollateralRequestChain
> = z.nativeEnum(MorphoSupplyCollateralRequestChain);

/** @internal */
export const MorphoSupplyCollateralRequestChain$outboundSchema: z.ZodNativeEnum<
  typeof MorphoSupplyCollateralRequestChain
> = MorphoSupplyCollateralRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MorphoSupplyCollateralRequestChain$ {
  /** @deprecated use `MorphoSupplyCollateralRequestChain$inboundSchema` instead. */
  export const inboundSchema = MorphoSupplyCollateralRequestChain$inboundSchema;
  /** @deprecated use `MorphoSupplyCollateralRequestChain$outboundSchema` instead. */
  export const outboundSchema =
    MorphoSupplyCollateralRequestChain$outboundSchema;
}

/** @internal */
export const MorphoSupplyCollateralRequest$inboundSchema: z.ZodType<
  MorphoSupplyCollateralRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("MORPHO_SUPPLY_COLLATERAL").default(
    "MORPHO_SUPPLY_COLLATERAL",
  ),
  amount: z.union([z.number(), z.string()]),
  unique_market_key: z.string(),
  on_behalf_of: z.nullable(z.string()).optional(),
  callback_data: z.nullable(b64$.zodInbound).optional(),
  chain: MorphoSupplyCollateralRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "unique_market_key": "uniqueMarketKey",
    "on_behalf_of": "onBehalfOf",
    "callback_data": "callbackData",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type MorphoSupplyCollateralRequest$Outbound = {
  action_type: "MORPHO_SUPPLY_COLLATERAL";
  amount: number | string;
  unique_market_key: string;
  on_behalf_of?: string | null | undefined;
  callback_data?: Uint8Array | null | undefined;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const MorphoSupplyCollateralRequest$outboundSchema: z.ZodType<
  MorphoSupplyCollateralRequest$Outbound,
  z.ZodTypeDef,
  MorphoSupplyCollateralRequest
> = z.object({
  actionType: z.literal("MORPHO_SUPPLY_COLLATERAL").default(
    "MORPHO_SUPPLY_COLLATERAL" as const,
  ),
  amount: z.union([z.number(), z.string()]),
  uniqueMarketKey: z.string(),
  onBehalfOf: z.nullable(z.string()).optional(),
  callbackData: z.nullable(b64$.zodOutbound).optional(),
  chain: MorphoSupplyCollateralRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    uniqueMarketKey: "unique_market_key",
    onBehalfOf: "on_behalf_of",
    callbackData: "callback_data",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MorphoSupplyCollateralRequest$ {
  /** @deprecated use `MorphoSupplyCollateralRequest$inboundSchema` instead. */
  export const inboundSchema = MorphoSupplyCollateralRequest$inboundSchema;
  /** @deprecated use `MorphoSupplyCollateralRequest$outboundSchema` instead. */
  export const outboundSchema = MorphoSupplyCollateralRequest$outboundSchema;
  /** @deprecated use `MorphoSupplyCollateralRequest$Outbound` instead. */
  export type Outbound = MorphoSupplyCollateralRequest$Outbound;
}

export function morphoSupplyCollateralRequestToJSON(
  morphoSupplyCollateralRequest: MorphoSupplyCollateralRequest,
): string {
  return JSON.stringify(
    MorphoSupplyCollateralRequest$outboundSchema.parse(
      morphoSupplyCollateralRequest,
    ),
  );
}

export function morphoSupplyCollateralRequestFromJSON(
  jsonString: string,
): SafeParseResult<MorphoSupplyCollateralRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MorphoSupplyCollateralRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MorphoSupplyCollateralRequest' from JSON`,
  );
}
