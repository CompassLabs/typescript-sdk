/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CompassApiBackendModelsGenericReadResponsePortfolioTokenBalance,
  CompassApiBackendModelsGenericReadResponsePortfolioTokenBalance$inboundSchema,
  CompassApiBackendModelsGenericReadResponsePortfolioTokenBalance$Outbound,
  CompassApiBackendModelsGenericReadResponsePortfolioTokenBalance$outboundSchema,
} from "./compassapibackendmodelsgenericreadresponseportfoliotokenbalance.js";

export type Portfolio = {
  /**
   * Total value of the portfolio in USD
   */
  totalValueInUsd: string;
  /**
   * List of token balances in the portfolio
   */
  tokenBalances: Array<
    CompassApiBackendModelsGenericReadResponsePortfolioTokenBalance
  >;
};

/** @internal */
export const Portfolio$inboundSchema: z.ZodType<
  Portfolio,
  z.ZodTypeDef,
  unknown
> = z.object({
  total_value_in_usd: z.string(),
  token_balances: z.array(
    CompassApiBackendModelsGenericReadResponsePortfolioTokenBalance$inboundSchema,
  ),
}).transform((v) => {
  return remap$(v, {
    "total_value_in_usd": "totalValueInUsd",
    "token_balances": "tokenBalances",
  });
});

/** @internal */
export type Portfolio$Outbound = {
  total_value_in_usd: string;
  token_balances: Array<
    CompassApiBackendModelsGenericReadResponsePortfolioTokenBalance$Outbound
  >;
};

/** @internal */
export const Portfolio$outboundSchema: z.ZodType<
  Portfolio$Outbound,
  z.ZodTypeDef,
  Portfolio
> = z.object({
  totalValueInUsd: z.string(),
  tokenBalances: z.array(
    CompassApiBackendModelsGenericReadResponsePortfolioTokenBalance$outboundSchema,
  ),
}).transform((v) => {
  return remap$(v, {
    totalValueInUsd: "total_value_in_usd",
    tokenBalances: "token_balances",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Portfolio$ {
  /** @deprecated use `Portfolio$inboundSchema` instead. */
  export const inboundSchema = Portfolio$inboundSchema;
  /** @deprecated use `Portfolio$outboundSchema` instead. */
  export const outboundSchema = Portfolio$outboundSchema;
  /** @deprecated use `Portfolio$Outbound` instead. */
  export type Outbound = Portfolio$Outbound;
}

export function portfolioToJSON(portfolio: Portfolio): string {
  return JSON.stringify(Portfolio$outboundSchema.parse(portfolio));
}

export function portfolioFromJSON(
  jsonString: string,
): SafeParseResult<Portfolio, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Portfolio$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Portfolio' from JSON`,
  );
}
