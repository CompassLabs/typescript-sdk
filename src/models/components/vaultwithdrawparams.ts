/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type VaultWithdrawParams = {
  actionType?: "VAULT_WITHDRAW" | undefined;
  /**
   * The vault address you are withdrawing from.
   */
  vaultAddress: string;
  /**
   * The amount of tokens to withdraw from the vault. If set to 'ALL', your total deposited token amount will be withdrawn.
   */
  amount?: any | undefined;
  /**
   * The address which will receive the tokens withdrawn. Defaults to the sender.
   */
  receiver?: string | null | undefined;
};

/** @internal */
export const VaultWithdrawParams$inboundSchema: z.ZodType<
  VaultWithdrawParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("VAULT_WITHDRAW").default("VAULT_WITHDRAW"),
  vault_address: z.string(),
  amount: z.any().optional(),
  receiver: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "vault_address": "vaultAddress",
  });
});

/** @internal */
export type VaultWithdrawParams$Outbound = {
  action_type: "VAULT_WITHDRAW";
  vault_address: string;
  amount?: any | undefined;
  receiver?: string | null | undefined;
};

/** @internal */
export const VaultWithdrawParams$outboundSchema: z.ZodType<
  VaultWithdrawParams$Outbound,
  z.ZodTypeDef,
  VaultWithdrawParams
> = z.object({
  actionType: z.literal("VAULT_WITHDRAW").default("VAULT_WITHDRAW" as const),
  vaultAddress: z.string(),
  amount: z.any().optional(),
  receiver: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    vaultAddress: "vault_address",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace VaultWithdrawParams$ {
  /** @deprecated use `VaultWithdrawParams$inboundSchema` instead. */
  export const inboundSchema = VaultWithdrawParams$inboundSchema;
  /** @deprecated use `VaultWithdrawParams$outboundSchema` instead. */
  export const outboundSchema = VaultWithdrawParams$outboundSchema;
  /** @deprecated use `VaultWithdrawParams$Outbound` instead. */
  export type Outbound = VaultWithdrawParams$Outbound;
}

export function vaultWithdrawParamsToJSON(
  vaultWithdrawParams: VaultWithdrawParams,
): string {
  return JSON.stringify(
    VaultWithdrawParams$outboundSchema.parse(vaultWithdrawParams),
  );
}

export function vaultWithdrawParamsFromJSON(
  jsonString: string,
): SafeParseResult<VaultWithdrawParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => VaultWithdrawParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'VaultWithdrawParams' from JSON`,
  );
}
