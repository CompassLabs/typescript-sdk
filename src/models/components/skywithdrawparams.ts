/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SkyWithdrawParams = {
  actionType?: "SKY_WITHDRAW" | undefined;
  /**
   * The amount of USDS you would like to withdraw. If set to 'ALL', your total deposited USDS amount will be withdrawn.
   */
  amount?: any | undefined;
  /**
   * The address which will receive the withdrawn USDS. Defaults to the sender.
   */
  receiver?: string | null | undefined;
};

/** @internal */
export const SkyWithdrawParams$inboundSchema: z.ZodType<
  SkyWithdrawParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("SKY_WITHDRAW").default("SKY_WITHDRAW"),
  amount: z.any().optional(),
  receiver: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
  });
});

/** @internal */
export type SkyWithdrawParams$Outbound = {
  action_type: "SKY_WITHDRAW";
  amount?: any | undefined;
  receiver?: string | null | undefined;
};

/** @internal */
export const SkyWithdrawParams$outboundSchema: z.ZodType<
  SkyWithdrawParams$Outbound,
  z.ZodTypeDef,
  SkyWithdrawParams
> = z.object({
  actionType: z.literal("SKY_WITHDRAW").default("SKY_WITHDRAW" as const),
  amount: z.any().optional(),
  receiver: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkyWithdrawParams$ {
  /** @deprecated use `SkyWithdrawParams$inboundSchema` instead. */
  export const inboundSchema = SkyWithdrawParams$inboundSchema;
  /** @deprecated use `SkyWithdrawParams$outboundSchema` instead. */
  export const outboundSchema = SkyWithdrawParams$outboundSchema;
  /** @deprecated use `SkyWithdrawParams$Outbound` instead. */
  export type Outbound = SkyWithdrawParams$Outbound;
}

export function skyWithdrawParamsToJSON(
  skyWithdrawParams: SkyWithdrawParams,
): string {
  return JSON.stringify(
    SkyWithdrawParams$outboundSchema.parse(skyWithdrawParams),
  );
}

export function skyWithdrawParamsFromJSON(
  jsonString: string,
): SafeParseResult<SkyWithdrawParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SkyWithdrawParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SkyWithdrawParams' from JSON`,
  );
}
