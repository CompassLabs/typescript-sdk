/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Amount of the token to supply to the market as collateral.
 */
export type MorphoWithdrawCollateralParamsAmount = number | string;

export type MorphoWithdrawCollateralParams = {
  actionType?: "MORPHO_WITHDRAW_COLLATERAL" | undefined;
  /**
   * Amount of the token to supply to the market as collateral.
   */
  amount: number | string;
  /**
   * The key that uniquely identifies the market. This can be found using the 'Get Markets' endpoint.
   */
  uniqueMarketKey: string;
  /**
   * The address on behalf of whom the withdraw is made. Defaults to sender.
   */
  onBehalfOf?: string | null | undefined;
  /**
   * The address where the withdrawn collateral will be received. Defaults to sender.
   */
  receiver?: string | null | undefined;
};

/** @internal */
export const MorphoWithdrawCollateralParamsAmount$inboundSchema: z.ZodType<
  MorphoWithdrawCollateralParamsAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type MorphoWithdrawCollateralParamsAmount$Outbound = number | string;

/** @internal */
export const MorphoWithdrawCollateralParamsAmount$outboundSchema: z.ZodType<
  MorphoWithdrawCollateralParamsAmount$Outbound,
  z.ZodTypeDef,
  MorphoWithdrawCollateralParamsAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MorphoWithdrawCollateralParamsAmount$ {
  /** @deprecated use `MorphoWithdrawCollateralParamsAmount$inboundSchema` instead. */
  export const inboundSchema =
    MorphoWithdrawCollateralParamsAmount$inboundSchema;
  /** @deprecated use `MorphoWithdrawCollateralParamsAmount$outboundSchema` instead. */
  export const outboundSchema =
    MorphoWithdrawCollateralParamsAmount$outboundSchema;
  /** @deprecated use `MorphoWithdrawCollateralParamsAmount$Outbound` instead. */
  export type Outbound = MorphoWithdrawCollateralParamsAmount$Outbound;
}

export function morphoWithdrawCollateralParamsAmountToJSON(
  morphoWithdrawCollateralParamsAmount: MorphoWithdrawCollateralParamsAmount,
): string {
  return JSON.stringify(
    MorphoWithdrawCollateralParamsAmount$outboundSchema.parse(
      morphoWithdrawCollateralParamsAmount,
    ),
  );
}

export function morphoWithdrawCollateralParamsAmountFromJSON(
  jsonString: string,
): SafeParseResult<MorphoWithdrawCollateralParamsAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MorphoWithdrawCollateralParamsAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MorphoWithdrawCollateralParamsAmount' from JSON`,
  );
}

/** @internal */
export const MorphoWithdrawCollateralParams$inboundSchema: z.ZodType<
  MorphoWithdrawCollateralParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("MORPHO_WITHDRAW_COLLATERAL").default(
    "MORPHO_WITHDRAW_COLLATERAL",
  ),
  amount: z.union([z.number(), z.string()]),
  unique_market_key: z.string(),
  on_behalf_of: z.nullable(z.string()).optional(),
  receiver: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "unique_market_key": "uniqueMarketKey",
    "on_behalf_of": "onBehalfOf",
  });
});

/** @internal */
export type MorphoWithdrawCollateralParams$Outbound = {
  action_type: "MORPHO_WITHDRAW_COLLATERAL";
  amount: number | string;
  unique_market_key: string;
  on_behalf_of?: string | null | undefined;
  receiver?: string | null | undefined;
};

/** @internal */
export const MorphoWithdrawCollateralParams$outboundSchema: z.ZodType<
  MorphoWithdrawCollateralParams$Outbound,
  z.ZodTypeDef,
  MorphoWithdrawCollateralParams
> = z.object({
  actionType: z.literal("MORPHO_WITHDRAW_COLLATERAL").default(
    "MORPHO_WITHDRAW_COLLATERAL" as const,
  ),
  amount: z.union([z.number(), z.string()]),
  uniqueMarketKey: z.string(),
  onBehalfOf: z.nullable(z.string()).optional(),
  receiver: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    uniqueMarketKey: "unique_market_key",
    onBehalfOf: "on_behalf_of",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MorphoWithdrawCollateralParams$ {
  /** @deprecated use `MorphoWithdrawCollateralParams$inboundSchema` instead. */
  export const inboundSchema = MorphoWithdrawCollateralParams$inboundSchema;
  /** @deprecated use `MorphoWithdrawCollateralParams$outboundSchema` instead. */
  export const outboundSchema = MorphoWithdrawCollateralParams$outboundSchema;
  /** @deprecated use `MorphoWithdrawCollateralParams$Outbound` instead. */
  export type Outbound = MorphoWithdrawCollateralParams$Outbound;
}

export function morphoWithdrawCollateralParamsToJSON(
  morphoWithdrawCollateralParams: MorphoWithdrawCollateralParams,
): string {
  return JSON.stringify(
    MorphoWithdrawCollateralParams$outboundSchema.parse(
      morphoWithdrawCollateralParams,
    ),
  );
}

export function morphoWithdrawCollateralParamsFromJSON(
  jsonString: string,
): SafeParseResult<MorphoWithdrawCollateralParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MorphoWithdrawCollateralParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MorphoWithdrawCollateralParams' from JSON`,
  );
}
