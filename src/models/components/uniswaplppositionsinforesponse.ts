/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UniswapPositionsSolidityResponse,
  UniswapPositionsSolidityResponse$inboundSchema,
  UniswapPositionsSolidityResponse$Outbound,
  UniswapPositionsSolidityResponse$outboundSchema,
} from "./uniswappositionssolidityresponse.js";

export type UniswapLPPositionsInfoResponse = {
  /**
   *  Liquidity provision positions belonging to a particular user keyed by the
   *
   * @remarks
   *         token of owner index of the position.
   */
  positions: { [k: string]: UniswapPositionsSolidityResponse };
};

/** @internal */
export const UniswapLPPositionsInfoResponse$inboundSchema: z.ZodType<
  UniswapLPPositionsInfoResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  positions: z.record(UniswapPositionsSolidityResponse$inboundSchema),
});

/** @internal */
export type UniswapLPPositionsInfoResponse$Outbound = {
  positions: { [k: string]: UniswapPositionsSolidityResponse$Outbound };
};

/** @internal */
export const UniswapLPPositionsInfoResponse$outboundSchema: z.ZodType<
  UniswapLPPositionsInfoResponse$Outbound,
  z.ZodTypeDef,
  UniswapLPPositionsInfoResponse
> = z.object({
  positions: z.record(UniswapPositionsSolidityResponse$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapLPPositionsInfoResponse$ {
  /** @deprecated use `UniswapLPPositionsInfoResponse$inboundSchema` instead. */
  export const inboundSchema = UniswapLPPositionsInfoResponse$inboundSchema;
  /** @deprecated use `UniswapLPPositionsInfoResponse$outboundSchema` instead. */
  export const outboundSchema = UniswapLPPositionsInfoResponse$outboundSchema;
  /** @deprecated use `UniswapLPPositionsInfoResponse$Outbound` instead. */
  export type Outbound = UniswapLPPositionsInfoResponse$Outbound;
}

export function uniswapLPPositionsInfoResponseToJSON(
  uniswapLPPositionsInfoResponse: UniswapLPPositionsInfoResponse,
): string {
  return JSON.stringify(
    UniswapLPPositionsInfoResponse$outboundSchema.parse(
      uniswapLPPositionsInfoResponse,
    ),
  );
}

export function uniswapLPPositionsInfoResponseFromJSON(
  jsonString: string,
): SafeParseResult<UniswapLPPositionsInfoResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UniswapLPPositionsInfoResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UniswapLPPositionsInfoResponse' from JSON`,
  );
}
