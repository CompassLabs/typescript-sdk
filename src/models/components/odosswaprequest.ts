/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The amount of token_in to be sold.
 */
export type OdosSwapRequestAmount = number | string;

export const OdosSwapRequestChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type OdosSwapRequestChain = ClosedEnum<typeof OdosSwapRequestChain>;

export type OdosSwapRequest = {
  actionType?: "ODOS_SWAP" | undefined;
  /**
   * The symbol or address of the token that is to be sold.
   */
  tokenIn: string;
  /**
   * The symbol or address of the token that is to be bought.
   */
  tokenOut: string;
  /**
   * The amount of token_in to be sold.
   */
  amount: number | string;
  /**
   * The maximum slippage allowed in percent. e.g. `1` means `1%` slippage allowed.
   */
  maxSlippagePercent: number;
  chain: OdosSwapRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const OdosSwapRequestAmount$inboundSchema: z.ZodType<
  OdosSwapRequestAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type OdosSwapRequestAmount$Outbound = number | string;

/** @internal */
export const OdosSwapRequestAmount$outboundSchema: z.ZodType<
  OdosSwapRequestAmount$Outbound,
  z.ZodTypeDef,
  OdosSwapRequestAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OdosSwapRequestAmount$ {
  /** @deprecated use `OdosSwapRequestAmount$inboundSchema` instead. */
  export const inboundSchema = OdosSwapRequestAmount$inboundSchema;
  /** @deprecated use `OdosSwapRequestAmount$outboundSchema` instead. */
  export const outboundSchema = OdosSwapRequestAmount$outboundSchema;
  /** @deprecated use `OdosSwapRequestAmount$Outbound` instead. */
  export type Outbound = OdosSwapRequestAmount$Outbound;
}

export function odosSwapRequestAmountToJSON(
  odosSwapRequestAmount: OdosSwapRequestAmount,
): string {
  return JSON.stringify(
    OdosSwapRequestAmount$outboundSchema.parse(odosSwapRequestAmount),
  );
}

export function odosSwapRequestAmountFromJSON(
  jsonString: string,
): SafeParseResult<OdosSwapRequestAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OdosSwapRequestAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OdosSwapRequestAmount' from JSON`,
  );
}

/** @internal */
export const OdosSwapRequestChain$inboundSchema: z.ZodNativeEnum<
  typeof OdosSwapRequestChain
> = z.nativeEnum(OdosSwapRequestChain);

/** @internal */
export const OdosSwapRequestChain$outboundSchema: z.ZodNativeEnum<
  typeof OdosSwapRequestChain
> = OdosSwapRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OdosSwapRequestChain$ {
  /** @deprecated use `OdosSwapRequestChain$inboundSchema` instead. */
  export const inboundSchema = OdosSwapRequestChain$inboundSchema;
  /** @deprecated use `OdosSwapRequestChain$outboundSchema` instead. */
  export const outboundSchema = OdosSwapRequestChain$outboundSchema;
}

/** @internal */
export const OdosSwapRequest$inboundSchema: z.ZodType<
  OdosSwapRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("ODOS_SWAP").default("ODOS_SWAP"),
  token_in: z.string(),
  token_out: z.string(),
  amount: z.union([z.number(), z.string()]),
  max_slippage_percent: z.number(),
  chain: OdosSwapRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "token_in": "tokenIn",
    "token_out": "tokenOut",
    "max_slippage_percent": "maxSlippagePercent",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type OdosSwapRequest$Outbound = {
  action_type: "ODOS_SWAP";
  token_in: string;
  token_out: string;
  amount: number | string;
  max_slippage_percent: number;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const OdosSwapRequest$outboundSchema: z.ZodType<
  OdosSwapRequest$Outbound,
  z.ZodTypeDef,
  OdosSwapRequest
> = z.object({
  actionType: z.literal("ODOS_SWAP").default("ODOS_SWAP" as const),
  tokenIn: z.string(),
  tokenOut: z.string(),
  amount: z.union([z.number(), z.string()]),
  maxSlippagePercent: z.number(),
  chain: OdosSwapRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    tokenIn: "token_in",
    tokenOut: "token_out",
    maxSlippagePercent: "max_slippage_percent",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OdosSwapRequest$ {
  /** @deprecated use `OdosSwapRequest$inboundSchema` instead. */
  export const inboundSchema = OdosSwapRequest$inboundSchema;
  /** @deprecated use `OdosSwapRequest$outboundSchema` instead. */
  export const outboundSchema = OdosSwapRequest$outboundSchema;
  /** @deprecated use `OdosSwapRequest$Outbound` instead. */
  export type Outbound = OdosSwapRequest$Outbound;
}

export function odosSwapRequestToJSON(
  odosSwapRequest: OdosSwapRequest,
): string {
  return JSON.stringify(OdosSwapRequest$outboundSchema.parse(odosSwapRequest));
}

export function odosSwapRequestFromJSON(
  jsonString: string,
): SafeParseResult<OdosSwapRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OdosSwapRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OdosSwapRequest' from JSON`,
  );
}
