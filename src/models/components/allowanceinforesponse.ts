/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Response model for token allowance information.
 */
export type AllowanceInfoResponse = {
  /**
   * Amount of tokens allowed to be spent by spender
   */
  amount: string;
  /**
   * Number of decimals of the token
   */
  decimals: number;
  /**
   * Symbol of the token.
   */
  tokenSymbol: string;
  /**
   * Address of the token
   */
  tokenAddress: string;
  /**
   * Address of the contract
   */
  contractAddress: string;
};

/** @internal */
export const AllowanceInfoResponse$inboundSchema: z.ZodType<
  AllowanceInfoResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount: z.string(),
  decimals: z.number().int(),
  token_symbol: z.string(),
  token_address: z.string(),
  contract_address: z.string(),
}).transform((v) => {
  return remap$(v, {
    "token_symbol": "tokenSymbol",
    "token_address": "tokenAddress",
    "contract_address": "contractAddress",
  });
});

/** @internal */
export type AllowanceInfoResponse$Outbound = {
  amount: string;
  decimals: number;
  token_symbol: string;
  token_address: string;
  contract_address: string;
};

/** @internal */
export const AllowanceInfoResponse$outboundSchema: z.ZodType<
  AllowanceInfoResponse$Outbound,
  z.ZodTypeDef,
  AllowanceInfoResponse
> = z.object({
  amount: z.string(),
  decimals: z.number().int(),
  tokenSymbol: z.string(),
  tokenAddress: z.string(),
  contractAddress: z.string(),
}).transform((v) => {
  return remap$(v, {
    tokenSymbol: "token_symbol",
    tokenAddress: "token_address",
    contractAddress: "contract_address",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AllowanceInfoResponse$ {
  /** @deprecated use `AllowanceInfoResponse$inboundSchema` instead. */
  export const inboundSchema = AllowanceInfoResponse$inboundSchema;
  /** @deprecated use `AllowanceInfoResponse$outboundSchema` instead. */
  export const outboundSchema = AllowanceInfoResponse$outboundSchema;
  /** @deprecated use `AllowanceInfoResponse$Outbound` instead. */
  export type Outbound = AllowanceInfoResponse$Outbound;
}

export function allowanceInfoResponseToJSON(
  allowanceInfoResponse: AllowanceInfoResponse,
): string {
  return JSON.stringify(
    AllowanceInfoResponse$outboundSchema.parse(allowanceInfoResponse),
  );
}

export function allowanceInfoResponseFromJSON(
  jsonString: string,
): SafeParseResult<AllowanceInfoResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AllowanceInfoResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AllowanceInfoResponse' from JSON`,
  );
}
