/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UnsignedTransaction,
  UnsignedTransaction$inboundSchema,
  UnsignedTransaction$Outbound,
  UnsignedTransaction$outboundSchema,
} from "./unsignedtransaction.js";
import {
  UserOperationResponse,
  UserOperationResponse$inboundSchema,
  UserOperationResponse$Outbound,
  UserOperationResponse$outboundSchema,
} from "./useroperationresponse.js";

/**
 * The unsigned transaction data. User must sign and broadcast to network.
 */
export type EthenaRequestToWithdrawTransactionResponseTransaction =
  | UnsignedTransaction
  | UserOperationResponse;

export type EthenaRequestToWithdrawTransactionResponse = {
  /**
   * The unsigned transaction data. User must sign and broadcast to network.
   */
  transaction: UnsignedTransaction | UserOperationResponse;
  /**
   * The duration of days that must pass before a position can be withdrawn from the Ethena vault after a request to withdraw has been made.
   */
  cooldownDurationDays: number;
};

/** @internal */
export const EthenaRequestToWithdrawTransactionResponseTransaction$inboundSchema:
  z.ZodType<
    EthenaRequestToWithdrawTransactionResponseTransaction,
    z.ZodTypeDef,
    unknown
  > = z.union([
    UnsignedTransaction$inboundSchema,
    UserOperationResponse$inboundSchema,
  ]);

/** @internal */
export type EthenaRequestToWithdrawTransactionResponseTransaction$Outbound =
  | UnsignedTransaction$Outbound
  | UserOperationResponse$Outbound;

/** @internal */
export const EthenaRequestToWithdrawTransactionResponseTransaction$outboundSchema:
  z.ZodType<
    EthenaRequestToWithdrawTransactionResponseTransaction$Outbound,
    z.ZodTypeDef,
    EthenaRequestToWithdrawTransactionResponseTransaction
  > = z.union([
    UnsignedTransaction$outboundSchema,
    UserOperationResponse$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EthenaRequestToWithdrawTransactionResponseTransaction$ {
  /** @deprecated use `EthenaRequestToWithdrawTransactionResponseTransaction$inboundSchema` instead. */
  export const inboundSchema =
    EthenaRequestToWithdrawTransactionResponseTransaction$inboundSchema;
  /** @deprecated use `EthenaRequestToWithdrawTransactionResponseTransaction$outboundSchema` instead. */
  export const outboundSchema =
    EthenaRequestToWithdrawTransactionResponseTransaction$outboundSchema;
  /** @deprecated use `EthenaRequestToWithdrawTransactionResponseTransaction$Outbound` instead. */
  export type Outbound =
    EthenaRequestToWithdrawTransactionResponseTransaction$Outbound;
}

export function ethenaRequestToWithdrawTransactionResponseTransactionToJSON(
  ethenaRequestToWithdrawTransactionResponseTransaction:
    EthenaRequestToWithdrawTransactionResponseTransaction,
): string {
  return JSON.stringify(
    EthenaRequestToWithdrawTransactionResponseTransaction$outboundSchema.parse(
      ethenaRequestToWithdrawTransactionResponseTransaction,
    ),
  );
}

export function ethenaRequestToWithdrawTransactionResponseTransactionFromJSON(
  jsonString: string,
): SafeParseResult<
  EthenaRequestToWithdrawTransactionResponseTransaction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EthenaRequestToWithdrawTransactionResponseTransaction$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EthenaRequestToWithdrawTransactionResponseTransaction' from JSON`,
  );
}

/** @internal */
export const EthenaRequestToWithdrawTransactionResponse$inboundSchema:
  z.ZodType<EthenaRequestToWithdrawTransactionResponse, z.ZodTypeDef, unknown> =
    z.object({
      transaction: z.union([
        UnsignedTransaction$inboundSchema,
        UserOperationResponse$inboundSchema,
      ]),
      cooldown_duration_days: z.number().int(),
    }).transform((v) => {
      return remap$(v, {
        "cooldown_duration_days": "cooldownDurationDays",
      });
    });

/** @internal */
export type EthenaRequestToWithdrawTransactionResponse$Outbound = {
  transaction: UnsignedTransaction$Outbound | UserOperationResponse$Outbound;
  cooldown_duration_days: number;
};

/** @internal */
export const EthenaRequestToWithdrawTransactionResponse$outboundSchema:
  z.ZodType<
    EthenaRequestToWithdrawTransactionResponse$Outbound,
    z.ZodTypeDef,
    EthenaRequestToWithdrawTransactionResponse
  > = z.object({
    transaction: z.union([
      UnsignedTransaction$outboundSchema,
      UserOperationResponse$outboundSchema,
    ]),
    cooldownDurationDays: z.number().int(),
  }).transform((v) => {
    return remap$(v, {
      cooldownDurationDays: "cooldown_duration_days",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EthenaRequestToWithdrawTransactionResponse$ {
  /** @deprecated use `EthenaRequestToWithdrawTransactionResponse$inboundSchema` instead. */
  export const inboundSchema =
    EthenaRequestToWithdrawTransactionResponse$inboundSchema;
  /** @deprecated use `EthenaRequestToWithdrawTransactionResponse$outboundSchema` instead. */
  export const outboundSchema =
    EthenaRequestToWithdrawTransactionResponse$outboundSchema;
  /** @deprecated use `EthenaRequestToWithdrawTransactionResponse$Outbound` instead. */
  export type Outbound = EthenaRequestToWithdrawTransactionResponse$Outbound;
}

export function ethenaRequestToWithdrawTransactionResponseToJSON(
  ethenaRequestToWithdrawTransactionResponse:
    EthenaRequestToWithdrawTransactionResponse,
): string {
  return JSON.stringify(
    EthenaRequestToWithdrawTransactionResponse$outboundSchema.parse(
      ethenaRequestToWithdrawTransactionResponse,
    ),
  );
}

export function ethenaRequestToWithdrawTransactionResponseFromJSON(
  jsonString: string,
): SafeParseResult<
  EthenaRequestToWithdrawTransactionResponse,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      EthenaRequestToWithdrawTransactionResponse$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'EthenaRequestToWithdrawTransactionResponse' from JSON`,
  );
}
