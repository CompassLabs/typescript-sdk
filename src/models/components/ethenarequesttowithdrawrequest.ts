/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const EthenaRequestToWithdrawRequestChain = {
  Ethereum: "ethereum",
} as const;
export type EthenaRequestToWithdrawRequestChain = ClosedEnum<
  typeof EthenaRequestToWithdrawRequestChain
>;

export type EthenaRequestToWithdrawRequest = {
  actionType?: "ETHENA_REQUEST_WITHDRAW" | undefined;
  /**
   * The amount of USDe to request to withdraw from Ethena's vault. If set to 'ALL', your total deposited USDe amount will be requested to be withdrawn.
   */
  amount?: any | undefined;
  chain: EthenaRequestToWithdrawRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const EthenaRequestToWithdrawRequestChain$inboundSchema: z.ZodNativeEnum<
  typeof EthenaRequestToWithdrawRequestChain
> = z.nativeEnum(EthenaRequestToWithdrawRequestChain);

/** @internal */
export const EthenaRequestToWithdrawRequestChain$outboundSchema:
  z.ZodNativeEnum<typeof EthenaRequestToWithdrawRequestChain> =
    EthenaRequestToWithdrawRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EthenaRequestToWithdrawRequestChain$ {
  /** @deprecated use `EthenaRequestToWithdrawRequestChain$inboundSchema` instead. */
  export const inboundSchema =
    EthenaRequestToWithdrawRequestChain$inboundSchema;
  /** @deprecated use `EthenaRequestToWithdrawRequestChain$outboundSchema` instead. */
  export const outboundSchema =
    EthenaRequestToWithdrawRequestChain$outboundSchema;
}

/** @internal */
export const EthenaRequestToWithdrawRequest$inboundSchema: z.ZodType<
  EthenaRequestToWithdrawRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("ETHENA_REQUEST_WITHDRAW").default(
    "ETHENA_REQUEST_WITHDRAW",
  ),
  amount: z.any().optional(),
  chain: EthenaRequestToWithdrawRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type EthenaRequestToWithdrawRequest$Outbound = {
  action_type: "ETHENA_REQUEST_WITHDRAW";
  amount?: any | undefined;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const EthenaRequestToWithdrawRequest$outboundSchema: z.ZodType<
  EthenaRequestToWithdrawRequest$Outbound,
  z.ZodTypeDef,
  EthenaRequestToWithdrawRequest
> = z.object({
  actionType: z.literal("ETHENA_REQUEST_WITHDRAW").default(
    "ETHENA_REQUEST_WITHDRAW" as const,
  ),
  amount: z.any().optional(),
  chain: EthenaRequestToWithdrawRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EthenaRequestToWithdrawRequest$ {
  /** @deprecated use `EthenaRequestToWithdrawRequest$inboundSchema` instead. */
  export const inboundSchema = EthenaRequestToWithdrawRequest$inboundSchema;
  /** @deprecated use `EthenaRequestToWithdrawRequest$outboundSchema` instead. */
  export const outboundSchema = EthenaRequestToWithdrawRequest$outboundSchema;
  /** @deprecated use `EthenaRequestToWithdrawRequest$Outbound` instead. */
  export type Outbound = EthenaRequestToWithdrawRequest$Outbound;
}

export function ethenaRequestToWithdrawRequestToJSON(
  ethenaRequestToWithdrawRequest: EthenaRequestToWithdrawRequest,
): string {
  return JSON.stringify(
    EthenaRequestToWithdrawRequest$outboundSchema.parse(
      ethenaRequestToWithdrawRequest,
    ),
  );
}

export function ethenaRequestToWithdrawRequestFromJSON(
  jsonString: string,
): SafeParseResult<EthenaRequestToWithdrawRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EthenaRequestToWithdrawRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EthenaRequestToWithdrawRequest' from JSON`,
  );
}
