/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Market = {
  uniqueKey: string;
};

/** @internal */
export const Market$inboundSchema: z.ZodType<Market, z.ZodTypeDef, unknown> = z
  .object({
    uniqueKey: z.string(),
  });

/** @internal */
export type Market$Outbound = {
  uniqueKey: string;
};

/** @internal */
export const Market$outboundSchema: z.ZodType<
  Market$Outbound,
  z.ZodTypeDef,
  Market
> = z.object({
  uniqueKey: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Market$ {
  /** @deprecated use `Market$inboundSchema` instead. */
  export const inboundSchema = Market$inboundSchema;
  /** @deprecated use `Market$outboundSchema` instead. */
  export const outboundSchema = Market$outboundSchema;
  /** @deprecated use `Market$Outbound` instead. */
  export type Outbound = Market$Outbound;
}

export function marketToJSON(market: Market): string {
  return JSON.stringify(Market$outboundSchema.parse(market));
}

export function marketFromJSON(
  jsonString: string,
): SafeParseResult<Market, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Market$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Market' from JSON`,
  );
}
