/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Reserve,
  Reserve$inboundSchema,
  Reserve$Outbound,
  Reserve$outboundSchema,
} from "./reserve.js";

export type LiquidationCall = {
  /**
   * The id of a historical transaction on aave
   */
  id: string;
  /**
   * Timestamp in unix time
   */
  timestamp: number;
  /**
   * Transaction hash. You can paste these into the search bar on etherscan
   */
  txHash: string;
  collateralAmount: number;
  collateralReserve: Reserve;
  principalAmount: number;
  principalReserve: Reserve;
  collateralAssetPriceUSD: number;
  borrowAssetPriceUSD: number;
  action?: "LiquidationCall" | undefined;
  block: number;
};

/** @internal */
export const LiquidationCall$inboundSchema: z.ZodType<
  LiquidationCall,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  timestamp: z.number().int(),
  txHash: z.string(),
  collateralAmount: z.number(),
  collateralReserve: Reserve$inboundSchema,
  principalAmount: z.number(),
  principalReserve: Reserve$inboundSchema,
  collateralAssetPriceUSD: z.number(),
  borrowAssetPriceUSD: z.number(),
  action: z.literal("LiquidationCall").default("LiquidationCall").optional(),
  block: z.number().int(),
});

/** @internal */
export type LiquidationCall$Outbound = {
  id: string;
  timestamp: number;
  txHash: string;
  collateralAmount: number;
  collateralReserve: Reserve$Outbound;
  principalAmount: number;
  principalReserve: Reserve$Outbound;
  collateralAssetPriceUSD: number;
  borrowAssetPriceUSD: number;
  action: "LiquidationCall";
  block: number;
};

/** @internal */
export const LiquidationCall$outboundSchema: z.ZodType<
  LiquidationCall$Outbound,
  z.ZodTypeDef,
  LiquidationCall
> = z.object({
  id: z.string(),
  timestamp: z.number().int(),
  txHash: z.string(),
  collateralAmount: z.number(),
  collateralReserve: Reserve$outboundSchema,
  principalAmount: z.number(),
  principalReserve: Reserve$outboundSchema,
  collateralAssetPriceUSD: z.number(),
  borrowAssetPriceUSD: z.number(),
  action: z.literal("LiquidationCall").default("LiquidationCall" as const),
  block: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LiquidationCall$ {
  /** @deprecated use `LiquidationCall$inboundSchema` instead. */
  export const inboundSchema = LiquidationCall$inboundSchema;
  /** @deprecated use `LiquidationCall$outboundSchema` instead. */
  export const outboundSchema = LiquidationCall$outboundSchema;
  /** @deprecated use `LiquidationCall$Outbound` instead. */
  export type Outbound = LiquidationCall$Outbound;
}

export function liquidationCallToJSON(
  liquidationCall: LiquidationCall,
): string {
  return JSON.stringify(LiquidationCall$outboundSchema.parse(liquidationCall));
}

export function liquidationCallFromJSON(
  jsonString: string,
): SafeParseResult<LiquidationCall, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LiquidationCall$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LiquidationCall' from JSON`,
  );
}
