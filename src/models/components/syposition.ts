/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SyPosition = {
  syId: string;
  balance: string;
};

/** @internal */
export const SyPosition$inboundSchema: z.ZodType<
  SyPosition,
  z.ZodTypeDef,
  unknown
> = z.object({
  syId: z.string(),
  balance: z.string(),
});

/** @internal */
export type SyPosition$Outbound = {
  syId: string;
  balance: string;
};

/** @internal */
export const SyPosition$outboundSchema: z.ZodType<
  SyPosition$Outbound,
  z.ZodTypeDef,
  SyPosition
> = z.object({
  syId: z.string(),
  balance: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SyPosition$ {
  /** @deprecated use `SyPosition$inboundSchema` instead. */
  export const inboundSchema = SyPosition$inboundSchema;
  /** @deprecated use `SyPosition$outboundSchema` instead. */
  export const outboundSchema = SyPosition$outboundSchema;
  /** @deprecated use `SyPosition$Outbound` instead. */
  export type Outbound = SyPosition$Outbound;
}

export function syPositionToJSON(syPosition: SyPosition): string {
  return JSON.stringify(SyPosition$outboundSchema.parse(syPosition));
}

export function syPositionFromJSON(
  jsonString: string,
): SafeParseResult<SyPosition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SyPosition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SyPosition' from JSON`,
  );
}
