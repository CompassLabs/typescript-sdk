/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CompassApiBackendModelsPendleReadResponseMarketUserPosition,
  CompassApiBackendModelsPendleReadResponseMarketUserPosition$inboundSchema,
  CompassApiBackendModelsPendleReadResponseMarketUserPosition$Outbound,
  CompassApiBackendModelsPendleReadResponseMarketUserPosition$outboundSchema,
} from "./compassapibackendmodelspendlereadresponsemarketuserposition.js";
import {
  MarketTokens,
  MarketTokens$inboundSchema,
  MarketTokens$Outbound,
  MarketTokens$outboundSchema,
} from "./markettokens.js";

export type PendleGetMarketResponse = {
  /**
   * The address of the market.
   */
  marketAddress: string;
  /**
   * The implied APY of the market.
   */
  impliedApy: string;
  /**
   * The maturity date of the market. ISO 8601 format. UTC timezone.
   */
  maturityDate: Date;
  tokens: MarketTokens;
  /**
   * The user's position in the market.
   */
  userPosition?:
    | CompassApiBackendModelsPendleReadResponseMarketUserPosition
    | null
    | undefined;
};

/** @internal */
export const PendleGetMarketResponse$inboundSchema: z.ZodType<
  PendleGetMarketResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  market_address: z.string(),
  implied_apy: z.string(),
  maturity_date: z.string().datetime({ offset: true }).transform(v =>
    new Date(v)
  ),
  tokens: MarketTokens$inboundSchema,
  user_position: z.nullable(
    CompassApiBackendModelsPendleReadResponseMarketUserPosition$inboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    "market_address": "marketAddress",
    "implied_apy": "impliedApy",
    "maturity_date": "maturityDate",
    "user_position": "userPosition",
  });
});

/** @internal */
export type PendleGetMarketResponse$Outbound = {
  market_address: string;
  implied_apy: string;
  maturity_date: string;
  tokens: MarketTokens$Outbound;
  user_position?:
    | CompassApiBackendModelsPendleReadResponseMarketUserPosition$Outbound
    | null
    | undefined;
};

/** @internal */
export const PendleGetMarketResponse$outboundSchema: z.ZodType<
  PendleGetMarketResponse$Outbound,
  z.ZodTypeDef,
  PendleGetMarketResponse
> = z.object({
  marketAddress: z.string(),
  impliedApy: z.string(),
  maturityDate: z.date().transform(v => v.toISOString()),
  tokens: MarketTokens$outboundSchema,
  userPosition: z.nullable(
    CompassApiBackendModelsPendleReadResponseMarketUserPosition$outboundSchema,
  ).optional(),
}).transform((v) => {
  return remap$(v, {
    marketAddress: "market_address",
    impliedApy: "implied_apy",
    maturityDate: "maturity_date",
    userPosition: "user_position",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendleGetMarketResponse$ {
  /** @deprecated use `PendleGetMarketResponse$inboundSchema` instead. */
  export const inboundSchema = PendleGetMarketResponse$inboundSchema;
  /** @deprecated use `PendleGetMarketResponse$outboundSchema` instead. */
  export const outboundSchema = PendleGetMarketResponse$outboundSchema;
  /** @deprecated use `PendleGetMarketResponse$Outbound` instead. */
  export type Outbound = PendleGetMarketResponse$Outbound;
}

export function pendleGetMarketResponseToJSON(
  pendleGetMarketResponse: PendleGetMarketResponse,
): string {
  return JSON.stringify(
    PendleGetMarketResponse$outboundSchema.parse(pendleGetMarketResponse),
  );
}

export function pendleGetMarketResponseFromJSON(
  jsonString: string,
): SafeParseResult<PendleGetMarketResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PendleGetMarketResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendleGetMarketResponse' from JSON`,
  );
}
