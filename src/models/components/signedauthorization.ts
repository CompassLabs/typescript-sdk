/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The r value of the signature
 */
export type R = number | string;

/**
 * The s value of the signature
 */
export type S = number | string;

export type SignedAuthorization = {
  /**
   * The nonce of the authorization
   */
  nonce: number;
  /**
   * The address of the authorization
   */
  address: string;
  /**
   * The chain ID
   */
  chainId: number;
  /**
   * The r value of the signature
   */
  r: number | string;
  /**
   * The s value of the signature
   */
  s: number | string;
  /**
   * The y-parity of the signature (0 or 1)
   */
  yParity: number;
};

/** @internal */
export const R$inboundSchema: z.ZodType<R, z.ZodTypeDef, unknown> = z.union([
  z.number().int(),
  z.string(),
]);

/** @internal */
export type R$Outbound = number | string;

/** @internal */
export const R$outboundSchema: z.ZodType<R$Outbound, z.ZodTypeDef, R> = z.union(
  [z.number().int(), z.string()],
);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace R$ {
  /** @deprecated use `R$inboundSchema` instead. */
  export const inboundSchema = R$inboundSchema;
  /** @deprecated use `R$outboundSchema` instead. */
  export const outboundSchema = R$outboundSchema;
  /** @deprecated use `R$Outbound` instead. */
  export type Outbound = R$Outbound;
}

export function rToJSON(r: R): string {
  return JSON.stringify(R$outboundSchema.parse(r));
}

export function rFromJSON(
  jsonString: string,
): SafeParseResult<R, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => R$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'R' from JSON`,
  );
}

/** @internal */
export const S$inboundSchema: z.ZodType<S, z.ZodTypeDef, unknown> = z.union([
  z.number().int(),
  z.string(),
]);

/** @internal */
export type S$Outbound = number | string;

/** @internal */
export const S$outboundSchema: z.ZodType<S$Outbound, z.ZodTypeDef, S> = z.union(
  [z.number().int(), z.string()],
);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace S$ {
  /** @deprecated use `S$inboundSchema` instead. */
  export const inboundSchema = S$inboundSchema;
  /** @deprecated use `S$outboundSchema` instead. */
  export const outboundSchema = S$outboundSchema;
  /** @deprecated use `S$Outbound` instead. */
  export type Outbound = S$Outbound;
}

export function sToJSON(s: S): string {
  return JSON.stringify(S$outboundSchema.parse(s));
}

export function sFromJSON(
  jsonString: string,
): SafeParseResult<S, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => S$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'S' from JSON`,
  );
}

/** @internal */
export const SignedAuthorization$inboundSchema: z.ZodType<
  SignedAuthorization,
  z.ZodTypeDef,
  unknown
> = z.object({
  nonce: z.number().int(),
  address: z.string(),
  chainId: z.number().int(),
  r: z.union([z.number().int(), z.string()]),
  s: z.union([z.number().int(), z.string()]),
  yParity: z.number().int(),
});

/** @internal */
export type SignedAuthorization$Outbound = {
  nonce: number;
  address: string;
  chainId: number;
  r: number | string;
  s: number | string;
  yParity: number;
};

/** @internal */
export const SignedAuthorization$outboundSchema: z.ZodType<
  SignedAuthorization$Outbound,
  z.ZodTypeDef,
  SignedAuthorization
> = z.object({
  nonce: z.number().int(),
  address: z.string(),
  chainId: z.number().int(),
  r: z.union([z.number().int(), z.string()]),
  s: z.union([z.number().int(), z.string()]),
  yParity: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SignedAuthorization$ {
  /** @deprecated use `SignedAuthorization$inboundSchema` instead. */
  export const inboundSchema = SignedAuthorization$inboundSchema;
  /** @deprecated use `SignedAuthorization$outboundSchema` instead. */
  export const outboundSchema = SignedAuthorization$outboundSchema;
  /** @deprecated use `SignedAuthorization$Outbound` instead. */
  export type Outbound = SignedAuthorization$Outbound;
}

export function signedAuthorizationToJSON(
  signedAuthorization: SignedAuthorization,
): string {
  return JSON.stringify(
    SignedAuthorization$outboundSchema.parse(signedAuthorization),
  );
}

export function signedAuthorizationFromJSON(
  jsonString: string,
): SafeParseResult<SignedAuthorization, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SignedAuthorization$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SignedAuthorization' from JSON`,
  );
}
