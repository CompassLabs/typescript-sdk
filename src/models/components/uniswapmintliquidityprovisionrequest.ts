/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FeeEnum,
  FeeEnum$inboundSchema,
  FeeEnum$outboundSchema,
} from "./feeenum.js";

/**
 * The desired amount of the first token to deposit
 */
export type UniswapMintLiquidityProvisionRequestAmount0Desired =
  | number
  | string;

/**
 * The desired amount of the second token to deposit
 */
export type UniswapMintLiquidityProvisionRequestAmount1Desired =
  | number
  | string;

/**
 * The minimum amount of the first token to deposit
 */
export type UniswapMintLiquidityProvisionRequestAmount0Min = number | string;

/**
 * The minimum amount of the second token to deposit
 */
export type UniswapMintLiquidityProvisionRequestAmount1Min = number | string;

export const UniswapMintLiquidityProvisionRequestChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type UniswapMintLiquidityProvisionRequestChain = ClosedEnum<
  typeof UniswapMintLiquidityProvisionRequestChain
>;

/**
 * Request model for minting a new liquidity position.
 */
export type UniswapMintLiquidityProvisionRequest = {
  actionType?: "UNISWAP_MINT_LIQUIDITY_PROVISION" | undefined;
  /**
   * The symbol or address of the first token in the pair.
   */
  token0: string;
  /**
   * The symbol or address of the second token in the pair.
   */
  token1: string;
  /**
   * The transaction fee of a Uniswap pool in bips.
   *
   * @remarks
   *
   * Uniswap supports 4 different fee levels.
   */
  fee: FeeEnum;
  /**
   * The lower tick of the range to mint the position in
   */
  tickLower: number;
  /**
   * The upper tick of the range to mint the position in
   */
  tickUpper: number;
  /**
   * The desired amount of the first token to deposit
   */
  amount0Desired: number | string;
  /**
   * The desired amount of the second token to deposit
   */
  amount1Desired: number | string;
  /**
   * The minimum amount of the first token to deposit
   */
  amount0Min: number | string;
  /**
   * The minimum amount of the second token to deposit
   */
  amount1Min: number | string;
  /**
   * The address that will receive the LP tokens
   */
  recipient?: string | null | undefined;
  chain: UniswapMintLiquidityProvisionRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const UniswapMintLiquidityProvisionRequestAmount0Desired$inboundSchema:
  z.ZodType<
    UniswapMintLiquidityProvisionRequestAmount0Desired,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type UniswapMintLiquidityProvisionRequestAmount0Desired$Outbound =
  | number
  | string;

/** @internal */
export const UniswapMintLiquidityProvisionRequestAmount0Desired$outboundSchema:
  z.ZodType<
    UniswapMintLiquidityProvisionRequestAmount0Desired$Outbound,
    z.ZodTypeDef,
    UniswapMintLiquidityProvisionRequestAmount0Desired
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapMintLiquidityProvisionRequestAmount0Desired$ {
  /** @deprecated use `UniswapMintLiquidityProvisionRequestAmount0Desired$inboundSchema` instead. */
  export const inboundSchema =
    UniswapMintLiquidityProvisionRequestAmount0Desired$inboundSchema;
  /** @deprecated use `UniswapMintLiquidityProvisionRequestAmount0Desired$outboundSchema` instead. */
  export const outboundSchema =
    UniswapMintLiquidityProvisionRequestAmount0Desired$outboundSchema;
  /** @deprecated use `UniswapMintLiquidityProvisionRequestAmount0Desired$Outbound` instead. */
  export type Outbound =
    UniswapMintLiquidityProvisionRequestAmount0Desired$Outbound;
}

export function uniswapMintLiquidityProvisionRequestAmount0DesiredToJSON(
  uniswapMintLiquidityProvisionRequestAmount0Desired:
    UniswapMintLiquidityProvisionRequestAmount0Desired,
): string {
  return JSON.stringify(
    UniswapMintLiquidityProvisionRequestAmount0Desired$outboundSchema.parse(
      uniswapMintLiquidityProvisionRequestAmount0Desired,
    ),
  );
}

export function uniswapMintLiquidityProvisionRequestAmount0DesiredFromJSON(
  jsonString: string,
): SafeParseResult<
  UniswapMintLiquidityProvisionRequestAmount0Desired,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UniswapMintLiquidityProvisionRequestAmount0Desired$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UniswapMintLiquidityProvisionRequestAmount0Desired' from JSON`,
  );
}

/** @internal */
export const UniswapMintLiquidityProvisionRequestAmount1Desired$inboundSchema:
  z.ZodType<
    UniswapMintLiquidityProvisionRequestAmount1Desired,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type UniswapMintLiquidityProvisionRequestAmount1Desired$Outbound =
  | number
  | string;

/** @internal */
export const UniswapMintLiquidityProvisionRequestAmount1Desired$outboundSchema:
  z.ZodType<
    UniswapMintLiquidityProvisionRequestAmount1Desired$Outbound,
    z.ZodTypeDef,
    UniswapMintLiquidityProvisionRequestAmount1Desired
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapMintLiquidityProvisionRequestAmount1Desired$ {
  /** @deprecated use `UniswapMintLiquidityProvisionRequestAmount1Desired$inboundSchema` instead. */
  export const inboundSchema =
    UniswapMintLiquidityProvisionRequestAmount1Desired$inboundSchema;
  /** @deprecated use `UniswapMintLiquidityProvisionRequestAmount1Desired$outboundSchema` instead. */
  export const outboundSchema =
    UniswapMintLiquidityProvisionRequestAmount1Desired$outboundSchema;
  /** @deprecated use `UniswapMintLiquidityProvisionRequestAmount1Desired$Outbound` instead. */
  export type Outbound =
    UniswapMintLiquidityProvisionRequestAmount1Desired$Outbound;
}

export function uniswapMintLiquidityProvisionRequestAmount1DesiredToJSON(
  uniswapMintLiquidityProvisionRequestAmount1Desired:
    UniswapMintLiquidityProvisionRequestAmount1Desired,
): string {
  return JSON.stringify(
    UniswapMintLiquidityProvisionRequestAmount1Desired$outboundSchema.parse(
      uniswapMintLiquidityProvisionRequestAmount1Desired,
    ),
  );
}

export function uniswapMintLiquidityProvisionRequestAmount1DesiredFromJSON(
  jsonString: string,
): SafeParseResult<
  UniswapMintLiquidityProvisionRequestAmount1Desired,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UniswapMintLiquidityProvisionRequestAmount1Desired$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UniswapMintLiquidityProvisionRequestAmount1Desired' from JSON`,
  );
}

/** @internal */
export const UniswapMintLiquidityProvisionRequestAmount0Min$inboundSchema:
  z.ZodType<
    UniswapMintLiquidityProvisionRequestAmount0Min,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type UniswapMintLiquidityProvisionRequestAmount0Min$Outbound =
  | number
  | string;

/** @internal */
export const UniswapMintLiquidityProvisionRequestAmount0Min$outboundSchema:
  z.ZodType<
    UniswapMintLiquidityProvisionRequestAmount0Min$Outbound,
    z.ZodTypeDef,
    UniswapMintLiquidityProvisionRequestAmount0Min
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapMintLiquidityProvisionRequestAmount0Min$ {
  /** @deprecated use `UniswapMintLiquidityProvisionRequestAmount0Min$inboundSchema` instead. */
  export const inboundSchema =
    UniswapMintLiquidityProvisionRequestAmount0Min$inboundSchema;
  /** @deprecated use `UniswapMintLiquidityProvisionRequestAmount0Min$outboundSchema` instead. */
  export const outboundSchema =
    UniswapMintLiquidityProvisionRequestAmount0Min$outboundSchema;
  /** @deprecated use `UniswapMintLiquidityProvisionRequestAmount0Min$Outbound` instead. */
  export type Outbound =
    UniswapMintLiquidityProvisionRequestAmount0Min$Outbound;
}

export function uniswapMintLiquidityProvisionRequestAmount0MinToJSON(
  uniswapMintLiquidityProvisionRequestAmount0Min:
    UniswapMintLiquidityProvisionRequestAmount0Min,
): string {
  return JSON.stringify(
    UniswapMintLiquidityProvisionRequestAmount0Min$outboundSchema.parse(
      uniswapMintLiquidityProvisionRequestAmount0Min,
    ),
  );
}

export function uniswapMintLiquidityProvisionRequestAmount0MinFromJSON(
  jsonString: string,
): SafeParseResult<
  UniswapMintLiquidityProvisionRequestAmount0Min,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UniswapMintLiquidityProvisionRequestAmount0Min$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UniswapMintLiquidityProvisionRequestAmount0Min' from JSON`,
  );
}

/** @internal */
export const UniswapMintLiquidityProvisionRequestAmount1Min$inboundSchema:
  z.ZodType<
    UniswapMintLiquidityProvisionRequestAmount1Min,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type UniswapMintLiquidityProvisionRequestAmount1Min$Outbound =
  | number
  | string;

/** @internal */
export const UniswapMintLiquidityProvisionRequestAmount1Min$outboundSchema:
  z.ZodType<
    UniswapMintLiquidityProvisionRequestAmount1Min$Outbound,
    z.ZodTypeDef,
    UniswapMintLiquidityProvisionRequestAmount1Min
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapMintLiquidityProvisionRequestAmount1Min$ {
  /** @deprecated use `UniswapMintLiquidityProvisionRequestAmount1Min$inboundSchema` instead. */
  export const inboundSchema =
    UniswapMintLiquidityProvisionRequestAmount1Min$inboundSchema;
  /** @deprecated use `UniswapMintLiquidityProvisionRequestAmount1Min$outboundSchema` instead. */
  export const outboundSchema =
    UniswapMintLiquidityProvisionRequestAmount1Min$outboundSchema;
  /** @deprecated use `UniswapMintLiquidityProvisionRequestAmount1Min$Outbound` instead. */
  export type Outbound =
    UniswapMintLiquidityProvisionRequestAmount1Min$Outbound;
}

export function uniswapMintLiquidityProvisionRequestAmount1MinToJSON(
  uniswapMintLiquidityProvisionRequestAmount1Min:
    UniswapMintLiquidityProvisionRequestAmount1Min,
): string {
  return JSON.stringify(
    UniswapMintLiquidityProvisionRequestAmount1Min$outboundSchema.parse(
      uniswapMintLiquidityProvisionRequestAmount1Min,
    ),
  );
}

export function uniswapMintLiquidityProvisionRequestAmount1MinFromJSON(
  jsonString: string,
): SafeParseResult<
  UniswapMintLiquidityProvisionRequestAmount1Min,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UniswapMintLiquidityProvisionRequestAmount1Min$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UniswapMintLiquidityProvisionRequestAmount1Min' from JSON`,
  );
}

/** @internal */
export const UniswapMintLiquidityProvisionRequestChain$inboundSchema:
  z.ZodNativeEnum<typeof UniswapMintLiquidityProvisionRequestChain> = z
    .nativeEnum(UniswapMintLiquidityProvisionRequestChain);

/** @internal */
export const UniswapMintLiquidityProvisionRequestChain$outboundSchema:
  z.ZodNativeEnum<typeof UniswapMintLiquidityProvisionRequestChain> =
    UniswapMintLiquidityProvisionRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapMintLiquidityProvisionRequestChain$ {
  /** @deprecated use `UniswapMintLiquidityProvisionRequestChain$inboundSchema` instead. */
  export const inboundSchema =
    UniswapMintLiquidityProvisionRequestChain$inboundSchema;
  /** @deprecated use `UniswapMintLiquidityProvisionRequestChain$outboundSchema` instead. */
  export const outboundSchema =
    UniswapMintLiquidityProvisionRequestChain$outboundSchema;
}

/** @internal */
export const UniswapMintLiquidityProvisionRequest$inboundSchema: z.ZodType<
  UniswapMintLiquidityProvisionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("UNISWAP_MINT_LIQUIDITY_PROVISION").default(
    "UNISWAP_MINT_LIQUIDITY_PROVISION",
  ),
  token0: z.string(),
  token1: z.string(),
  fee: FeeEnum$inboundSchema,
  tick_lower: z.number().int(),
  tick_upper: z.number().int(),
  amount0_desired: z.union([z.number(), z.string()]),
  amount1_desired: z.union([z.number(), z.string()]),
  amount0_min: z.union([z.number(), z.string()]),
  amount1_min: z.union([z.number(), z.string()]),
  recipient: z.nullable(z.string()).optional(),
  chain: UniswapMintLiquidityProvisionRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "tick_lower": "tickLower",
    "tick_upper": "tickUpper",
    "amount0_desired": "amount0Desired",
    "amount1_desired": "amount1Desired",
    "amount0_min": "amount0Min",
    "amount1_min": "amount1Min",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type UniswapMintLiquidityProvisionRequest$Outbound = {
  action_type: "UNISWAP_MINT_LIQUIDITY_PROVISION";
  token0: string;
  token1: string;
  fee: string;
  tick_lower: number;
  tick_upper: number;
  amount0_desired: number | string;
  amount1_desired: number | string;
  amount0_min: number | string;
  amount1_min: number | string;
  recipient?: string | null | undefined;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const UniswapMintLiquidityProvisionRequest$outboundSchema: z.ZodType<
  UniswapMintLiquidityProvisionRequest$Outbound,
  z.ZodTypeDef,
  UniswapMintLiquidityProvisionRequest
> = z.object({
  actionType: z.literal("UNISWAP_MINT_LIQUIDITY_PROVISION").default(
    "UNISWAP_MINT_LIQUIDITY_PROVISION" as const,
  ),
  token0: z.string(),
  token1: z.string(),
  fee: FeeEnum$outboundSchema,
  tickLower: z.number().int(),
  tickUpper: z.number().int(),
  amount0Desired: z.union([z.number(), z.string()]),
  amount1Desired: z.union([z.number(), z.string()]),
  amount0Min: z.union([z.number(), z.string()]),
  amount1Min: z.union([z.number(), z.string()]),
  recipient: z.nullable(z.string()).optional(),
  chain: UniswapMintLiquidityProvisionRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    tickLower: "tick_lower",
    tickUpper: "tick_upper",
    amount0Desired: "amount0_desired",
    amount1Desired: "amount1_desired",
    amount0Min: "amount0_min",
    amount1Min: "amount1_min",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapMintLiquidityProvisionRequest$ {
  /** @deprecated use `UniswapMintLiquidityProvisionRequest$inboundSchema` instead. */
  export const inboundSchema =
    UniswapMintLiquidityProvisionRequest$inboundSchema;
  /** @deprecated use `UniswapMintLiquidityProvisionRequest$outboundSchema` instead. */
  export const outboundSchema =
    UniswapMintLiquidityProvisionRequest$outboundSchema;
  /** @deprecated use `UniswapMintLiquidityProvisionRequest$Outbound` instead. */
  export type Outbound = UniswapMintLiquidityProvisionRequest$Outbound;
}

export function uniswapMintLiquidityProvisionRequestToJSON(
  uniswapMintLiquidityProvisionRequest: UniswapMintLiquidityProvisionRequest,
): string {
  return JSON.stringify(
    UniswapMintLiquidityProvisionRequest$outboundSchema.parse(
      uniswapMintLiquidityProvisionRequest,
    ),
  );
}

export function uniswapMintLiquidityProvisionRequestFromJSON(
  jsonString: string,
): SafeParseResult<UniswapMintLiquidityProvisionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UniswapMintLiquidityProvisionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UniswapMintLiquidityProvisionRequest' from JSON`,
  );
}
