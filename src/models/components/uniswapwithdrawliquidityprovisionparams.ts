/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * How much liquidity to take out in percentage.
 */
export type UniswapWithdrawLiquidityProvisionParamsPercentageForWithdrawal =
  | number
  | string;

/**
 * Endpoint parameters for liquidity provision withdrawal on uniswap v3.
 *
 * @remarks
 *
 * This action is performed in a multicall on the NonfungiblePosition Manager: https://github.com/Uniswap/v3-periphery/blob/0682387198a24c7cd63566a2c58398533860a5d1/contracts/base/Multicall.sol#L11-L27
 * First, we call decrease liquidity then collect the tokens owed to the user.
 */
export type UniswapWithdrawLiquidityProvisionParams = {
  actionType?: "UNISWAP_WITHDRAW_LIQUIDITY_PROVISION" | undefined;
  /**
   * Token ID of the NFT representing the liquidity provisioned position.
   */
  tokenId: number;
  /**
   * How much liquidity to take out in percentage.
   */
  percentageForWithdrawal: number | string;
};

/** @internal */
export const UniswapWithdrawLiquidityProvisionParamsPercentageForWithdrawal$inboundSchema:
  z.ZodType<
    UniswapWithdrawLiquidityProvisionParamsPercentageForWithdrawal,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type UniswapWithdrawLiquidityProvisionParamsPercentageForWithdrawal$Outbound =
  | number
  | string;

/** @internal */
export const UniswapWithdrawLiquidityProvisionParamsPercentageForWithdrawal$outboundSchema:
  z.ZodType<
    UniswapWithdrawLiquidityProvisionParamsPercentageForWithdrawal$Outbound,
    z.ZodTypeDef,
    UniswapWithdrawLiquidityProvisionParamsPercentageForWithdrawal
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapWithdrawLiquidityProvisionParamsPercentageForWithdrawal$ {
  /** @deprecated use `UniswapWithdrawLiquidityProvisionParamsPercentageForWithdrawal$inboundSchema` instead. */
  export const inboundSchema =
    UniswapWithdrawLiquidityProvisionParamsPercentageForWithdrawal$inboundSchema;
  /** @deprecated use `UniswapWithdrawLiquidityProvisionParamsPercentageForWithdrawal$outboundSchema` instead. */
  export const outboundSchema =
    UniswapWithdrawLiquidityProvisionParamsPercentageForWithdrawal$outboundSchema;
  /** @deprecated use `UniswapWithdrawLiquidityProvisionParamsPercentageForWithdrawal$Outbound` instead. */
  export type Outbound =
    UniswapWithdrawLiquidityProvisionParamsPercentageForWithdrawal$Outbound;
}

export function uniswapWithdrawLiquidityProvisionParamsPercentageForWithdrawalToJSON(
  uniswapWithdrawLiquidityProvisionParamsPercentageForWithdrawal:
    UniswapWithdrawLiquidityProvisionParamsPercentageForWithdrawal,
): string {
  return JSON.stringify(
    UniswapWithdrawLiquidityProvisionParamsPercentageForWithdrawal$outboundSchema
      .parse(uniswapWithdrawLiquidityProvisionParamsPercentageForWithdrawal),
  );
}

export function uniswapWithdrawLiquidityProvisionParamsPercentageForWithdrawalFromJSON(
  jsonString: string,
): SafeParseResult<
  UniswapWithdrawLiquidityProvisionParamsPercentageForWithdrawal,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UniswapWithdrawLiquidityProvisionParamsPercentageForWithdrawal$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UniswapWithdrawLiquidityProvisionParamsPercentageForWithdrawal' from JSON`,
  );
}

/** @internal */
export const UniswapWithdrawLiquidityProvisionParams$inboundSchema: z.ZodType<
  UniswapWithdrawLiquidityProvisionParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("UNISWAP_WITHDRAW_LIQUIDITY_PROVISION").default(
    "UNISWAP_WITHDRAW_LIQUIDITY_PROVISION",
  ),
  token_id: z.number().int(),
  percentage_for_withdrawal: z.union([z.number(), z.string()]),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "token_id": "tokenId",
    "percentage_for_withdrawal": "percentageForWithdrawal",
  });
});

/** @internal */
export type UniswapWithdrawLiquidityProvisionParams$Outbound = {
  action_type: "UNISWAP_WITHDRAW_LIQUIDITY_PROVISION";
  token_id: number;
  percentage_for_withdrawal: number | string;
};

/** @internal */
export const UniswapWithdrawLiquidityProvisionParams$outboundSchema: z.ZodType<
  UniswapWithdrawLiquidityProvisionParams$Outbound,
  z.ZodTypeDef,
  UniswapWithdrawLiquidityProvisionParams
> = z.object({
  actionType: z.literal("UNISWAP_WITHDRAW_LIQUIDITY_PROVISION").default(
    "UNISWAP_WITHDRAW_LIQUIDITY_PROVISION" as const,
  ),
  tokenId: z.number().int(),
  percentageForWithdrawal: z.union([z.number(), z.string()]),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    tokenId: "token_id",
    percentageForWithdrawal: "percentage_for_withdrawal",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapWithdrawLiquidityProvisionParams$ {
  /** @deprecated use `UniswapWithdrawLiquidityProvisionParams$inboundSchema` instead. */
  export const inboundSchema =
    UniswapWithdrawLiquidityProvisionParams$inboundSchema;
  /** @deprecated use `UniswapWithdrawLiquidityProvisionParams$outboundSchema` instead. */
  export const outboundSchema =
    UniswapWithdrawLiquidityProvisionParams$outboundSchema;
  /** @deprecated use `UniswapWithdrawLiquidityProvisionParams$Outbound` instead. */
  export type Outbound = UniswapWithdrawLiquidityProvisionParams$Outbound;
}

export function uniswapWithdrawLiquidityProvisionParamsToJSON(
  uniswapWithdrawLiquidityProvisionParams:
    UniswapWithdrawLiquidityProvisionParams,
): string {
  return JSON.stringify(
    UniswapWithdrawLiquidityProvisionParams$outboundSchema.parse(
      uniswapWithdrawLiquidityProvisionParams,
    ),
  );
}

export function uniswapWithdrawLiquidityProvisionParamsFromJSON(
  jsonString: string,
): SafeParseResult<
  UniswapWithdrawLiquidityProvisionParams,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UniswapWithdrawLiquidityProvisionParams$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UniswapWithdrawLiquidityProvisionParams' from JSON`,
  );
}
