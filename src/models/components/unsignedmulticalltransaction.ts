/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  SignedAuthorization,
  SignedAuthorization$inboundSchema,
  SignedAuthorization$Outbound,
  SignedAuthorization$outboundSchema,
} from "./signedauthorization.js";

export type UnsignedMulticallTransaction = {
  /**
   * The chain id of the transaction
   */
  chainId: string;
  /**
   * The data of the transaction
   */
  data: string;
  /**
   * The sender of the transaction
   */
  from: string;
  /**
   * The gas of the transaction
   */
  gas: string | null;
  /**
   * The recipient of the transaction
   */
  to: string;
  /**
   * The value of the transaction
   */
  value: string;
  /**
   * The nonce of the address
   */
  nonce: string;
  /**
   * The max fee per gas of the transaction
   */
  maxFeePerGas: string;
  /**
   * The max priority fee per gas of the transaction
   */
  maxPriorityFeePerGas: string;
  /**
   * EIP-7702 authorization
   */
  authorizationList?: Array<SignedAuthorization> | undefined;
};

/** @internal */
export const UnsignedMulticallTransaction$inboundSchema: z.ZodType<
  UnsignedMulticallTransaction,
  z.ZodTypeDef,
  unknown
> = z.object({
  chainId: z.string(),
  data: z.string(),
  from: z.string(),
  gas: z.nullable(z.string()),
  to: z.string(),
  value: z.string(),
  nonce: z.string(),
  maxFeePerGas: z.string(),
  maxPriorityFeePerGas: z.string(),
  authorizationList: z.array(SignedAuthorization$inboundSchema).optional(),
});

/** @internal */
export type UnsignedMulticallTransaction$Outbound = {
  chainId: string;
  data: string;
  from: string;
  gas: string | null;
  to: string;
  value: string;
  nonce: string;
  maxFeePerGas: string;
  maxPriorityFeePerGas: string;
  authorizationList?: Array<SignedAuthorization$Outbound> | undefined;
};

/** @internal */
export const UnsignedMulticallTransaction$outboundSchema: z.ZodType<
  UnsignedMulticallTransaction$Outbound,
  z.ZodTypeDef,
  UnsignedMulticallTransaction
> = z.object({
  chainId: z.string(),
  data: z.string(),
  from: z.string(),
  gas: z.nullable(z.string()),
  to: z.string(),
  value: z.string(),
  nonce: z.string(),
  maxFeePerGas: z.string(),
  maxPriorityFeePerGas: z.string(),
  authorizationList: z.array(SignedAuthorization$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnsignedMulticallTransaction$ {
  /** @deprecated use `UnsignedMulticallTransaction$inboundSchema` instead. */
  export const inboundSchema = UnsignedMulticallTransaction$inboundSchema;
  /** @deprecated use `UnsignedMulticallTransaction$outboundSchema` instead. */
  export const outboundSchema = UnsignedMulticallTransaction$outboundSchema;
  /** @deprecated use `UnsignedMulticallTransaction$Outbound` instead. */
  export type Outbound = UnsignedMulticallTransaction$Outbound;
}

export function unsignedMulticallTransactionToJSON(
  unsignedMulticallTransaction: UnsignedMulticallTransaction,
): string {
  return JSON.stringify(
    UnsignedMulticallTransaction$outboundSchema.parse(
      unsignedMulticallTransaction,
    ),
  );
}

export function unsignedMulticallTransactionFromJSON(
  jsonString: string,
): SafeParseResult<UnsignedMulticallTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnsignedMulticallTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnsignedMulticallTransaction' from JSON`,
  );
}
