/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UserOperationResponse,
  UserOperationResponse$inboundSchema,
  UserOperationResponse$Outbound,
  UserOperationResponse$outboundSchema,
} from "./useroperationresponse.js";

export type BatchedUserOperationsResponse = {
  /**
   * List of user operations to be batched and executed by the smart account.
   */
  operations: Array<UserOperationResponse>;
};

/** @internal */
export const BatchedUserOperationsResponse$inboundSchema: z.ZodType<
  BatchedUserOperationsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  operations: z.array(UserOperationResponse$inboundSchema),
});

/** @internal */
export type BatchedUserOperationsResponse$Outbound = {
  operations: Array<UserOperationResponse$Outbound>;
};

/** @internal */
export const BatchedUserOperationsResponse$outboundSchema: z.ZodType<
  BatchedUserOperationsResponse$Outbound,
  z.ZodTypeDef,
  BatchedUserOperationsResponse
> = z.object({
  operations: z.array(UserOperationResponse$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchedUserOperationsResponse$ {
  /** @deprecated use `BatchedUserOperationsResponse$inboundSchema` instead. */
  export const inboundSchema = BatchedUserOperationsResponse$inboundSchema;
  /** @deprecated use `BatchedUserOperationsResponse$outboundSchema` instead. */
  export const outboundSchema = BatchedUserOperationsResponse$outboundSchema;
  /** @deprecated use `BatchedUserOperationsResponse$Outbound` instead. */
  export type Outbound = BatchedUserOperationsResponse$Outbound;
}

export function batchedUserOperationsResponseToJSON(
  batchedUserOperationsResponse: BatchedUserOperationsResponse,
): string {
  return JSON.stringify(
    BatchedUserOperationsResponse$outboundSchema.parse(
      batchedUserOperationsResponse,
    ),
  );
}

export function batchedUserOperationsResponseFromJSON(
  jsonString: string,
): SafeParseResult<BatchedUserOperationsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BatchedUserOperationsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchedUserOperationsResponse' from JSON`,
  );
}
