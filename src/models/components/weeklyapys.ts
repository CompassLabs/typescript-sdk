/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type WeeklyApys = {
  supplyApy: number;
  netSupplyApy: number;
  borrowApy: number;
  netBorrowApy: number;
};

/** @internal */
export const WeeklyApys$inboundSchema: z.ZodType<
  WeeklyApys,
  z.ZodTypeDef,
  unknown
> = z.object({
  supplyApy: z.number(),
  netSupplyApy: z.number(),
  borrowApy: z.number(),
  netBorrowApy: z.number(),
});

/** @internal */
export type WeeklyApys$Outbound = {
  supplyApy: number;
  netSupplyApy: number;
  borrowApy: number;
  netBorrowApy: number;
};

/** @internal */
export const WeeklyApys$outboundSchema: z.ZodType<
  WeeklyApys$Outbound,
  z.ZodTypeDef,
  WeeklyApys
> = z.object({
  supplyApy: z.number(),
  netSupplyApy: z.number(),
  borrowApy: z.number(),
  netBorrowApy: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WeeklyApys$ {
  /** @deprecated use `WeeklyApys$inboundSchema` instead. */
  export const inboundSchema = WeeklyApys$inboundSchema;
  /** @deprecated use `WeeklyApys$outboundSchema` instead. */
  export const outboundSchema = WeeklyApys$outboundSchema;
  /** @deprecated use `WeeklyApys$Outbound` instead. */
  export type Outbound = WeeklyApys$Outbound;
}

export function weeklyApysToJSON(weeklyApys: WeeklyApys): string {
  return JSON.stringify(WeeklyApys$outboundSchema.parse(weeklyApys));
}

export function weeklyApysFromJSON(
  jsonString: string,
): SafeParseResult<WeeklyApys, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WeeklyApys$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WeeklyApys' from JSON`,
  );
}
