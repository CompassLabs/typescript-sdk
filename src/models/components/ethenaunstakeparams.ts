/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type EthenaUnstakeParams = {
  actionType?: "ETHENA_UNSTAKE" | undefined;
  /**
   * The address which will receive the unstaked USDe. Defaults to the sender.
   */
  receiver?: string | null | undefined;
};

/** @internal */
export const EthenaUnstakeParams$inboundSchema: z.ZodType<
  EthenaUnstakeParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("ETHENA_UNSTAKE").default("ETHENA_UNSTAKE"),
  receiver: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
  });
});

/** @internal */
export type EthenaUnstakeParams$Outbound = {
  action_type: "ETHENA_UNSTAKE";
  receiver?: string | null | undefined;
};

/** @internal */
export const EthenaUnstakeParams$outboundSchema: z.ZodType<
  EthenaUnstakeParams$Outbound,
  z.ZodTypeDef,
  EthenaUnstakeParams
> = z.object({
  actionType: z.literal("ETHENA_UNSTAKE").default("ETHENA_UNSTAKE" as const),
  receiver: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EthenaUnstakeParams$ {
  /** @deprecated use `EthenaUnstakeParams$inboundSchema` instead. */
  export const inboundSchema = EthenaUnstakeParams$inboundSchema;
  /** @deprecated use `EthenaUnstakeParams$outboundSchema` instead. */
  export const outboundSchema = EthenaUnstakeParams$outboundSchema;
  /** @deprecated use `EthenaUnstakeParams$Outbound` instead. */
  export type Outbound = EthenaUnstakeParams$Outbound;
}

export function ethenaUnstakeParamsToJSON(
  ethenaUnstakeParams: EthenaUnstakeParams,
): string {
  return JSON.stringify(
    EthenaUnstakeParams$outboundSchema.parse(ethenaUnstakeParams),
  );
}

export function ethenaUnstakeParamsFromJSON(
  jsonString: string,
): SafeParseResult<EthenaUnstakeParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EthenaUnstakeParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EthenaUnstakeParams' from JSON`,
  );
}
