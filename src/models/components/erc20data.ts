/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Erc20Data = {
  address: string;
  symbol: string;
  name: string;
  decimals: number;
};

/** @internal */
export const Erc20Data$inboundSchema: z.ZodType<
  Erc20Data,
  z.ZodTypeDef,
  unknown
> = z.object({
  address: z.string(),
  symbol: z.string(),
  name: z.string(),
  decimals: z.number().int(),
});

/** @internal */
export type Erc20Data$Outbound = {
  address: string;
  symbol: string;
  name: string;
  decimals: number;
};

/** @internal */
export const Erc20Data$outboundSchema: z.ZodType<
  Erc20Data$Outbound,
  z.ZodTypeDef,
  Erc20Data
> = z.object({
  address: z.string(),
  symbol: z.string(),
  name: z.string(),
  decimals: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Erc20Data$ {
  /** @deprecated use `Erc20Data$inboundSchema` instead. */
  export const inboundSchema = Erc20Data$inboundSchema;
  /** @deprecated use `Erc20Data$outboundSchema` instead. */
  export const outboundSchema = Erc20Data$outboundSchema;
  /** @deprecated use `Erc20Data$Outbound` instead. */
  export type Outbound = Erc20Data$Outbound;
}

export function erc20DataToJSON(erc20Data: Erc20Data): string {
  return JSON.stringify(Erc20Data$outboundSchema.parse(erc20Data));
}

export function erc20DataFromJSON(
  jsonString: string,
): SafeParseResult<Erc20Data, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Erc20Data$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Erc20Data' from JSON`,
  );
}
