/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Apy = {
  current: string;
  apy1Day: string;
  apy7Day: string;
  apy30Day: string;
};

/** @internal */
export const Apy$inboundSchema: z.ZodType<Apy, z.ZodTypeDef, unknown> = z
  .object({
    current: z.string(),
    apy_1_day: z.string(),
    apy_7_day: z.string(),
    apy_30_day: z.string(),
  }).transform((v) => {
    return remap$(v, {
      "apy_1_day": "apy1Day",
      "apy_7_day": "apy7Day",
      "apy_30_day": "apy30Day",
    });
  });

/** @internal */
export type Apy$Outbound = {
  current: string;
  apy_1_day: string;
  apy_7_day: string;
  apy_30_day: string;
};

/** @internal */
export const Apy$outboundSchema: z.ZodType<Apy$Outbound, z.ZodTypeDef, Apy> = z
  .object({
    current: z.string(),
    apy1Day: z.string(),
    apy7Day: z.string(),
    apy30Day: z.string(),
  }).transform((v) => {
    return remap$(v, {
      apy1Day: "apy_1_day",
      apy7Day: "apy_7_day",
      apy30Day: "apy_30_day",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Apy$ {
  /** @deprecated use `Apy$inboundSchema` instead. */
  export const inboundSchema = Apy$inboundSchema;
  /** @deprecated use `Apy$outboundSchema` instead. */
  export const outboundSchema = Apy$outboundSchema;
  /** @deprecated use `Apy$Outbound` instead. */
  export type Outbound = Apy$Outbound;
}

export function apyToJSON(apy: Apy): string {
  return JSON.stringify(Apy$outboundSchema.parse(apy));
}

export function apyFromJSON(
  jsonString: string,
): SafeParseResult<Apy, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Apy$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Apy' from JSON`,
  );
}
