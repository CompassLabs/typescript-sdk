/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Specifies the direction of the PT trade. Valid values are `BUY` (to buy PT) or `SELL` (to sell PT).
 */
export const PendleTradePtParamsAction = {
  Buy: "BUY",
  Sell: "SELL",
} as const;
/**
 * Specifies the direction of the PT trade. Valid values are `BUY` (to buy PT) or `SELL` (to sell PT).
 */
export type PendleTradePtParamsAction = ClosedEnum<
  typeof PendleTradePtParamsAction
>;

/**
 * For `action` set to `BUY`, this is the amount in of `token` to buy PT with. For `action` set to `SELL`, this is the amount in of PT to sell for `token`.
 */
export type PendleTradePtParamsAmountIn = number | string;

export type PendleTradePtParams = {
  actionType?: "PENDLE_TRADE_PT" | undefined;
  /**
   * The address of the market identifying which Principal Token (PT) you would like to trade.
   */
  marketAddress: string;
  /**
   * Specifies the direction of the PT trade. Valid values are `BUY` (to buy PT) or `SELL` (to sell PT).
   */
  action: PendleTradePtParamsAction;
  /**
   * TThe symbol or address of the token to trade PT with. For `action` set to `BUY`, this is the token to buy PT with. For `action` set to `SELL`, this is the token to sell PT for.
   */
  token: string;
  /**
   * For `action` set to `BUY`, this is the amount in of `token` to buy PT with. For `action` set to `SELL`, this is the amount in of PT to sell for `token`.
   */
  amountIn: number | string;
  /**
   * The maximum slippage allowed in percent. e.g. `1` means `1%` slippage allowed.
   */
  maxSlippagePercent: number;
};

/** @internal */
export const PendleTradePtParamsAction$inboundSchema: z.ZodNativeEnum<
  typeof PendleTradePtParamsAction
> = z.nativeEnum(PendleTradePtParamsAction);

/** @internal */
export const PendleTradePtParamsAction$outboundSchema: z.ZodNativeEnum<
  typeof PendleTradePtParamsAction
> = PendleTradePtParamsAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendleTradePtParamsAction$ {
  /** @deprecated use `PendleTradePtParamsAction$inboundSchema` instead. */
  export const inboundSchema = PendleTradePtParamsAction$inboundSchema;
  /** @deprecated use `PendleTradePtParamsAction$outboundSchema` instead. */
  export const outboundSchema = PendleTradePtParamsAction$outboundSchema;
}

/** @internal */
export const PendleTradePtParamsAmountIn$inboundSchema: z.ZodType<
  PendleTradePtParamsAmountIn,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type PendleTradePtParamsAmountIn$Outbound = number | string;

/** @internal */
export const PendleTradePtParamsAmountIn$outboundSchema: z.ZodType<
  PendleTradePtParamsAmountIn$Outbound,
  z.ZodTypeDef,
  PendleTradePtParamsAmountIn
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendleTradePtParamsAmountIn$ {
  /** @deprecated use `PendleTradePtParamsAmountIn$inboundSchema` instead. */
  export const inboundSchema = PendleTradePtParamsAmountIn$inboundSchema;
  /** @deprecated use `PendleTradePtParamsAmountIn$outboundSchema` instead. */
  export const outboundSchema = PendleTradePtParamsAmountIn$outboundSchema;
  /** @deprecated use `PendleTradePtParamsAmountIn$Outbound` instead. */
  export type Outbound = PendleTradePtParamsAmountIn$Outbound;
}

export function pendleTradePtParamsAmountInToJSON(
  pendleTradePtParamsAmountIn: PendleTradePtParamsAmountIn,
): string {
  return JSON.stringify(
    PendleTradePtParamsAmountIn$outboundSchema.parse(
      pendleTradePtParamsAmountIn,
    ),
  );
}

export function pendleTradePtParamsAmountInFromJSON(
  jsonString: string,
): SafeParseResult<PendleTradePtParamsAmountIn, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PendleTradePtParamsAmountIn$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendleTradePtParamsAmountIn' from JSON`,
  );
}

/** @internal */
export const PendleTradePtParams$inboundSchema: z.ZodType<
  PendleTradePtParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("PENDLE_TRADE_PT").default("PENDLE_TRADE_PT"),
  market_address: z.string(),
  action: PendleTradePtParamsAction$inboundSchema,
  token: z.string(),
  amount_in: z.union([z.number(), z.string()]),
  max_slippage_percent: z.number(),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "market_address": "marketAddress",
    "amount_in": "amountIn",
    "max_slippage_percent": "maxSlippagePercent",
  });
});

/** @internal */
export type PendleTradePtParams$Outbound = {
  action_type: "PENDLE_TRADE_PT";
  market_address: string;
  action: string;
  token: string;
  amount_in: number | string;
  max_slippage_percent: number;
};

/** @internal */
export const PendleTradePtParams$outboundSchema: z.ZodType<
  PendleTradePtParams$Outbound,
  z.ZodTypeDef,
  PendleTradePtParams
> = z.object({
  actionType: z.literal("PENDLE_TRADE_PT").default("PENDLE_TRADE_PT" as const),
  marketAddress: z.string(),
  action: PendleTradePtParamsAction$outboundSchema,
  token: z.string(),
  amountIn: z.union([z.number(), z.string()]),
  maxSlippagePercent: z.number(),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    marketAddress: "market_address",
    amountIn: "amount_in",
    maxSlippagePercent: "max_slippage_percent",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendleTradePtParams$ {
  /** @deprecated use `PendleTradePtParams$inboundSchema` instead. */
  export const inboundSchema = PendleTradePtParams$inboundSchema;
  /** @deprecated use `PendleTradePtParams$outboundSchema` instead. */
  export const outboundSchema = PendleTradePtParams$outboundSchema;
  /** @deprecated use `PendleTradePtParams$Outbound` instead. */
  export type Outbound = PendleTradePtParams$Outbound;
}

export function pendleTradePtParamsToJSON(
  pendleTradePtParams: PendleTradePtParams,
): string {
  return JSON.stringify(
    PendleTradePtParams$outboundSchema.parse(pendleTradePtParams),
  );
}

export function pendleTradePtParamsFromJSON(
  jsonString: string,
): SafeParseResult<PendleTradePtParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PendleTradePtParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendleTradePtParams' from JSON`,
  );
}
