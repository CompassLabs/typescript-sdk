/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Amount of the token to borrow from the market.
 */
export type MorphoBorrowRequestAmount = number | string;

export const MorphoBorrowRequestChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type MorphoBorrowRequestChain = ClosedEnum<
  typeof MorphoBorrowRequestChain
>;

export type MorphoBorrowRequest = {
  actionType?: "MORPHO_BORROW" | undefined;
  /**
   * Amount of the token to borrow from the market.
   */
  amount: number | string;
  /**
   * The key that uniquely identifies the market. This can be found using the 'Get Markets' endpoint.
   */
  uniqueMarketKey: string;
  /**
   * The address where the collateral is borrowed against. Defaults to sender.
   */
  onBehalfOf?: string | null | undefined;
  /**
   * The address of the receiver of the tokens borrowed. Defaults to the transaction sender.
   */
  receiver?: string | null | undefined;
  chain: MorphoBorrowRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const MorphoBorrowRequestAmount$inboundSchema: z.ZodType<
  MorphoBorrowRequestAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type MorphoBorrowRequestAmount$Outbound = number | string;

/** @internal */
export const MorphoBorrowRequestAmount$outboundSchema: z.ZodType<
  MorphoBorrowRequestAmount$Outbound,
  z.ZodTypeDef,
  MorphoBorrowRequestAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MorphoBorrowRequestAmount$ {
  /** @deprecated use `MorphoBorrowRequestAmount$inboundSchema` instead. */
  export const inboundSchema = MorphoBorrowRequestAmount$inboundSchema;
  /** @deprecated use `MorphoBorrowRequestAmount$outboundSchema` instead. */
  export const outboundSchema = MorphoBorrowRequestAmount$outboundSchema;
  /** @deprecated use `MorphoBorrowRequestAmount$Outbound` instead. */
  export type Outbound = MorphoBorrowRequestAmount$Outbound;
}

export function morphoBorrowRequestAmountToJSON(
  morphoBorrowRequestAmount: MorphoBorrowRequestAmount,
): string {
  return JSON.stringify(
    MorphoBorrowRequestAmount$outboundSchema.parse(morphoBorrowRequestAmount),
  );
}

export function morphoBorrowRequestAmountFromJSON(
  jsonString: string,
): SafeParseResult<MorphoBorrowRequestAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MorphoBorrowRequestAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MorphoBorrowRequestAmount' from JSON`,
  );
}

/** @internal */
export const MorphoBorrowRequestChain$inboundSchema: z.ZodNativeEnum<
  typeof MorphoBorrowRequestChain
> = z.nativeEnum(MorphoBorrowRequestChain);

/** @internal */
export const MorphoBorrowRequestChain$outboundSchema: z.ZodNativeEnum<
  typeof MorphoBorrowRequestChain
> = MorphoBorrowRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MorphoBorrowRequestChain$ {
  /** @deprecated use `MorphoBorrowRequestChain$inboundSchema` instead. */
  export const inboundSchema = MorphoBorrowRequestChain$inboundSchema;
  /** @deprecated use `MorphoBorrowRequestChain$outboundSchema` instead. */
  export const outboundSchema = MorphoBorrowRequestChain$outboundSchema;
}

/** @internal */
export const MorphoBorrowRequest$inboundSchema: z.ZodType<
  MorphoBorrowRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("MORPHO_BORROW").default("MORPHO_BORROW"),
  amount: z.union([z.number(), z.string()]),
  unique_market_key: z.string(),
  on_behalf_of: z.nullable(z.string()).optional(),
  receiver: z.nullable(z.string()).optional(),
  chain: MorphoBorrowRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "unique_market_key": "uniqueMarketKey",
    "on_behalf_of": "onBehalfOf",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type MorphoBorrowRequest$Outbound = {
  action_type: "MORPHO_BORROW";
  amount: number | string;
  unique_market_key: string;
  on_behalf_of?: string | null | undefined;
  receiver?: string | null | undefined;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const MorphoBorrowRequest$outboundSchema: z.ZodType<
  MorphoBorrowRequest$Outbound,
  z.ZodTypeDef,
  MorphoBorrowRequest
> = z.object({
  actionType: z.literal("MORPHO_BORROW").default("MORPHO_BORROW" as const),
  amount: z.union([z.number(), z.string()]),
  uniqueMarketKey: z.string(),
  onBehalfOf: z.nullable(z.string()).optional(),
  receiver: z.nullable(z.string()).optional(),
  chain: MorphoBorrowRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    uniqueMarketKey: "unique_market_key",
    onBehalfOf: "on_behalf_of",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MorphoBorrowRequest$ {
  /** @deprecated use `MorphoBorrowRequest$inboundSchema` instead. */
  export const inboundSchema = MorphoBorrowRequest$inboundSchema;
  /** @deprecated use `MorphoBorrowRequest$outboundSchema` instead. */
  export const outboundSchema = MorphoBorrowRequest$outboundSchema;
  /** @deprecated use `MorphoBorrowRequest$Outbound` instead. */
  export type Outbound = MorphoBorrowRequest$Outbound;
}

export function morphoBorrowRequestToJSON(
  morphoBorrowRequest: MorphoBorrowRequest,
): string {
  return JSON.stringify(
    MorphoBorrowRequest$outboundSchema.parse(morphoBorrowRequest),
  );
}

export function morphoBorrowRequestFromJSON(
  jsonString: string,
): SafeParseResult<MorphoBorrowRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MorphoBorrowRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MorphoBorrowRequest' from JSON`,
  );
}
