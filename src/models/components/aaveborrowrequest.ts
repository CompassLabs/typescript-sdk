/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  InterestRateMode,
  InterestRateMode$inboundSchema,
  InterestRateMode$outboundSchema,
} from "./interestratemode.js";

/**
 * The amount of the asset to borrow
 */
export type AaveBorrowRequestAmount = number | string;

export const AaveBorrowRequestChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type AaveBorrowRequestChain = ClosedEnum<typeof AaveBorrowRequestChain>;

export type AaveBorrowRequest = {
  actionType?: "AAVE_BORROW" | undefined;
  /**
   * The symbol or address of the underlying asset to borrow..
   */
  token: string;
  /**
   * The amount of the asset to borrow
   */
  amount: number | string;
  /**
   * On AAVE there are 2 different interest modes.
   *
   * @remarks
   *
   * A stable (but typically higher rate), or a variable rate.
   */
  interestRateMode: InterestRateMode;
  /**
   * The address on behalf of whom the supply is made
   */
  onBehalfOf?: string | null | undefined;
  chain: AaveBorrowRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const AaveBorrowRequestAmount$inboundSchema: z.ZodType<
  AaveBorrowRequestAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type AaveBorrowRequestAmount$Outbound = number | string;

/** @internal */
export const AaveBorrowRequestAmount$outboundSchema: z.ZodType<
  AaveBorrowRequestAmount$Outbound,
  z.ZodTypeDef,
  AaveBorrowRequestAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AaveBorrowRequestAmount$ {
  /** @deprecated use `AaveBorrowRequestAmount$inboundSchema` instead. */
  export const inboundSchema = AaveBorrowRequestAmount$inboundSchema;
  /** @deprecated use `AaveBorrowRequestAmount$outboundSchema` instead. */
  export const outboundSchema = AaveBorrowRequestAmount$outboundSchema;
  /** @deprecated use `AaveBorrowRequestAmount$Outbound` instead. */
  export type Outbound = AaveBorrowRequestAmount$Outbound;
}

export function aaveBorrowRequestAmountToJSON(
  aaveBorrowRequestAmount: AaveBorrowRequestAmount,
): string {
  return JSON.stringify(
    AaveBorrowRequestAmount$outboundSchema.parse(aaveBorrowRequestAmount),
  );
}

export function aaveBorrowRequestAmountFromJSON(
  jsonString: string,
): SafeParseResult<AaveBorrowRequestAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AaveBorrowRequestAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AaveBorrowRequestAmount' from JSON`,
  );
}

/** @internal */
export const AaveBorrowRequestChain$inboundSchema: z.ZodNativeEnum<
  typeof AaveBorrowRequestChain
> = z.nativeEnum(AaveBorrowRequestChain);

/** @internal */
export const AaveBorrowRequestChain$outboundSchema: z.ZodNativeEnum<
  typeof AaveBorrowRequestChain
> = AaveBorrowRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AaveBorrowRequestChain$ {
  /** @deprecated use `AaveBorrowRequestChain$inboundSchema` instead. */
  export const inboundSchema = AaveBorrowRequestChain$inboundSchema;
  /** @deprecated use `AaveBorrowRequestChain$outboundSchema` instead. */
  export const outboundSchema = AaveBorrowRequestChain$outboundSchema;
}

/** @internal */
export const AaveBorrowRequest$inboundSchema: z.ZodType<
  AaveBorrowRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("AAVE_BORROW").default("AAVE_BORROW"),
  token: z.string(),
  amount: z.union([z.number(), z.string()]),
  interest_rate_mode: InterestRateMode$inboundSchema,
  on_behalf_of: z.nullable(z.string()).optional(),
  chain: AaveBorrowRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "interest_rate_mode": "interestRateMode",
    "on_behalf_of": "onBehalfOf",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type AaveBorrowRequest$Outbound = {
  action_type: "AAVE_BORROW";
  token: string;
  amount: number | string;
  interest_rate_mode: string;
  on_behalf_of?: string | null | undefined;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const AaveBorrowRequest$outboundSchema: z.ZodType<
  AaveBorrowRequest$Outbound,
  z.ZodTypeDef,
  AaveBorrowRequest
> = z.object({
  actionType: z.literal("AAVE_BORROW").default("AAVE_BORROW" as const),
  token: z.string(),
  amount: z.union([z.number(), z.string()]),
  interestRateMode: InterestRateMode$outboundSchema,
  onBehalfOf: z.nullable(z.string()).optional(),
  chain: AaveBorrowRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    interestRateMode: "interest_rate_mode",
    onBehalfOf: "on_behalf_of",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AaveBorrowRequest$ {
  /** @deprecated use `AaveBorrowRequest$inboundSchema` instead. */
  export const inboundSchema = AaveBorrowRequest$inboundSchema;
  /** @deprecated use `AaveBorrowRequest$outboundSchema` instead. */
  export const outboundSchema = AaveBorrowRequest$outboundSchema;
  /** @deprecated use `AaveBorrowRequest$Outbound` instead. */
  export type Outbound = AaveBorrowRequest$Outbound;
}

export function aaveBorrowRequestToJSON(
  aaveBorrowRequest: AaveBorrowRequest,
): string {
  return JSON.stringify(
    AaveBorrowRequest$outboundSchema.parse(aaveBorrowRequest),
  );
}

export function aaveBorrowRequestFromJSON(
  jsonString: string,
): SafeParseResult<AaveBorrowRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AaveBorrowRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AaveBorrowRequest' from JSON`,
  );
}
