/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Amount of token to transfer
 */
export type TokenTransferRequestAmount = number | string;

export const TokenTransferRequestChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type TokenTransferRequestChain = ClosedEnum<
  typeof TokenTransferRequestChain
>;

/**
 * Request model for transferring ETH or ERC20 tokens.
 */
export type TokenTransferRequest = {
  actionType?: "TOKEN_TRANSFER" | undefined;
  /**
   * The recipient of the tokens.
   */
  to: string;
  /**
   * The symbol or address of the token to transfer.
   */
  token: string;
  /**
   * Amount of token to transfer
   */
  amount: number | string;
  chain: TokenTransferRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const TokenTransferRequestAmount$inboundSchema: z.ZodType<
  TokenTransferRequestAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type TokenTransferRequestAmount$Outbound = number | string;

/** @internal */
export const TokenTransferRequestAmount$outboundSchema: z.ZodType<
  TokenTransferRequestAmount$Outbound,
  z.ZodTypeDef,
  TokenTransferRequestAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TokenTransferRequestAmount$ {
  /** @deprecated use `TokenTransferRequestAmount$inboundSchema` instead. */
  export const inboundSchema = TokenTransferRequestAmount$inboundSchema;
  /** @deprecated use `TokenTransferRequestAmount$outboundSchema` instead. */
  export const outboundSchema = TokenTransferRequestAmount$outboundSchema;
  /** @deprecated use `TokenTransferRequestAmount$Outbound` instead. */
  export type Outbound = TokenTransferRequestAmount$Outbound;
}

export function tokenTransferRequestAmountToJSON(
  tokenTransferRequestAmount: TokenTransferRequestAmount,
): string {
  return JSON.stringify(
    TokenTransferRequestAmount$outboundSchema.parse(tokenTransferRequestAmount),
  );
}

export function tokenTransferRequestAmountFromJSON(
  jsonString: string,
): SafeParseResult<TokenTransferRequestAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TokenTransferRequestAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TokenTransferRequestAmount' from JSON`,
  );
}

/** @internal */
export const TokenTransferRequestChain$inboundSchema: z.ZodNativeEnum<
  typeof TokenTransferRequestChain
> = z.nativeEnum(TokenTransferRequestChain);

/** @internal */
export const TokenTransferRequestChain$outboundSchema: z.ZodNativeEnum<
  typeof TokenTransferRequestChain
> = TokenTransferRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TokenTransferRequestChain$ {
  /** @deprecated use `TokenTransferRequestChain$inboundSchema` instead. */
  export const inboundSchema = TokenTransferRequestChain$inboundSchema;
  /** @deprecated use `TokenTransferRequestChain$outboundSchema` instead. */
  export const outboundSchema = TokenTransferRequestChain$outboundSchema;
}

/** @internal */
export const TokenTransferRequest$inboundSchema: z.ZodType<
  TokenTransferRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("TOKEN_TRANSFER").default("TOKEN_TRANSFER"),
  to: z.string(),
  token: z.string(),
  amount: z.union([z.number(), z.string()]),
  chain: TokenTransferRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type TokenTransferRequest$Outbound = {
  action_type: "TOKEN_TRANSFER";
  to: string;
  token: string;
  amount: number | string;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const TokenTransferRequest$outboundSchema: z.ZodType<
  TokenTransferRequest$Outbound,
  z.ZodTypeDef,
  TokenTransferRequest
> = z.object({
  actionType: z.literal("TOKEN_TRANSFER").default("TOKEN_TRANSFER" as const),
  to: z.string(),
  token: z.string(),
  amount: z.union([z.number(), z.string()]),
  chain: TokenTransferRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace TokenTransferRequest$ {
  /** @deprecated use `TokenTransferRequest$inboundSchema` instead. */
  export const inboundSchema = TokenTransferRequest$inboundSchema;
  /** @deprecated use `TokenTransferRequest$outboundSchema` instead. */
  export const outboundSchema = TokenTransferRequest$outboundSchema;
  /** @deprecated use `TokenTransferRequest$Outbound` instead. */
  export type Outbound = TokenTransferRequest$Outbound;
}

export function tokenTransferRequestToJSON(
  tokenTransferRequest: TokenTransferRequest,
): string {
  return JSON.stringify(
    TokenTransferRequest$outboundSchema.parse(tokenTransferRequest),
  );
}

export function tokenTransferRequestFromJSON(
  jsonString: string,
): SafeParseResult<TokenTransferRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => TokenTransferRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'TokenTransferRequest' from JSON`,
  );
}
