/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The token you would like to swap 1:1 with USDS. Choose from DAI or USDC.
 */
export const SkySellRequestTokenOut = {
  Dai: "DAI",
  Usdc: "USDC",
} as const;
/**
 * The token you would like to swap 1:1 with USDS. Choose from DAI or USDC.
 */
export type SkySellRequestTokenOut = ClosedEnum<typeof SkySellRequestTokenOut>;

/**
 * The amount of USDS you would like to sell 1:1 for 'token_out'.
 */
export type SkySellRequestAmount = number | string;

export const SkySellRequestChain = {
  Ethereum: "ethereum",
} as const;
export type SkySellRequestChain = ClosedEnum<typeof SkySellRequestChain>;

export type SkySellRequest = {
  actionType?: "SKY_SELL" | undefined;
  /**
   * The token you would like to swap 1:1 with USDS. Choose from DAI or USDC.
   */
  tokenOut: SkySellRequestTokenOut;
  /**
   * The amount of USDS you would like to sell 1:1 for 'token_out'.
   */
  amount: number | string;
  chain: SkySellRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const SkySellRequestTokenOut$inboundSchema: z.ZodNativeEnum<
  typeof SkySellRequestTokenOut
> = z.nativeEnum(SkySellRequestTokenOut);

/** @internal */
export const SkySellRequestTokenOut$outboundSchema: z.ZodNativeEnum<
  typeof SkySellRequestTokenOut
> = SkySellRequestTokenOut$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkySellRequestTokenOut$ {
  /** @deprecated use `SkySellRequestTokenOut$inboundSchema` instead. */
  export const inboundSchema = SkySellRequestTokenOut$inboundSchema;
  /** @deprecated use `SkySellRequestTokenOut$outboundSchema` instead. */
  export const outboundSchema = SkySellRequestTokenOut$outboundSchema;
}

/** @internal */
export const SkySellRequestAmount$inboundSchema: z.ZodType<
  SkySellRequestAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type SkySellRequestAmount$Outbound = number | string;

/** @internal */
export const SkySellRequestAmount$outboundSchema: z.ZodType<
  SkySellRequestAmount$Outbound,
  z.ZodTypeDef,
  SkySellRequestAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkySellRequestAmount$ {
  /** @deprecated use `SkySellRequestAmount$inboundSchema` instead. */
  export const inboundSchema = SkySellRequestAmount$inboundSchema;
  /** @deprecated use `SkySellRequestAmount$outboundSchema` instead. */
  export const outboundSchema = SkySellRequestAmount$outboundSchema;
  /** @deprecated use `SkySellRequestAmount$Outbound` instead. */
  export type Outbound = SkySellRequestAmount$Outbound;
}

export function skySellRequestAmountToJSON(
  skySellRequestAmount: SkySellRequestAmount,
): string {
  return JSON.stringify(
    SkySellRequestAmount$outboundSchema.parse(skySellRequestAmount),
  );
}

export function skySellRequestAmountFromJSON(
  jsonString: string,
): SafeParseResult<SkySellRequestAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SkySellRequestAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SkySellRequestAmount' from JSON`,
  );
}

/** @internal */
export const SkySellRequestChain$inboundSchema: z.ZodNativeEnum<
  typeof SkySellRequestChain
> = z.nativeEnum(SkySellRequestChain);

/** @internal */
export const SkySellRequestChain$outboundSchema: z.ZodNativeEnum<
  typeof SkySellRequestChain
> = SkySellRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkySellRequestChain$ {
  /** @deprecated use `SkySellRequestChain$inboundSchema` instead. */
  export const inboundSchema = SkySellRequestChain$inboundSchema;
  /** @deprecated use `SkySellRequestChain$outboundSchema` instead. */
  export const outboundSchema = SkySellRequestChain$outboundSchema;
}

/** @internal */
export const SkySellRequest$inboundSchema: z.ZodType<
  SkySellRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("SKY_SELL").default("SKY_SELL"),
  token_out: SkySellRequestTokenOut$inboundSchema,
  amount: z.union([z.number(), z.string()]),
  chain: SkySellRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "token_out": "tokenOut",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type SkySellRequest$Outbound = {
  action_type: "SKY_SELL";
  token_out: string;
  amount: number | string;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const SkySellRequest$outboundSchema: z.ZodType<
  SkySellRequest$Outbound,
  z.ZodTypeDef,
  SkySellRequest
> = z.object({
  actionType: z.literal("SKY_SELL").default("SKY_SELL" as const),
  tokenOut: SkySellRequestTokenOut$outboundSchema,
  amount: z.union([z.number(), z.string()]),
  chain: SkySellRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    tokenOut: "token_out",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkySellRequest$ {
  /** @deprecated use `SkySellRequest$inboundSchema` instead. */
  export const inboundSchema = SkySellRequest$inboundSchema;
  /** @deprecated use `SkySellRequest$outboundSchema` instead. */
  export const outboundSchema = SkySellRequest$outboundSchema;
  /** @deprecated use `SkySellRequest$Outbound` instead. */
  export type Outbound = SkySellRequest$Outbound;
}

export function skySellRequestToJSON(skySellRequest: SkySellRequest): string {
  return JSON.stringify(SkySellRequest$outboundSchema.parse(skySellRequest));
}

export function skySellRequestFromJSON(
  jsonString: string,
): SafeParseResult<SkySellRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SkySellRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SkySellRequest' from JSON`,
  );
}
