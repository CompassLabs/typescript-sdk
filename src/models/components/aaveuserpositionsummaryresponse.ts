/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AaveUserPositionSummaryResponse = {
  /**
   * The loan to value ratio of a user.
   */
  maximumLoanToValueRatio: string;
  /**
   * The health factor of a user. If this is above 1 it is safe; below 1 and the
   *
   * @remarks
   *         user is in risk of liquidation. This number might be very high (which would mean the user is
   *         safe!)
   */
  healthFactor: string;
  /**
   * The total collateral (in USD) of a user.
   */
  totalCollateral: string;
  /**
   * The total debt (in USD) of a user.
   */
  totalDebt: string;
  /**
   * The available borrows (in USD) of a user.
   */
  availableBorrows: string;
  /**
   * The liquidation threshold of a user. A user might exceed this due to changing
   *
   * @remarks
   *         asset values.
   */
  liquidationThreshold: string;
};

/** @internal */
export const AaveUserPositionSummaryResponse$inboundSchema: z.ZodType<
  AaveUserPositionSummaryResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  maximum_loan_to_value_ratio: z.string(),
  health_factor: z.string(),
  total_collateral: z.string(),
  total_debt: z.string(),
  available_borrows: z.string(),
  liquidation_threshold: z.string(),
}).transform((v) => {
  return remap$(v, {
    "maximum_loan_to_value_ratio": "maximumLoanToValueRatio",
    "health_factor": "healthFactor",
    "total_collateral": "totalCollateral",
    "total_debt": "totalDebt",
    "available_borrows": "availableBorrows",
    "liquidation_threshold": "liquidationThreshold",
  });
});

/** @internal */
export type AaveUserPositionSummaryResponse$Outbound = {
  maximum_loan_to_value_ratio: string;
  health_factor: string;
  total_collateral: string;
  total_debt: string;
  available_borrows: string;
  liquidation_threshold: string;
};

/** @internal */
export const AaveUserPositionSummaryResponse$outboundSchema: z.ZodType<
  AaveUserPositionSummaryResponse$Outbound,
  z.ZodTypeDef,
  AaveUserPositionSummaryResponse
> = z.object({
  maximumLoanToValueRatio: z.string(),
  healthFactor: z.string(),
  totalCollateral: z.string(),
  totalDebt: z.string(),
  availableBorrows: z.string(),
  liquidationThreshold: z.string(),
}).transform((v) => {
  return remap$(v, {
    maximumLoanToValueRatio: "maximum_loan_to_value_ratio",
    healthFactor: "health_factor",
    totalCollateral: "total_collateral",
    totalDebt: "total_debt",
    availableBorrows: "available_borrows",
    liquidationThreshold: "liquidation_threshold",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AaveUserPositionSummaryResponse$ {
  /** @deprecated use `AaveUserPositionSummaryResponse$inboundSchema` instead. */
  export const inboundSchema = AaveUserPositionSummaryResponse$inboundSchema;
  /** @deprecated use `AaveUserPositionSummaryResponse$outboundSchema` instead. */
  export const outboundSchema = AaveUserPositionSummaryResponse$outboundSchema;
  /** @deprecated use `AaveUserPositionSummaryResponse$Outbound` instead. */
  export type Outbound = AaveUserPositionSummaryResponse$Outbound;
}

export function aaveUserPositionSummaryResponseToJSON(
  aaveUserPositionSummaryResponse: AaveUserPositionSummaryResponse,
): string {
  return JSON.stringify(
    AaveUserPositionSummaryResponse$outboundSchema.parse(
      aaveUserPositionSummaryResponse,
    ),
  );
}

export function aaveUserPositionSummaryResponseFromJSON(
  jsonString: string,
): SafeParseResult<AaveUserPositionSummaryResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AaveUserPositionSummaryResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AaveUserPositionSummaryResponse' from JSON`,
  );
}
