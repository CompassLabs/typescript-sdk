/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The desired amount of the first token to deposit
 */
export type UniswapIncreaseLiquidityProvisionParamsAmount0Desired =
  | number
  | string;

/**
 * The desired amount of the second token to deposit
 */
export type UniswapIncreaseLiquidityProvisionParamsAmount1Desired =
  | number
  | string;

/**
 * The minimum amount of the first token to deposit
 */
export type UniswapIncreaseLiquidityProvisionParamsAmount0Min = number | string;

/**
 * The minimum amount of the second token to deposit
 */
export type UniswapIncreaseLiquidityProvisionParamsAmount1Min = number | string;

export type UniswapIncreaseLiquidityProvisionParams = {
  actionType?: "UNISWAP_ADD_LIQUIDITY" | undefined;
  /**
   * Token ID of the NFT representing the liquidity provisioned position.
   */
  tokenId: number;
  /**
   * The desired amount of the first token to deposit
   */
  amount0Desired: number | string;
  /**
   * The desired amount of the second token to deposit
   */
  amount1Desired: number | string;
  /**
   * The minimum amount of the first token to deposit
   */
  amount0Min: number | string;
  /**
   * The minimum amount of the second token to deposit
   */
  amount1Min: number | string;
};

/** @internal */
export const UniswapIncreaseLiquidityProvisionParamsAmount0Desired$inboundSchema:
  z.ZodType<
    UniswapIncreaseLiquidityProvisionParamsAmount0Desired,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type UniswapIncreaseLiquidityProvisionParamsAmount0Desired$Outbound =
  | number
  | string;

/** @internal */
export const UniswapIncreaseLiquidityProvisionParamsAmount0Desired$outboundSchema:
  z.ZodType<
    UniswapIncreaseLiquidityProvisionParamsAmount0Desired$Outbound,
    z.ZodTypeDef,
    UniswapIncreaseLiquidityProvisionParamsAmount0Desired
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapIncreaseLiquidityProvisionParamsAmount0Desired$ {
  /** @deprecated use `UniswapIncreaseLiquidityProvisionParamsAmount0Desired$inboundSchema` instead. */
  export const inboundSchema =
    UniswapIncreaseLiquidityProvisionParamsAmount0Desired$inboundSchema;
  /** @deprecated use `UniswapIncreaseLiquidityProvisionParamsAmount0Desired$outboundSchema` instead. */
  export const outboundSchema =
    UniswapIncreaseLiquidityProvisionParamsAmount0Desired$outboundSchema;
  /** @deprecated use `UniswapIncreaseLiquidityProvisionParamsAmount0Desired$Outbound` instead. */
  export type Outbound =
    UniswapIncreaseLiquidityProvisionParamsAmount0Desired$Outbound;
}

export function uniswapIncreaseLiquidityProvisionParamsAmount0DesiredToJSON(
  uniswapIncreaseLiquidityProvisionParamsAmount0Desired:
    UniswapIncreaseLiquidityProvisionParamsAmount0Desired,
): string {
  return JSON.stringify(
    UniswapIncreaseLiquidityProvisionParamsAmount0Desired$outboundSchema.parse(
      uniswapIncreaseLiquidityProvisionParamsAmount0Desired,
    ),
  );
}

export function uniswapIncreaseLiquidityProvisionParamsAmount0DesiredFromJSON(
  jsonString: string,
): SafeParseResult<
  UniswapIncreaseLiquidityProvisionParamsAmount0Desired,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UniswapIncreaseLiquidityProvisionParamsAmount0Desired$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UniswapIncreaseLiquidityProvisionParamsAmount0Desired' from JSON`,
  );
}

/** @internal */
export const UniswapIncreaseLiquidityProvisionParamsAmount1Desired$inboundSchema:
  z.ZodType<
    UniswapIncreaseLiquidityProvisionParamsAmount1Desired,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type UniswapIncreaseLiquidityProvisionParamsAmount1Desired$Outbound =
  | number
  | string;

/** @internal */
export const UniswapIncreaseLiquidityProvisionParamsAmount1Desired$outboundSchema:
  z.ZodType<
    UniswapIncreaseLiquidityProvisionParamsAmount1Desired$Outbound,
    z.ZodTypeDef,
    UniswapIncreaseLiquidityProvisionParamsAmount1Desired
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapIncreaseLiquidityProvisionParamsAmount1Desired$ {
  /** @deprecated use `UniswapIncreaseLiquidityProvisionParamsAmount1Desired$inboundSchema` instead. */
  export const inboundSchema =
    UniswapIncreaseLiquidityProvisionParamsAmount1Desired$inboundSchema;
  /** @deprecated use `UniswapIncreaseLiquidityProvisionParamsAmount1Desired$outboundSchema` instead. */
  export const outboundSchema =
    UniswapIncreaseLiquidityProvisionParamsAmount1Desired$outboundSchema;
  /** @deprecated use `UniswapIncreaseLiquidityProvisionParamsAmount1Desired$Outbound` instead. */
  export type Outbound =
    UniswapIncreaseLiquidityProvisionParamsAmount1Desired$Outbound;
}

export function uniswapIncreaseLiquidityProvisionParamsAmount1DesiredToJSON(
  uniswapIncreaseLiquidityProvisionParamsAmount1Desired:
    UniswapIncreaseLiquidityProvisionParamsAmount1Desired,
): string {
  return JSON.stringify(
    UniswapIncreaseLiquidityProvisionParamsAmount1Desired$outboundSchema.parse(
      uniswapIncreaseLiquidityProvisionParamsAmount1Desired,
    ),
  );
}

export function uniswapIncreaseLiquidityProvisionParamsAmount1DesiredFromJSON(
  jsonString: string,
): SafeParseResult<
  UniswapIncreaseLiquidityProvisionParamsAmount1Desired,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UniswapIncreaseLiquidityProvisionParamsAmount1Desired$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UniswapIncreaseLiquidityProvisionParamsAmount1Desired' from JSON`,
  );
}

/** @internal */
export const UniswapIncreaseLiquidityProvisionParamsAmount0Min$inboundSchema:
  z.ZodType<
    UniswapIncreaseLiquidityProvisionParamsAmount0Min,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type UniswapIncreaseLiquidityProvisionParamsAmount0Min$Outbound =
  | number
  | string;

/** @internal */
export const UniswapIncreaseLiquidityProvisionParamsAmount0Min$outboundSchema:
  z.ZodType<
    UniswapIncreaseLiquidityProvisionParamsAmount0Min$Outbound,
    z.ZodTypeDef,
    UniswapIncreaseLiquidityProvisionParamsAmount0Min
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapIncreaseLiquidityProvisionParamsAmount0Min$ {
  /** @deprecated use `UniswapIncreaseLiquidityProvisionParamsAmount0Min$inboundSchema` instead. */
  export const inboundSchema =
    UniswapIncreaseLiquidityProvisionParamsAmount0Min$inboundSchema;
  /** @deprecated use `UniswapIncreaseLiquidityProvisionParamsAmount0Min$outboundSchema` instead. */
  export const outboundSchema =
    UniswapIncreaseLiquidityProvisionParamsAmount0Min$outboundSchema;
  /** @deprecated use `UniswapIncreaseLiquidityProvisionParamsAmount0Min$Outbound` instead. */
  export type Outbound =
    UniswapIncreaseLiquidityProvisionParamsAmount0Min$Outbound;
}

export function uniswapIncreaseLiquidityProvisionParamsAmount0MinToJSON(
  uniswapIncreaseLiquidityProvisionParamsAmount0Min:
    UniswapIncreaseLiquidityProvisionParamsAmount0Min,
): string {
  return JSON.stringify(
    UniswapIncreaseLiquidityProvisionParamsAmount0Min$outboundSchema.parse(
      uniswapIncreaseLiquidityProvisionParamsAmount0Min,
    ),
  );
}

export function uniswapIncreaseLiquidityProvisionParamsAmount0MinFromJSON(
  jsonString: string,
): SafeParseResult<
  UniswapIncreaseLiquidityProvisionParamsAmount0Min,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UniswapIncreaseLiquidityProvisionParamsAmount0Min$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UniswapIncreaseLiquidityProvisionParamsAmount0Min' from JSON`,
  );
}

/** @internal */
export const UniswapIncreaseLiquidityProvisionParamsAmount1Min$inboundSchema:
  z.ZodType<
    UniswapIncreaseLiquidityProvisionParamsAmount1Min,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type UniswapIncreaseLiquidityProvisionParamsAmount1Min$Outbound =
  | number
  | string;

/** @internal */
export const UniswapIncreaseLiquidityProvisionParamsAmount1Min$outboundSchema:
  z.ZodType<
    UniswapIncreaseLiquidityProvisionParamsAmount1Min$Outbound,
    z.ZodTypeDef,
    UniswapIncreaseLiquidityProvisionParamsAmount1Min
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapIncreaseLiquidityProvisionParamsAmount1Min$ {
  /** @deprecated use `UniswapIncreaseLiquidityProvisionParamsAmount1Min$inboundSchema` instead. */
  export const inboundSchema =
    UniswapIncreaseLiquidityProvisionParamsAmount1Min$inboundSchema;
  /** @deprecated use `UniswapIncreaseLiquidityProvisionParamsAmount1Min$outboundSchema` instead. */
  export const outboundSchema =
    UniswapIncreaseLiquidityProvisionParamsAmount1Min$outboundSchema;
  /** @deprecated use `UniswapIncreaseLiquidityProvisionParamsAmount1Min$Outbound` instead. */
  export type Outbound =
    UniswapIncreaseLiquidityProvisionParamsAmount1Min$Outbound;
}

export function uniswapIncreaseLiquidityProvisionParamsAmount1MinToJSON(
  uniswapIncreaseLiquidityProvisionParamsAmount1Min:
    UniswapIncreaseLiquidityProvisionParamsAmount1Min,
): string {
  return JSON.stringify(
    UniswapIncreaseLiquidityProvisionParamsAmount1Min$outboundSchema.parse(
      uniswapIncreaseLiquidityProvisionParamsAmount1Min,
    ),
  );
}

export function uniswapIncreaseLiquidityProvisionParamsAmount1MinFromJSON(
  jsonString: string,
): SafeParseResult<
  UniswapIncreaseLiquidityProvisionParamsAmount1Min,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UniswapIncreaseLiquidityProvisionParamsAmount1Min$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UniswapIncreaseLiquidityProvisionParamsAmount1Min' from JSON`,
  );
}

/** @internal */
export const UniswapIncreaseLiquidityProvisionParams$inboundSchema: z.ZodType<
  UniswapIncreaseLiquidityProvisionParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("UNISWAP_ADD_LIQUIDITY").default(
    "UNISWAP_ADD_LIQUIDITY",
  ),
  token_id: z.number().int(),
  amount0_desired: z.union([z.number(), z.string()]),
  amount1_desired: z.union([z.number(), z.string()]),
  amount0_min: z.union([z.number(), z.string()]),
  amount1_min: z.union([z.number(), z.string()]),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "token_id": "tokenId",
    "amount0_desired": "amount0Desired",
    "amount1_desired": "amount1Desired",
    "amount0_min": "amount0Min",
    "amount1_min": "amount1Min",
  });
});

/** @internal */
export type UniswapIncreaseLiquidityProvisionParams$Outbound = {
  action_type: "UNISWAP_ADD_LIQUIDITY";
  token_id: number;
  amount0_desired: number | string;
  amount1_desired: number | string;
  amount0_min: number | string;
  amount1_min: number | string;
};

/** @internal */
export const UniswapIncreaseLiquidityProvisionParams$outboundSchema: z.ZodType<
  UniswapIncreaseLiquidityProvisionParams$Outbound,
  z.ZodTypeDef,
  UniswapIncreaseLiquidityProvisionParams
> = z.object({
  actionType: z.literal("UNISWAP_ADD_LIQUIDITY").default(
    "UNISWAP_ADD_LIQUIDITY" as const,
  ),
  tokenId: z.number().int(),
  amount0Desired: z.union([z.number(), z.string()]),
  amount1Desired: z.union([z.number(), z.string()]),
  amount0Min: z.union([z.number(), z.string()]),
  amount1Min: z.union([z.number(), z.string()]),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    tokenId: "token_id",
    amount0Desired: "amount0_desired",
    amount1Desired: "amount1_desired",
    amount0Min: "amount0_min",
    amount1Min: "amount1_min",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapIncreaseLiquidityProvisionParams$ {
  /** @deprecated use `UniswapIncreaseLiquidityProvisionParams$inboundSchema` instead. */
  export const inboundSchema =
    UniswapIncreaseLiquidityProvisionParams$inboundSchema;
  /** @deprecated use `UniswapIncreaseLiquidityProvisionParams$outboundSchema` instead. */
  export const outboundSchema =
    UniswapIncreaseLiquidityProvisionParams$outboundSchema;
  /** @deprecated use `UniswapIncreaseLiquidityProvisionParams$Outbound` instead. */
  export type Outbound = UniswapIncreaseLiquidityProvisionParams$Outbound;
}

export function uniswapIncreaseLiquidityProvisionParamsToJSON(
  uniswapIncreaseLiquidityProvisionParams:
    UniswapIncreaseLiquidityProvisionParams,
): string {
  return JSON.stringify(
    UniswapIncreaseLiquidityProvisionParams$outboundSchema.parse(
      uniswapIncreaseLiquidityProvisionParams,
    ),
  );
}

export function uniswapIncreaseLiquidityProvisionParamsFromJSON(
  jsonString: string,
): SafeParseResult<
  UniswapIncreaseLiquidityProvisionParams,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UniswapIncreaseLiquidityProvisionParams$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UniswapIncreaseLiquidityProvisionParams' from JSON`,
  );
}
