/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The desired amount of the first token to deposit
 */
export type AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Desired =
  | number
  | string;

/**
 * The desired amount of the second token to deposit
 */
export type AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Desired =
  | number
  | string;

/**
 * The minimum amount of the first token to deposit
 */
export type AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Min =
  | number
  | string;

/**
 * The minimum amount of the second token to deposit
 */
export type AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Min =
  | number
  | string;

export const AerodromeSlipstreamIncreaseLiquidityProvisionRequestChain = {
  Base: "base",
} as const;
export type AerodromeSlipstreamIncreaseLiquidityProvisionRequestChain =
  ClosedEnum<typeof AerodromeSlipstreamIncreaseLiquidityProvisionRequestChain>;

export type AerodromeSlipstreamIncreaseLiquidityProvisionRequest = {
  actionType?: "AERODROME_SLIPSTREAM_INCREASE_LIQUIDITY_PROVISION" | undefined;
  /**
   * Token ID of the NFT representing the liquidity provisioned position.
   */
  tokenId: number;
  /**
   * The desired amount of the first token to deposit
   */
  amount0Desired: number | string;
  /**
   * The desired amount of the second token to deposit
   */
  amount1Desired: number | string;
  /**
   * The minimum amount of the first token to deposit
   */
  amount0Min: number | string;
  /**
   * The minimum amount of the second token to deposit
   */
  amount1Min: number | string;
  chain: AerodromeSlipstreamIncreaseLiquidityProvisionRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Desired$inboundSchema:
  z.ZodType<
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Desired,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Desired$Outbound =
  | number
  | string;

/** @internal */
export const AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Desired$outboundSchema:
  z.ZodType<
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Desired$Outbound,
    z.ZodTypeDef,
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Desired
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Desired$ {
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Desired$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Desired$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Desired$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Desired$outboundSchema;
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Desired$Outbound` instead. */
  export type Outbound =
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Desired$Outbound;
}

export function aerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0DesiredToJSON(
  aerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Desired:
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Desired,
): string {
  return JSON.stringify(
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Desired$outboundSchema
      .parse(
        aerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Desired,
      ),
  );
}

export function aerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0DesiredFromJSON(
  jsonString: string,
): SafeParseResult<
  AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Desired,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Desired$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Desired' from JSON`,
  );
}

/** @internal */
export const AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Desired$inboundSchema:
  z.ZodType<
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Desired,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Desired$Outbound =
  | number
  | string;

/** @internal */
export const AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Desired$outboundSchema:
  z.ZodType<
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Desired$Outbound,
    z.ZodTypeDef,
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Desired
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Desired$ {
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Desired$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Desired$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Desired$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Desired$outboundSchema;
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Desired$Outbound` instead. */
  export type Outbound =
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Desired$Outbound;
}

export function aerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1DesiredToJSON(
  aerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Desired:
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Desired,
): string {
  return JSON.stringify(
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Desired$outboundSchema
      .parse(
        aerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Desired,
      ),
  );
}

export function aerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1DesiredFromJSON(
  jsonString: string,
): SafeParseResult<
  AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Desired,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Desired$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Desired' from JSON`,
  );
}

/** @internal */
export const AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Min$inboundSchema:
  z.ZodType<
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Min,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Min$Outbound =
  | number
  | string;

/** @internal */
export const AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Min$outboundSchema:
  z.ZodType<
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Min$Outbound,
    z.ZodTypeDef,
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Min
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Min$ {
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Min$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Min$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Min$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Min$outboundSchema;
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Min$Outbound` instead. */
  export type Outbound =
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Min$Outbound;
}

export function aerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0MinToJSON(
  aerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Min:
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Min,
): string {
  return JSON.stringify(
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Min$outboundSchema
      .parse(aerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Min),
  );
}

export function aerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0MinFromJSON(
  jsonString: string,
): SafeParseResult<
  AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Min,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Min$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount0Min' from JSON`,
  );
}

/** @internal */
export const AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Min$inboundSchema:
  z.ZodType<
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Min,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Min$Outbound =
  | number
  | string;

/** @internal */
export const AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Min$outboundSchema:
  z.ZodType<
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Min$Outbound,
    z.ZodTypeDef,
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Min
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Min$ {
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Min$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Min$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Min$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Min$outboundSchema;
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Min$Outbound` instead. */
  export type Outbound =
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Min$Outbound;
}

export function aerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1MinToJSON(
  aerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Min:
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Min,
): string {
  return JSON.stringify(
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Min$outboundSchema
      .parse(aerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Min),
  );
}

export function aerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1MinFromJSON(
  jsonString: string,
): SafeParseResult<
  AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Min,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Min$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'AerodromeSlipstreamIncreaseLiquidityProvisionRequestAmount1Min' from JSON`,
  );
}

/** @internal */
export const AerodromeSlipstreamIncreaseLiquidityProvisionRequestChain$inboundSchema:
  z.ZodNativeEnum<
    typeof AerodromeSlipstreamIncreaseLiquidityProvisionRequestChain
  > = z.nativeEnum(AerodromeSlipstreamIncreaseLiquidityProvisionRequestChain);

/** @internal */
export const AerodromeSlipstreamIncreaseLiquidityProvisionRequestChain$outboundSchema:
  z.ZodNativeEnum<
    typeof AerodromeSlipstreamIncreaseLiquidityProvisionRequestChain
  > = AerodromeSlipstreamIncreaseLiquidityProvisionRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamIncreaseLiquidityProvisionRequestChain$ {
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionRequestChain$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestChain$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionRequestChain$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamIncreaseLiquidityProvisionRequestChain$outboundSchema;
}

/** @internal */
export const AerodromeSlipstreamIncreaseLiquidityProvisionRequest$inboundSchema:
  z.ZodType<
    AerodromeSlipstreamIncreaseLiquidityProvisionRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    action_type: z.literal("AERODROME_SLIPSTREAM_INCREASE_LIQUIDITY_PROVISION")
      .default("AERODROME_SLIPSTREAM_INCREASE_LIQUIDITY_PROVISION"),
    token_id: z.number().int(),
    amount0_desired: z.union([z.number(), z.string()]),
    amount1_desired: z.union([z.number(), z.string()]),
    amount0_min: z.union([z.number(), z.string()]),
    amount1_min: z.union([z.number(), z.string()]),
    chain:
      AerodromeSlipstreamIncreaseLiquidityProvisionRequestChain$inboundSchema,
    sender: z.string(),
    estimate_gas: z.boolean().default(true),
  }).transform((v) => {
    return remap$(v, {
      "action_type": "actionType",
      "token_id": "tokenId",
      "amount0_desired": "amount0Desired",
      "amount1_desired": "amount1Desired",
      "amount0_min": "amount0Min",
      "amount1_min": "amount1Min",
      "estimate_gas": "estimateGas",
    });
  });

/** @internal */
export type AerodromeSlipstreamIncreaseLiquidityProvisionRequest$Outbound = {
  action_type: "AERODROME_SLIPSTREAM_INCREASE_LIQUIDITY_PROVISION";
  token_id: number;
  amount0_desired: number | string;
  amount1_desired: number | string;
  amount0_min: number | string;
  amount1_min: number | string;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const AerodromeSlipstreamIncreaseLiquidityProvisionRequest$outboundSchema:
  z.ZodType<
    AerodromeSlipstreamIncreaseLiquidityProvisionRequest$Outbound,
    z.ZodTypeDef,
    AerodromeSlipstreamIncreaseLiquidityProvisionRequest
  > = z.object({
    actionType: z.literal("AERODROME_SLIPSTREAM_INCREASE_LIQUIDITY_PROVISION")
      .default("AERODROME_SLIPSTREAM_INCREASE_LIQUIDITY_PROVISION" as const),
    tokenId: z.number().int(),
    amount0Desired: z.union([z.number(), z.string()]),
    amount1Desired: z.union([z.number(), z.string()]),
    amount0Min: z.union([z.number(), z.string()]),
    amount1Min: z.union([z.number(), z.string()]),
    chain:
      AerodromeSlipstreamIncreaseLiquidityProvisionRequestChain$outboundSchema,
    sender: z.string(),
    estimateGas: z.boolean().default(true),
  }).transform((v) => {
    return remap$(v, {
      actionType: "action_type",
      tokenId: "token_id",
      amount0Desired: "amount0_desired",
      amount1Desired: "amount1_desired",
      amount0Min: "amount0_min",
      amount1Min: "amount1_min",
      estimateGas: "estimate_gas",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamIncreaseLiquidityProvisionRequest$ {
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionRequest$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamIncreaseLiquidityProvisionRequest$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionRequest$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamIncreaseLiquidityProvisionRequest$outboundSchema;
  /** @deprecated use `AerodromeSlipstreamIncreaseLiquidityProvisionRequest$Outbound` instead. */
  export type Outbound =
    AerodromeSlipstreamIncreaseLiquidityProvisionRequest$Outbound;
}

export function aerodromeSlipstreamIncreaseLiquidityProvisionRequestToJSON(
  aerodromeSlipstreamIncreaseLiquidityProvisionRequest:
    AerodromeSlipstreamIncreaseLiquidityProvisionRequest,
): string {
  return JSON.stringify(
    AerodromeSlipstreamIncreaseLiquidityProvisionRequest$outboundSchema.parse(
      aerodromeSlipstreamIncreaseLiquidityProvisionRequest,
    ),
  );
}

export function aerodromeSlipstreamIncreaseLiquidityProvisionRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  AerodromeSlipstreamIncreaseLiquidityProvisionRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AerodromeSlipstreamIncreaseLiquidityProvisionRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AerodromeSlipstreamIncreaseLiquidityProvisionRequest' from JSON`,
  );
}
