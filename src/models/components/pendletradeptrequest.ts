/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Specifies the direction of the PT trade. Valid values are `BUY` (to buy PT) or `SELL` (to sell PT).
 */
export const PendleTradePtRequestAction = {
  Buy: "BUY",
  Sell: "SELL",
} as const;
/**
 * Specifies the direction of the PT trade. Valid values are `BUY` (to buy PT) or `SELL` (to sell PT).
 */
export type PendleTradePtRequestAction = ClosedEnum<
  typeof PendleTradePtRequestAction
>;

/**
 * For `action` set to `BUY`, this is the amount in of `token` to buy PT with. For `action` set to `SELL`, this is the amount in of PT to sell for `token`.
 */
export type PendleTradePtRequestAmountIn = number | string;

export const PendleTradePtRequestChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type PendleTradePtRequestChain = ClosedEnum<
  typeof PendleTradePtRequestChain
>;

export type PendleTradePtRequest = {
  actionType?: "PENDLE_TRADE_PT" | undefined;
  /**
   * The address of the market identifying which Principal Token (PT) you would like to trade.
   */
  marketAddress: string;
  /**
   * Specifies the direction of the PT trade. Valid values are `BUY` (to buy PT) or `SELL` (to sell PT).
   */
  action: PendleTradePtRequestAction;
  /**
   * TThe symbol or address of the token to trade PT with. For `action` set to `BUY`, this is the token to buy PT with. For `action` set to `SELL`, this is the token to sell PT for.
   */
  token: string;
  /**
   * For `action` set to `BUY`, this is the amount in of `token` to buy PT with. For `action` set to `SELL`, this is the amount in of PT to sell for `token`.
   */
  amountIn: number | string;
  /**
   * The maximum slippage allowed in percent. e.g. `1` means `1%` slippage allowed.
   */
  maxSlippagePercent: number;
  chain: PendleTradePtRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const PendleTradePtRequestAction$inboundSchema: z.ZodNativeEnum<
  typeof PendleTradePtRequestAction
> = z.nativeEnum(PendleTradePtRequestAction);

/** @internal */
export const PendleTradePtRequestAction$outboundSchema: z.ZodNativeEnum<
  typeof PendleTradePtRequestAction
> = PendleTradePtRequestAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendleTradePtRequestAction$ {
  /** @deprecated use `PendleTradePtRequestAction$inboundSchema` instead. */
  export const inboundSchema = PendleTradePtRequestAction$inboundSchema;
  /** @deprecated use `PendleTradePtRequestAction$outboundSchema` instead. */
  export const outboundSchema = PendleTradePtRequestAction$outboundSchema;
}

/** @internal */
export const PendleTradePtRequestAmountIn$inboundSchema: z.ZodType<
  PendleTradePtRequestAmountIn,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type PendleTradePtRequestAmountIn$Outbound = number | string;

/** @internal */
export const PendleTradePtRequestAmountIn$outboundSchema: z.ZodType<
  PendleTradePtRequestAmountIn$Outbound,
  z.ZodTypeDef,
  PendleTradePtRequestAmountIn
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendleTradePtRequestAmountIn$ {
  /** @deprecated use `PendleTradePtRequestAmountIn$inboundSchema` instead. */
  export const inboundSchema = PendleTradePtRequestAmountIn$inboundSchema;
  /** @deprecated use `PendleTradePtRequestAmountIn$outboundSchema` instead. */
  export const outboundSchema = PendleTradePtRequestAmountIn$outboundSchema;
  /** @deprecated use `PendleTradePtRequestAmountIn$Outbound` instead. */
  export type Outbound = PendleTradePtRequestAmountIn$Outbound;
}

export function pendleTradePtRequestAmountInToJSON(
  pendleTradePtRequestAmountIn: PendleTradePtRequestAmountIn,
): string {
  return JSON.stringify(
    PendleTradePtRequestAmountIn$outboundSchema.parse(
      pendleTradePtRequestAmountIn,
    ),
  );
}

export function pendleTradePtRequestAmountInFromJSON(
  jsonString: string,
): SafeParseResult<PendleTradePtRequestAmountIn, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PendleTradePtRequestAmountIn$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendleTradePtRequestAmountIn' from JSON`,
  );
}

/** @internal */
export const PendleTradePtRequestChain$inboundSchema: z.ZodNativeEnum<
  typeof PendleTradePtRequestChain
> = z.nativeEnum(PendleTradePtRequestChain);

/** @internal */
export const PendleTradePtRequestChain$outboundSchema: z.ZodNativeEnum<
  typeof PendleTradePtRequestChain
> = PendleTradePtRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendleTradePtRequestChain$ {
  /** @deprecated use `PendleTradePtRequestChain$inboundSchema` instead. */
  export const inboundSchema = PendleTradePtRequestChain$inboundSchema;
  /** @deprecated use `PendleTradePtRequestChain$outboundSchema` instead. */
  export const outboundSchema = PendleTradePtRequestChain$outboundSchema;
}

/** @internal */
export const PendleTradePtRequest$inboundSchema: z.ZodType<
  PendleTradePtRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("PENDLE_TRADE_PT").default("PENDLE_TRADE_PT"),
  market_address: z.string(),
  action: PendleTradePtRequestAction$inboundSchema,
  token: z.string(),
  amount_in: z.union([z.number(), z.string()]),
  max_slippage_percent: z.number(),
  chain: PendleTradePtRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "market_address": "marketAddress",
    "amount_in": "amountIn",
    "max_slippage_percent": "maxSlippagePercent",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type PendleTradePtRequest$Outbound = {
  action_type: "PENDLE_TRADE_PT";
  market_address: string;
  action: string;
  token: string;
  amount_in: number | string;
  max_slippage_percent: number;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const PendleTradePtRequest$outboundSchema: z.ZodType<
  PendleTradePtRequest$Outbound,
  z.ZodTypeDef,
  PendleTradePtRequest
> = z.object({
  actionType: z.literal("PENDLE_TRADE_PT").default("PENDLE_TRADE_PT" as const),
  marketAddress: z.string(),
  action: PendleTradePtRequestAction$outboundSchema,
  token: z.string(),
  amountIn: z.union([z.number(), z.string()]),
  maxSlippagePercent: z.number(),
  chain: PendleTradePtRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    marketAddress: "market_address",
    amountIn: "amount_in",
    maxSlippagePercent: "max_slippage_percent",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendleTradePtRequest$ {
  /** @deprecated use `PendleTradePtRequest$inboundSchema` instead. */
  export const inboundSchema = PendleTradePtRequest$inboundSchema;
  /** @deprecated use `PendleTradePtRequest$outboundSchema` instead. */
  export const outboundSchema = PendleTradePtRequest$outboundSchema;
  /** @deprecated use `PendleTradePtRequest$Outbound` instead. */
  export type Outbound = PendleTradePtRequest$Outbound;
}

export function pendleTradePtRequestToJSON(
  pendleTradePtRequest: PendleTradePtRequest,
): string {
  return JSON.stringify(
    PendleTradePtRequest$outboundSchema.parse(pendleTradePtRequest),
  );
}

export function pendleTradePtRequestFromJSON(
  jsonString: string,
): SafeParseResult<PendleTradePtRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PendleTradePtRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendleTradePtRequest' from JSON`,
  );
}
