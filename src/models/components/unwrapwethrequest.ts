/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The amount of WETH to unwrap.
 */
export type UnwrapWethRequestAmount = number | string;

export const UnwrapWethRequestChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type UnwrapWethRequestChain = ClosedEnum<typeof UnwrapWethRequestChain>;

/**
 * Request model for unwrapping WETH back to native ETH.
 */
export type UnwrapWethRequest = {
  actionType?: "UNWRAP_WETH" | undefined;
  /**
   * The amount of WETH to unwrap.
   */
  amount: number | string;
  chain: UnwrapWethRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const UnwrapWethRequestAmount$inboundSchema: z.ZodType<
  UnwrapWethRequestAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type UnwrapWethRequestAmount$Outbound = number | string;

/** @internal */
export const UnwrapWethRequestAmount$outboundSchema: z.ZodType<
  UnwrapWethRequestAmount$Outbound,
  z.ZodTypeDef,
  UnwrapWethRequestAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnwrapWethRequestAmount$ {
  /** @deprecated use `UnwrapWethRequestAmount$inboundSchema` instead. */
  export const inboundSchema = UnwrapWethRequestAmount$inboundSchema;
  /** @deprecated use `UnwrapWethRequestAmount$outboundSchema` instead. */
  export const outboundSchema = UnwrapWethRequestAmount$outboundSchema;
  /** @deprecated use `UnwrapWethRequestAmount$Outbound` instead. */
  export type Outbound = UnwrapWethRequestAmount$Outbound;
}

export function unwrapWethRequestAmountToJSON(
  unwrapWethRequestAmount: UnwrapWethRequestAmount,
): string {
  return JSON.stringify(
    UnwrapWethRequestAmount$outboundSchema.parse(unwrapWethRequestAmount),
  );
}

export function unwrapWethRequestAmountFromJSON(
  jsonString: string,
): SafeParseResult<UnwrapWethRequestAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnwrapWethRequestAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnwrapWethRequestAmount' from JSON`,
  );
}

/** @internal */
export const UnwrapWethRequestChain$inboundSchema: z.ZodNativeEnum<
  typeof UnwrapWethRequestChain
> = z.nativeEnum(UnwrapWethRequestChain);

/** @internal */
export const UnwrapWethRequestChain$outboundSchema: z.ZodNativeEnum<
  typeof UnwrapWethRequestChain
> = UnwrapWethRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnwrapWethRequestChain$ {
  /** @deprecated use `UnwrapWethRequestChain$inboundSchema` instead. */
  export const inboundSchema = UnwrapWethRequestChain$inboundSchema;
  /** @deprecated use `UnwrapWethRequestChain$outboundSchema` instead. */
  export const outboundSchema = UnwrapWethRequestChain$outboundSchema;
}

/** @internal */
export const UnwrapWethRequest$inboundSchema: z.ZodType<
  UnwrapWethRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("UNWRAP_WETH").default("UNWRAP_WETH"),
  amount: z.union([z.number(), z.string()]),
  chain: UnwrapWethRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type UnwrapWethRequest$Outbound = {
  action_type: "UNWRAP_WETH";
  amount: number | string;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const UnwrapWethRequest$outboundSchema: z.ZodType<
  UnwrapWethRequest$Outbound,
  z.ZodTypeDef,
  UnwrapWethRequest
> = z.object({
  actionType: z.literal("UNWRAP_WETH").default("UNWRAP_WETH" as const),
  amount: z.union([z.number(), z.string()]),
  chain: UnwrapWethRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnwrapWethRequest$ {
  /** @deprecated use `UnwrapWethRequest$inboundSchema` instead. */
  export const inboundSchema = UnwrapWethRequest$inboundSchema;
  /** @deprecated use `UnwrapWethRequest$outboundSchema` instead. */
  export const outboundSchema = UnwrapWethRequest$outboundSchema;
  /** @deprecated use `UnwrapWethRequest$Outbound` instead. */
  export type Outbound = UnwrapWethRequest$Outbound;
}

export function unwrapWethRequestToJSON(
  unwrapWethRequest: UnwrapWethRequest,
): string {
  return JSON.stringify(
    UnwrapWethRequest$outboundSchema.parse(unwrapWethRequest),
  );
}

export function unwrapWethRequestFromJSON(
  jsonString: string,
): SafeParseResult<UnwrapWethRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnwrapWethRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnwrapWethRequest' from JSON`,
  );
}
