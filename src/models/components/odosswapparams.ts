/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The amount of token_in to be sold.
 */
export type OdosSwapParamsAmount = number | string;

export type OdosSwapParams = {
  actionType?: "ODOS_SWAP" | undefined;
  /**
   * The symbol or address of the token that is to be sold.
   */
  tokenIn: string;
  /**
   * The symbol or address of the token that is to be bought.
   */
  tokenOut: string;
  /**
   * The amount of token_in to be sold.
   */
  amount: number | string;
  /**
   * The maximum slippage allowed in percent. e.g. `1` means `1%` slippage allowed.
   */
  maxSlippagePercent: number;
};

/** @internal */
export const OdosSwapParamsAmount$inboundSchema: z.ZodType<
  OdosSwapParamsAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type OdosSwapParamsAmount$Outbound = number | string;

/** @internal */
export const OdosSwapParamsAmount$outboundSchema: z.ZodType<
  OdosSwapParamsAmount$Outbound,
  z.ZodTypeDef,
  OdosSwapParamsAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OdosSwapParamsAmount$ {
  /** @deprecated use `OdosSwapParamsAmount$inboundSchema` instead. */
  export const inboundSchema = OdosSwapParamsAmount$inboundSchema;
  /** @deprecated use `OdosSwapParamsAmount$outboundSchema` instead. */
  export const outboundSchema = OdosSwapParamsAmount$outboundSchema;
  /** @deprecated use `OdosSwapParamsAmount$Outbound` instead. */
  export type Outbound = OdosSwapParamsAmount$Outbound;
}

export function odosSwapParamsAmountToJSON(
  odosSwapParamsAmount: OdosSwapParamsAmount,
): string {
  return JSON.stringify(
    OdosSwapParamsAmount$outboundSchema.parse(odosSwapParamsAmount),
  );
}

export function odosSwapParamsAmountFromJSON(
  jsonString: string,
): SafeParseResult<OdosSwapParamsAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OdosSwapParamsAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OdosSwapParamsAmount' from JSON`,
  );
}

/** @internal */
export const OdosSwapParams$inboundSchema: z.ZodType<
  OdosSwapParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("ODOS_SWAP").default("ODOS_SWAP"),
  token_in: z.string(),
  token_out: z.string(),
  amount: z.union([z.number(), z.string()]),
  max_slippage_percent: z.number(),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "token_in": "tokenIn",
    "token_out": "tokenOut",
    "max_slippage_percent": "maxSlippagePercent",
  });
});

/** @internal */
export type OdosSwapParams$Outbound = {
  action_type: "ODOS_SWAP";
  token_in: string;
  token_out: string;
  amount: number | string;
  max_slippage_percent: number;
};

/** @internal */
export const OdosSwapParams$outboundSchema: z.ZodType<
  OdosSwapParams$Outbound,
  z.ZodTypeDef,
  OdosSwapParams
> = z.object({
  actionType: z.literal("ODOS_SWAP").default("ODOS_SWAP" as const),
  tokenIn: z.string(),
  tokenOut: z.string(),
  amount: z.union([z.number(), z.string()]),
  maxSlippagePercent: z.number(),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    tokenIn: "token_in",
    tokenOut: "token_out",
    maxSlippagePercent: "max_slippage_percent",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OdosSwapParams$ {
  /** @deprecated use `OdosSwapParams$inboundSchema` instead. */
  export const inboundSchema = OdosSwapParams$inboundSchema;
  /** @deprecated use `OdosSwapParams$outboundSchema` instead. */
  export const outboundSchema = OdosSwapParams$outboundSchema;
  /** @deprecated use `OdosSwapParams$Outbound` instead. */
  export type Outbound = OdosSwapParams$Outbound;
}

export function odosSwapParamsToJSON(odosSwapParams: OdosSwapParams): string {
  return JSON.stringify(OdosSwapParams$outboundSchema.parse(odosSwapParams));
}

export function odosSwapParamsFromJSON(
  jsonString: string,
): SafeParseResult<OdosSwapParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OdosSwapParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OdosSwapParams' from JSON`,
  );
}
