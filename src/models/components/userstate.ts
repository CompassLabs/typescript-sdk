/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UserState = {
  vaultsPnlUsd: string | null;
  vaultsAssetsUsd: string;
  marketsPnlUsd: string | null;
  marketsBorrowAssetsUsd: string;
  marketsCollateralUsd: string;
  marketsSupplyAssetsUsd: string;
};

/** @internal */
export const UserState$inboundSchema: z.ZodType<
  UserState,
  z.ZodTypeDef,
  unknown
> = z.object({
  vaultsPnlUsd: z.nullable(z.string()),
  vaultsAssetsUsd: z.string(),
  marketsPnlUsd: z.nullable(z.string()),
  marketsBorrowAssetsUsd: z.string(),
  marketsCollateralUsd: z.string(),
  marketsSupplyAssetsUsd: z.string(),
});

/** @internal */
export type UserState$Outbound = {
  vaultsPnlUsd: string | null;
  vaultsAssetsUsd: string;
  marketsPnlUsd: string | null;
  marketsBorrowAssetsUsd: string;
  marketsCollateralUsd: string;
  marketsSupplyAssetsUsd: string;
};

/** @internal */
export const UserState$outboundSchema: z.ZodType<
  UserState$Outbound,
  z.ZodTypeDef,
  UserState
> = z.object({
  vaultsPnlUsd: z.nullable(z.string()),
  vaultsAssetsUsd: z.string(),
  marketsPnlUsd: z.nullable(z.string()),
  marketsBorrowAssetsUsd: z.string(),
  marketsCollateralUsd: z.string(),
  marketsSupplyAssetsUsd: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserState$ {
  /** @deprecated use `UserState$inboundSchema` instead. */
  export const inboundSchema = UserState$inboundSchema;
  /** @deprecated use `UserState$outboundSchema` instead. */
  export const outboundSchema = UserState$outboundSchema;
  /** @deprecated use `UserState$Outbound` instead. */
  export type Outbound = UserState$Outbound;
}

export function userStateToJSON(userState: UserState): string {
  return JSON.stringify(UserState$outboundSchema.parse(userState));
}

export function userStateFromJSON(
  jsonString: string,
): SafeParseResult<UserState, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserState$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserState' from JSON`,
  );
}
