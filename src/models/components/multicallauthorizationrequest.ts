/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const MulticallAuthorizationRequestChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type MulticallAuthorizationRequestChain = ClosedEnum<
  typeof MulticallAuthorizationRequestChain
>;

/**
 * Request model for getting a multicall authorization.
 *
 * @remarks
 *
 * This model is used to authorize a sender address to perform multicall operations,
 * allowing it to call multiple functions on multiple contracts in a single
 * transaction.
 */
export type MulticallAuthorizationRequest = {
  chain: MulticallAuthorizationRequestChain;
  /**
   * The Ethereum address to use for authorization
   */
  sender: string;
};

/** @internal */
export const MulticallAuthorizationRequestChain$inboundSchema: z.ZodNativeEnum<
  typeof MulticallAuthorizationRequestChain
> = z.nativeEnum(MulticallAuthorizationRequestChain);

/** @internal */
export const MulticallAuthorizationRequestChain$outboundSchema: z.ZodNativeEnum<
  typeof MulticallAuthorizationRequestChain
> = MulticallAuthorizationRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MulticallAuthorizationRequestChain$ {
  /** @deprecated use `MulticallAuthorizationRequestChain$inboundSchema` instead. */
  export const inboundSchema = MulticallAuthorizationRequestChain$inboundSchema;
  /** @deprecated use `MulticallAuthorizationRequestChain$outboundSchema` instead. */
  export const outboundSchema =
    MulticallAuthorizationRequestChain$outboundSchema;
}

/** @internal */
export const MulticallAuthorizationRequest$inboundSchema: z.ZodType<
  MulticallAuthorizationRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chain: MulticallAuthorizationRequestChain$inboundSchema,
  sender: z.string(),
});

/** @internal */
export type MulticallAuthorizationRequest$Outbound = {
  chain: string;
  sender: string;
};

/** @internal */
export const MulticallAuthorizationRequest$outboundSchema: z.ZodType<
  MulticallAuthorizationRequest$Outbound,
  z.ZodTypeDef,
  MulticallAuthorizationRequest
> = z.object({
  chain: MulticallAuthorizationRequestChain$outboundSchema,
  sender: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MulticallAuthorizationRequest$ {
  /** @deprecated use `MulticallAuthorizationRequest$inboundSchema` instead. */
  export const inboundSchema = MulticallAuthorizationRequest$inboundSchema;
  /** @deprecated use `MulticallAuthorizationRequest$outboundSchema` instead. */
  export const outboundSchema = MulticallAuthorizationRequest$outboundSchema;
  /** @deprecated use `MulticallAuthorizationRequest$Outbound` instead. */
  export type Outbound = MulticallAuthorizationRequest$Outbound;
}

export function multicallAuthorizationRequestToJSON(
  multicallAuthorizationRequest: MulticallAuthorizationRequest,
): string {
  return JSON.stringify(
    MulticallAuthorizationRequest$outboundSchema.parse(
      multicallAuthorizationRequest,
    ),
  );
}

export function multicallAuthorizationRequestFromJSON(
  jsonString: string,
): SafeParseResult<MulticallAuthorizationRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MulticallAuthorizationRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MulticallAuthorizationRequest' from JSON`,
  );
}
