/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The amount of the asset to withdraw
 */
export type AaveWithdrawRequestAmount = number | string;

export const AaveWithdrawRequestChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type AaveWithdrawRequestChain = ClosedEnum<
  typeof AaveWithdrawRequestChain
>;

export type AaveWithdrawRequest = {
  actionType?: "AAVE_WITHDRAW" | undefined;
  /**
   * The symbol of the underlying asset to withdraw..
   */
  token: string;
  /**
   * The amount of the asset to withdraw
   */
  amount: number | string;
  /**
   * The address of the recipient of the withdrawn funds.
   */
  recipient: string;
  chain: AaveWithdrawRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const AaveWithdrawRequestAmount$inboundSchema: z.ZodType<
  AaveWithdrawRequestAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type AaveWithdrawRequestAmount$Outbound = number | string;

/** @internal */
export const AaveWithdrawRequestAmount$outboundSchema: z.ZodType<
  AaveWithdrawRequestAmount$Outbound,
  z.ZodTypeDef,
  AaveWithdrawRequestAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AaveWithdrawRequestAmount$ {
  /** @deprecated use `AaveWithdrawRequestAmount$inboundSchema` instead. */
  export const inboundSchema = AaveWithdrawRequestAmount$inboundSchema;
  /** @deprecated use `AaveWithdrawRequestAmount$outboundSchema` instead. */
  export const outboundSchema = AaveWithdrawRequestAmount$outboundSchema;
  /** @deprecated use `AaveWithdrawRequestAmount$Outbound` instead. */
  export type Outbound = AaveWithdrawRequestAmount$Outbound;
}

export function aaveWithdrawRequestAmountToJSON(
  aaveWithdrawRequestAmount: AaveWithdrawRequestAmount,
): string {
  return JSON.stringify(
    AaveWithdrawRequestAmount$outboundSchema.parse(aaveWithdrawRequestAmount),
  );
}

export function aaveWithdrawRequestAmountFromJSON(
  jsonString: string,
): SafeParseResult<AaveWithdrawRequestAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AaveWithdrawRequestAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AaveWithdrawRequestAmount' from JSON`,
  );
}

/** @internal */
export const AaveWithdrawRequestChain$inboundSchema: z.ZodNativeEnum<
  typeof AaveWithdrawRequestChain
> = z.nativeEnum(AaveWithdrawRequestChain);

/** @internal */
export const AaveWithdrawRequestChain$outboundSchema: z.ZodNativeEnum<
  typeof AaveWithdrawRequestChain
> = AaveWithdrawRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AaveWithdrawRequestChain$ {
  /** @deprecated use `AaveWithdrawRequestChain$inboundSchema` instead. */
  export const inboundSchema = AaveWithdrawRequestChain$inboundSchema;
  /** @deprecated use `AaveWithdrawRequestChain$outboundSchema` instead. */
  export const outboundSchema = AaveWithdrawRequestChain$outboundSchema;
}

/** @internal */
export const AaveWithdrawRequest$inboundSchema: z.ZodType<
  AaveWithdrawRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("AAVE_WITHDRAW").default("AAVE_WITHDRAW"),
  token: z.string(),
  amount: z.union([z.number(), z.string()]),
  recipient: z.string(),
  chain: AaveWithdrawRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type AaveWithdrawRequest$Outbound = {
  action_type: "AAVE_WITHDRAW";
  token: string;
  amount: number | string;
  recipient: string;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const AaveWithdrawRequest$outboundSchema: z.ZodType<
  AaveWithdrawRequest$Outbound,
  z.ZodTypeDef,
  AaveWithdrawRequest
> = z.object({
  actionType: z.literal("AAVE_WITHDRAW").default("AAVE_WITHDRAW" as const),
  token: z.string(),
  amount: z.union([z.number(), z.string()]),
  recipient: z.string(),
  chain: AaveWithdrawRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AaveWithdrawRequest$ {
  /** @deprecated use `AaveWithdrawRequest$inboundSchema` instead. */
  export const inboundSchema = AaveWithdrawRequest$inboundSchema;
  /** @deprecated use `AaveWithdrawRequest$outboundSchema` instead. */
  export const outboundSchema = AaveWithdrawRequest$outboundSchema;
  /** @deprecated use `AaveWithdrawRequest$Outbound` instead. */
  export type Outbound = AaveWithdrawRequest$Outbound;
}

export function aaveWithdrawRequestToJSON(
  aaveWithdrawRequest: AaveWithdrawRequest,
): string {
  return JSON.stringify(
    AaveWithdrawRequest$outboundSchema.parse(aaveWithdrawRequest),
  );
}

export function aaveWithdrawRequestFromJSON(
  jsonString: string,
): SafeParseResult<AaveWithdrawRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AaveWithdrawRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AaveWithdrawRequest' from JSON`,
  );
}
