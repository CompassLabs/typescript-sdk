/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The amount of ETH to wrap.
 */
export type WrapEthRequestAmount = number | string;

export const WrapEthRequestChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type WrapEthRequestChain = ClosedEnum<typeof WrapEthRequestChain>;

/**
 * Request model for wrapping ETH into WETH.
 */
export type WrapEthRequest = {
  actionType?: "WRAP_ETH" | undefined;
  /**
   * The amount of ETH to wrap.
   */
  amount: number | string;
  chain: WrapEthRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const WrapEthRequestAmount$inboundSchema: z.ZodType<
  WrapEthRequestAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type WrapEthRequestAmount$Outbound = number | string;

/** @internal */
export const WrapEthRequestAmount$outboundSchema: z.ZodType<
  WrapEthRequestAmount$Outbound,
  z.ZodTypeDef,
  WrapEthRequestAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WrapEthRequestAmount$ {
  /** @deprecated use `WrapEthRequestAmount$inboundSchema` instead. */
  export const inboundSchema = WrapEthRequestAmount$inboundSchema;
  /** @deprecated use `WrapEthRequestAmount$outboundSchema` instead. */
  export const outboundSchema = WrapEthRequestAmount$outboundSchema;
  /** @deprecated use `WrapEthRequestAmount$Outbound` instead. */
  export type Outbound = WrapEthRequestAmount$Outbound;
}

export function wrapEthRequestAmountToJSON(
  wrapEthRequestAmount: WrapEthRequestAmount,
): string {
  return JSON.stringify(
    WrapEthRequestAmount$outboundSchema.parse(wrapEthRequestAmount),
  );
}

export function wrapEthRequestAmountFromJSON(
  jsonString: string,
): SafeParseResult<WrapEthRequestAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WrapEthRequestAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WrapEthRequestAmount' from JSON`,
  );
}

/** @internal */
export const WrapEthRequestChain$inboundSchema: z.ZodNativeEnum<
  typeof WrapEthRequestChain
> = z.nativeEnum(WrapEthRequestChain);

/** @internal */
export const WrapEthRequestChain$outboundSchema: z.ZodNativeEnum<
  typeof WrapEthRequestChain
> = WrapEthRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WrapEthRequestChain$ {
  /** @deprecated use `WrapEthRequestChain$inboundSchema` instead. */
  export const inboundSchema = WrapEthRequestChain$inboundSchema;
  /** @deprecated use `WrapEthRequestChain$outboundSchema` instead. */
  export const outboundSchema = WrapEthRequestChain$outboundSchema;
}

/** @internal */
export const WrapEthRequest$inboundSchema: z.ZodType<
  WrapEthRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("WRAP_ETH").default("WRAP_ETH"),
  amount: z.union([z.number(), z.string()]),
  chain: WrapEthRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type WrapEthRequest$Outbound = {
  action_type: "WRAP_ETH";
  amount: number | string;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const WrapEthRequest$outboundSchema: z.ZodType<
  WrapEthRequest$Outbound,
  z.ZodTypeDef,
  WrapEthRequest
> = z.object({
  actionType: z.literal("WRAP_ETH").default("WRAP_ETH" as const),
  amount: z.union([z.number(), z.string()]),
  chain: WrapEthRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WrapEthRequest$ {
  /** @deprecated use `WrapEthRequest$inboundSchema` instead. */
  export const inboundSchema = WrapEthRequest$inboundSchema;
  /** @deprecated use `WrapEthRequest$outboundSchema` instead. */
  export const outboundSchema = WrapEthRequest$outboundSchema;
  /** @deprecated use `WrapEthRequest$Outbound` instead. */
  export type Outbound = WrapEthRequest$Outbound;
}

export function wrapEthRequestToJSON(wrapEthRequest: WrapEthRequest): string {
  return JSON.stringify(WrapEthRequest$outboundSchema.parse(wrapEthRequest));
}

export function wrapEthRequestFromJSON(
  jsonString: string,
): SafeParseResult<WrapEthRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WrapEthRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WrapEthRequest' from JSON`,
  );
}
