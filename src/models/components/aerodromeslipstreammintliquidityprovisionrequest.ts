/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The desired amount of the first token to deposit
 */
export type AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Desired =
  | number
  | string;

/**
 * The desired amount of the second token to deposit
 */
export type AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Desired =
  | number
  | string;

/**
 * The minimum amount of the first token to deposit
 */
export type AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Min =
  | number
  | string;

/**
 * The minimum amount of the second token to deposit
 */
export type AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Min =
  | number
  | string;

export const AerodromeSlipstreamMintLiquidityProvisionRequestChain = {
  Base: "base",
} as const;
export type AerodromeSlipstreamMintLiquidityProvisionRequestChain = ClosedEnum<
  typeof AerodromeSlipstreamMintLiquidityProvisionRequestChain
>;

/**
 * Request model for minting a new liquidity position.
 */
export type AerodromeSlipstreamMintLiquidityProvisionRequest = {
  actionType?: "AERODROME_SLIPSTREAM_MINT_LIQUIDITY_PROVISION" | undefined;
  /**
   * The symbol or address of the first token in the pair.
   */
  token0: string;
  /**
   * The symbol or address of the second token in the pair.
   */
  token1: string;
  /**
   * The tick spacing of the pool
   */
  tickSpacing: number;
  /**
   * The lower tick of the range to mint the position in
   */
  tickLower: number;
  /**
   * The upper tick of the range to mint the position in
   */
  tickUpper: number;
  /**
   * The desired amount of the first token to deposit
   */
  amount0Desired: number | string;
  /**
   * The desired amount of the second token to deposit
   */
  amount1Desired: number | string;
  /**
   * The minimum amount of the first token to deposit
   */
  amount0Min: number | string;
  /**
   * The minimum amount of the second token to deposit
   */
  amount1Min: number | string;
  /**
   * The address that will receive the LP tokens
   */
  recipient?: string | null | undefined;
  chain: AerodromeSlipstreamMintLiquidityProvisionRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Desired$inboundSchema:
  z.ZodType<
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Desired,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Desired$Outbound =
  | number
  | string;

/** @internal */
export const AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Desired$outboundSchema:
  z.ZodType<
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Desired$Outbound,
    z.ZodTypeDef,
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Desired
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Desired$ {
  /** @deprecated use `AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Desired$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Desired$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Desired$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Desired$outboundSchema;
  /** @deprecated use `AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Desired$Outbound` instead. */
  export type Outbound =
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Desired$Outbound;
}

export function aerodromeSlipstreamMintLiquidityProvisionRequestAmount0DesiredToJSON(
  aerodromeSlipstreamMintLiquidityProvisionRequestAmount0Desired:
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Desired,
): string {
  return JSON.stringify(
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Desired$outboundSchema
      .parse(aerodromeSlipstreamMintLiquidityProvisionRequestAmount0Desired),
  );
}

export function aerodromeSlipstreamMintLiquidityProvisionRequestAmount0DesiredFromJSON(
  jsonString: string,
): SafeParseResult<
  AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Desired,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Desired$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Desired' from JSON`,
  );
}

/** @internal */
export const AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Desired$inboundSchema:
  z.ZodType<
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Desired,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Desired$Outbound =
  | number
  | string;

/** @internal */
export const AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Desired$outboundSchema:
  z.ZodType<
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Desired$Outbound,
    z.ZodTypeDef,
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Desired
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Desired$ {
  /** @deprecated use `AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Desired$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Desired$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Desired$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Desired$outboundSchema;
  /** @deprecated use `AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Desired$Outbound` instead. */
  export type Outbound =
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Desired$Outbound;
}

export function aerodromeSlipstreamMintLiquidityProvisionRequestAmount1DesiredToJSON(
  aerodromeSlipstreamMintLiquidityProvisionRequestAmount1Desired:
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Desired,
): string {
  return JSON.stringify(
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Desired$outboundSchema
      .parse(aerodromeSlipstreamMintLiquidityProvisionRequestAmount1Desired),
  );
}

export function aerodromeSlipstreamMintLiquidityProvisionRequestAmount1DesiredFromJSON(
  jsonString: string,
): SafeParseResult<
  AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Desired,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Desired$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Desired' from JSON`,
  );
}

/** @internal */
export const AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Min$inboundSchema:
  z.ZodType<
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Min,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Min$Outbound =
  | number
  | string;

/** @internal */
export const AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Min$outboundSchema:
  z.ZodType<
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Min$Outbound,
    z.ZodTypeDef,
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Min
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Min$ {
  /** @deprecated use `AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Min$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Min$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Min$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Min$outboundSchema;
  /** @deprecated use `AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Min$Outbound` instead. */
  export type Outbound =
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Min$Outbound;
}

export function aerodromeSlipstreamMintLiquidityProvisionRequestAmount0MinToJSON(
  aerodromeSlipstreamMintLiquidityProvisionRequestAmount0Min:
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Min,
): string {
  return JSON.stringify(
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Min$outboundSchema
      .parse(aerodromeSlipstreamMintLiquidityProvisionRequestAmount0Min),
  );
}

export function aerodromeSlipstreamMintLiquidityProvisionRequestAmount0MinFromJSON(
  jsonString: string,
): SafeParseResult<
  AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Min,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Min$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'AerodromeSlipstreamMintLiquidityProvisionRequestAmount0Min' from JSON`,
  );
}

/** @internal */
export const AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Min$inboundSchema:
  z.ZodType<
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Min,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Min$Outbound =
  | number
  | string;

/** @internal */
export const AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Min$outboundSchema:
  z.ZodType<
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Min$Outbound,
    z.ZodTypeDef,
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Min
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Min$ {
  /** @deprecated use `AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Min$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Min$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Min$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Min$outboundSchema;
  /** @deprecated use `AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Min$Outbound` instead. */
  export type Outbound =
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Min$Outbound;
}

export function aerodromeSlipstreamMintLiquidityProvisionRequestAmount1MinToJSON(
  aerodromeSlipstreamMintLiquidityProvisionRequestAmount1Min:
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Min,
): string {
  return JSON.stringify(
    AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Min$outboundSchema
      .parse(aerodromeSlipstreamMintLiquidityProvisionRequestAmount1Min),
  );
}

export function aerodromeSlipstreamMintLiquidityProvisionRequestAmount1MinFromJSON(
  jsonString: string,
): SafeParseResult<
  AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Min,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Min$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'AerodromeSlipstreamMintLiquidityProvisionRequestAmount1Min' from JSON`,
  );
}

/** @internal */
export const AerodromeSlipstreamMintLiquidityProvisionRequestChain$inboundSchema:
  z.ZodNativeEnum<
    typeof AerodromeSlipstreamMintLiquidityProvisionRequestChain
  > = z.nativeEnum(AerodromeSlipstreamMintLiquidityProvisionRequestChain);

/** @internal */
export const AerodromeSlipstreamMintLiquidityProvisionRequestChain$outboundSchema:
  z.ZodNativeEnum<
    typeof AerodromeSlipstreamMintLiquidityProvisionRequestChain
  > = AerodromeSlipstreamMintLiquidityProvisionRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamMintLiquidityProvisionRequestChain$ {
  /** @deprecated use `AerodromeSlipstreamMintLiquidityProvisionRequestChain$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamMintLiquidityProvisionRequestChain$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamMintLiquidityProvisionRequestChain$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamMintLiquidityProvisionRequestChain$outboundSchema;
}

/** @internal */
export const AerodromeSlipstreamMintLiquidityProvisionRequest$inboundSchema:
  z.ZodType<
    AerodromeSlipstreamMintLiquidityProvisionRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    action_type: z.literal("AERODROME_SLIPSTREAM_MINT_LIQUIDITY_PROVISION")
      .default("AERODROME_SLIPSTREAM_MINT_LIQUIDITY_PROVISION"),
    token0: z.string(),
    token1: z.string(),
    tick_spacing: z.number().int(),
    tick_lower: z.number().int(),
    tick_upper: z.number().int(),
    amount0_desired: z.union([z.number(), z.string()]),
    amount1_desired: z.union([z.number(), z.string()]),
    amount0_min: z.union([z.number(), z.string()]),
    amount1_min: z.union([z.number(), z.string()]),
    recipient: z.nullable(z.string()).optional(),
    chain: AerodromeSlipstreamMintLiquidityProvisionRequestChain$inboundSchema,
    sender: z.string(),
    estimate_gas: z.boolean().default(true),
  }).transform((v) => {
    return remap$(v, {
      "action_type": "actionType",
      "tick_spacing": "tickSpacing",
      "tick_lower": "tickLower",
      "tick_upper": "tickUpper",
      "amount0_desired": "amount0Desired",
      "amount1_desired": "amount1Desired",
      "amount0_min": "amount0Min",
      "amount1_min": "amount1Min",
      "estimate_gas": "estimateGas",
    });
  });

/** @internal */
export type AerodromeSlipstreamMintLiquidityProvisionRequest$Outbound = {
  action_type: "AERODROME_SLIPSTREAM_MINT_LIQUIDITY_PROVISION";
  token0: string;
  token1: string;
  tick_spacing: number;
  tick_lower: number;
  tick_upper: number;
  amount0_desired: number | string;
  amount1_desired: number | string;
  amount0_min: number | string;
  amount1_min: number | string;
  recipient?: string | null | undefined;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const AerodromeSlipstreamMintLiquidityProvisionRequest$outboundSchema:
  z.ZodType<
    AerodromeSlipstreamMintLiquidityProvisionRequest$Outbound,
    z.ZodTypeDef,
    AerodromeSlipstreamMintLiquidityProvisionRequest
  > = z.object({
    actionType: z.literal("AERODROME_SLIPSTREAM_MINT_LIQUIDITY_PROVISION")
      .default("AERODROME_SLIPSTREAM_MINT_LIQUIDITY_PROVISION" as const),
    token0: z.string(),
    token1: z.string(),
    tickSpacing: z.number().int(),
    tickLower: z.number().int(),
    tickUpper: z.number().int(),
    amount0Desired: z.union([z.number(), z.string()]),
    amount1Desired: z.union([z.number(), z.string()]),
    amount0Min: z.union([z.number(), z.string()]),
    amount1Min: z.union([z.number(), z.string()]),
    recipient: z.nullable(z.string()).optional(),
    chain: AerodromeSlipstreamMintLiquidityProvisionRequestChain$outboundSchema,
    sender: z.string(),
    estimateGas: z.boolean().default(true),
  }).transform((v) => {
    return remap$(v, {
      actionType: "action_type",
      tickSpacing: "tick_spacing",
      tickLower: "tick_lower",
      tickUpper: "tick_upper",
      amount0Desired: "amount0_desired",
      amount1Desired: "amount1_desired",
      amount0Min: "amount0_min",
      amount1Min: "amount1_min",
      estimateGas: "estimate_gas",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamMintLiquidityProvisionRequest$ {
  /** @deprecated use `AerodromeSlipstreamMintLiquidityProvisionRequest$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamMintLiquidityProvisionRequest$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamMintLiquidityProvisionRequest$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamMintLiquidityProvisionRequest$outboundSchema;
  /** @deprecated use `AerodromeSlipstreamMintLiquidityProvisionRequest$Outbound` instead. */
  export type Outbound =
    AerodromeSlipstreamMintLiquidityProvisionRequest$Outbound;
}

export function aerodromeSlipstreamMintLiquidityProvisionRequestToJSON(
  aerodromeSlipstreamMintLiquidityProvisionRequest:
    AerodromeSlipstreamMintLiquidityProvisionRequest,
): string {
  return JSON.stringify(
    AerodromeSlipstreamMintLiquidityProvisionRequest$outboundSchema.parse(
      aerodromeSlipstreamMintLiquidityProvisionRequest,
    ),
  );
}

export function aerodromeSlipstreamMintLiquidityProvisionRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  AerodromeSlipstreamMintLiquidityProvisionRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AerodromeSlipstreamMintLiquidityProvisionRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AerodromeSlipstreamMintLiquidityProvisionRequest' from JSON`,
  );
}
