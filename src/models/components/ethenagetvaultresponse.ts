/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Apy,
  Apy$inboundSchema,
  Apy$Outbound,
  Apy$outboundSchema,
} from "./apy.js";
import {
  CompassApiBackendModelsVaultsReadResponseVaultUserPosition,
  CompassApiBackendModelsVaultsReadResponseVaultUserPosition$inboundSchema,
  CompassApiBackendModelsVaultsReadResponseVaultUserPosition$Outbound,
  CompassApiBackendModelsVaultsReadResponseVaultUserPosition$outboundSchema,
} from "./compassapibackendmodelsvaultsreadresponsevaultuserposition.js";
import {
  CooldownPosition,
  CooldownPosition$inboundSchema,
  CooldownPosition$Outbound,
  CooldownPosition$outboundSchema,
} from "./cooldownposition.js";
import {
  UnderlyingToken,
  UnderlyingToken$inboundSchema,
  UnderlyingToken$Outbound,
  UnderlyingToken$outboundSchema,
} from "./underlyingtoken.js";

export type EthenaGetVaultResponse = {
  /**
   * Name of the vault.
   */
  name: string;
  /**
   * Symbol of the vault.
   */
  symbol: string;
  /**
   * Number of decimals used for the vault's share precision.
   */
  decimals: number;
  /**
   * Total amount of assets deposited in the vault.
   */
  totalAssets: string;
  /**
   * Total amount of shares issued from the vault.
   */
  totalSupply: string;
  /**
   * The price of one vault share in terms of the underlying asset.
   */
  sharePrice: string;
  underlyingToken: UnderlyingToken;
  apy: Apy;
  /**
   * The user's position in the vault.
   */
  userPosition?:
    | CompassApiBackendModelsVaultsReadResponseVaultUserPosition
    | null
    | undefined;
  /**
   * The duration of days that must pass before a position can be withdrawn from the Ethena vault after a request to withdraw has been made.
   */
  cooldownDurationDays: number;
  /**
   * The user's cooldown position.
   */
  cooldownPosition?: CooldownPosition | null | undefined;
};

/** @internal */
export const EthenaGetVaultResponse$inboundSchema: z.ZodType<
  EthenaGetVaultResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  symbol: z.string(),
  decimals: z.number().int(),
  total_assets: z.string(),
  total_supply: z.string(),
  share_price: z.string(),
  underlying_token: UnderlyingToken$inboundSchema,
  apy: Apy$inboundSchema,
  user_position: z.nullable(
    CompassApiBackendModelsVaultsReadResponseVaultUserPosition$inboundSchema,
  ).optional(),
  cooldown_duration_days: z.number().int(),
  cooldown_position: z.nullable(CooldownPosition$inboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    "total_assets": "totalAssets",
    "total_supply": "totalSupply",
    "share_price": "sharePrice",
    "underlying_token": "underlyingToken",
    "user_position": "userPosition",
    "cooldown_duration_days": "cooldownDurationDays",
    "cooldown_position": "cooldownPosition",
  });
});

/** @internal */
export type EthenaGetVaultResponse$Outbound = {
  name: string;
  symbol: string;
  decimals: number;
  total_assets: string;
  total_supply: string;
  share_price: string;
  underlying_token: UnderlyingToken$Outbound;
  apy: Apy$Outbound;
  user_position?:
    | CompassApiBackendModelsVaultsReadResponseVaultUserPosition$Outbound
    | null
    | undefined;
  cooldown_duration_days: number;
  cooldown_position?: CooldownPosition$Outbound | null | undefined;
};

/** @internal */
export const EthenaGetVaultResponse$outboundSchema: z.ZodType<
  EthenaGetVaultResponse$Outbound,
  z.ZodTypeDef,
  EthenaGetVaultResponse
> = z.object({
  name: z.string(),
  symbol: z.string(),
  decimals: z.number().int(),
  totalAssets: z.string(),
  totalSupply: z.string(),
  sharePrice: z.string(),
  underlyingToken: UnderlyingToken$outboundSchema,
  apy: Apy$outboundSchema,
  userPosition: z.nullable(
    CompassApiBackendModelsVaultsReadResponseVaultUserPosition$outboundSchema,
  ).optional(),
  cooldownDurationDays: z.number().int(),
  cooldownPosition: z.nullable(CooldownPosition$outboundSchema).optional(),
}).transform((v) => {
  return remap$(v, {
    totalAssets: "total_assets",
    totalSupply: "total_supply",
    sharePrice: "share_price",
    underlyingToken: "underlying_token",
    userPosition: "user_position",
    cooldownDurationDays: "cooldown_duration_days",
    cooldownPosition: "cooldown_position",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EthenaGetVaultResponse$ {
  /** @deprecated use `EthenaGetVaultResponse$inboundSchema` instead. */
  export const inboundSchema = EthenaGetVaultResponse$inboundSchema;
  /** @deprecated use `EthenaGetVaultResponse$outboundSchema` instead. */
  export const outboundSchema = EthenaGetVaultResponse$outboundSchema;
  /** @deprecated use `EthenaGetVaultResponse$Outbound` instead. */
  export type Outbound = EthenaGetVaultResponse$Outbound;
}

export function ethenaGetVaultResponseToJSON(
  ethenaGetVaultResponse: EthenaGetVaultResponse,
): string {
  return JSON.stringify(
    EthenaGetVaultResponse$outboundSchema.parse(ethenaGetVaultResponse),
  );
}

export function ethenaGetVaultResponseFromJSON(
  jsonString: string,
): SafeParseResult<EthenaGetVaultResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EthenaGetVaultResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EthenaGetVaultResponse' from JSON`,
  );
}
