/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  InterestRateMode,
  InterestRateMode$inboundSchema,
  InterestRateMode$outboundSchema,
} from "./interestratemode.js";

/**
 * The amount of the asset to repay
 */
export type AaveRepayParamsAmount = number | string;

export type AaveRepayParams = {
  actionType?: "AAVE_REPAY" | undefined;
  /**
   * The symbol of the underlying asset to repay..
   */
  token: string;
  /**
   * The amount of the asset to repay
   */
  amount: number | string;
  /**
   * On AAVE there are 2 different interest modes.
   *
   * @remarks
   *
   * A stable (but typically higher rate), or a variable rate.
   */
  interestRateMode: InterestRateMode;
  /**
   * The address on behalf of whom the supply is made
   */
  onBehalfOf?: string | null | undefined;
};

/** @internal */
export const AaveRepayParamsAmount$inboundSchema: z.ZodType<
  AaveRepayParamsAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type AaveRepayParamsAmount$Outbound = number | string;

/** @internal */
export const AaveRepayParamsAmount$outboundSchema: z.ZodType<
  AaveRepayParamsAmount$Outbound,
  z.ZodTypeDef,
  AaveRepayParamsAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AaveRepayParamsAmount$ {
  /** @deprecated use `AaveRepayParamsAmount$inboundSchema` instead. */
  export const inboundSchema = AaveRepayParamsAmount$inboundSchema;
  /** @deprecated use `AaveRepayParamsAmount$outboundSchema` instead. */
  export const outboundSchema = AaveRepayParamsAmount$outboundSchema;
  /** @deprecated use `AaveRepayParamsAmount$Outbound` instead. */
  export type Outbound = AaveRepayParamsAmount$Outbound;
}

export function aaveRepayParamsAmountToJSON(
  aaveRepayParamsAmount: AaveRepayParamsAmount,
): string {
  return JSON.stringify(
    AaveRepayParamsAmount$outboundSchema.parse(aaveRepayParamsAmount),
  );
}

export function aaveRepayParamsAmountFromJSON(
  jsonString: string,
): SafeParseResult<AaveRepayParamsAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AaveRepayParamsAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AaveRepayParamsAmount' from JSON`,
  );
}

/** @internal */
export const AaveRepayParams$inboundSchema: z.ZodType<
  AaveRepayParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("AAVE_REPAY").default("AAVE_REPAY"),
  token: z.string(),
  amount: z.union([z.number(), z.string()]),
  interest_rate_mode: InterestRateMode$inboundSchema,
  on_behalf_of: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "interest_rate_mode": "interestRateMode",
    "on_behalf_of": "onBehalfOf",
  });
});

/** @internal */
export type AaveRepayParams$Outbound = {
  action_type: "AAVE_REPAY";
  token: string;
  amount: number | string;
  interest_rate_mode: string;
  on_behalf_of?: string | null | undefined;
};

/** @internal */
export const AaveRepayParams$outboundSchema: z.ZodType<
  AaveRepayParams$Outbound,
  z.ZodTypeDef,
  AaveRepayParams
> = z.object({
  actionType: z.literal("AAVE_REPAY").default("AAVE_REPAY" as const),
  token: z.string(),
  amount: z.union([z.number(), z.string()]),
  interestRateMode: InterestRateMode$outboundSchema,
  onBehalfOf: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    interestRateMode: "interest_rate_mode",
    onBehalfOf: "on_behalf_of",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AaveRepayParams$ {
  /** @deprecated use `AaveRepayParams$inboundSchema` instead. */
  export const inboundSchema = AaveRepayParams$inboundSchema;
  /** @deprecated use `AaveRepayParams$outboundSchema` instead. */
  export const outboundSchema = AaveRepayParams$outboundSchema;
  /** @deprecated use `AaveRepayParams$Outbound` instead. */
  export type Outbound = AaveRepayParams$Outbound;
}

export function aaveRepayParamsToJSON(
  aaveRepayParams: AaveRepayParams,
): string {
  return JSON.stringify(AaveRepayParams$outboundSchema.parse(aaveRepayParams));
}

export function aaveRepayParamsFromJSON(
  jsonString: string,
): SafeParseResult<AaveRepayParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AaveRepayParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AaveRepayParams' from JSON`,
  );
}
