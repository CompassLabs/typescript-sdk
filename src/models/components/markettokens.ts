/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Erc20Data,
  Erc20Data$inboundSchema,
  Erc20Data$Outbound,
  Erc20Data$outboundSchema,
} from "./erc20data.js";

export type MarketTokens = {
  underlyingToken: Erc20Data;
  sy: Erc20Data;
  pt: Erc20Data;
  yt: Erc20Data;
  accountingAsset: Erc20Data | null;
};

/** @internal */
export const MarketTokens$inboundSchema: z.ZodType<
  MarketTokens,
  z.ZodTypeDef,
  unknown
> = z.object({
  underlying_token: Erc20Data$inboundSchema,
  sy: Erc20Data$inboundSchema,
  pt: Erc20Data$inboundSchema,
  yt: Erc20Data$inboundSchema,
  accounting_asset: z.nullable(Erc20Data$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "underlying_token": "underlyingToken",
    "accounting_asset": "accountingAsset",
  });
});

/** @internal */
export type MarketTokens$Outbound = {
  underlying_token: Erc20Data$Outbound;
  sy: Erc20Data$Outbound;
  pt: Erc20Data$Outbound;
  yt: Erc20Data$Outbound;
  accounting_asset: Erc20Data$Outbound | null;
};

/** @internal */
export const MarketTokens$outboundSchema: z.ZodType<
  MarketTokens$Outbound,
  z.ZodTypeDef,
  MarketTokens
> = z.object({
  underlyingToken: Erc20Data$outboundSchema,
  sy: Erc20Data$outboundSchema,
  pt: Erc20Data$outboundSchema,
  yt: Erc20Data$outboundSchema,
  accountingAsset: z.nullable(Erc20Data$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    underlyingToken: "underlying_token",
    accountingAsset: "accounting_asset",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MarketTokens$ {
  /** @deprecated use `MarketTokens$inboundSchema` instead. */
  export const inboundSchema = MarketTokens$inboundSchema;
  /** @deprecated use `MarketTokens$outboundSchema` instead. */
  export const outboundSchema = MarketTokens$outboundSchema;
  /** @deprecated use `MarketTokens$Outbound` instead. */
  export type Outbound = MarketTokens$Outbound;
}

export function marketTokensToJSON(marketTokens: MarketTokens): string {
  return JSON.stringify(MarketTokens$outboundSchema.parse(marketTokens));
}

export function marketTokensFromJSON(
  jsonString: string,
): SafeParseResult<MarketTokens, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MarketTokens$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MarketTokens' from JSON`,
  );
}
