/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as b64$ from "../../lib/base64.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Amount of the token to supply to the market as collateral.
 */
export type MorphoSupplyCollateralParamsAmount = number | string;

export type MorphoSupplyCollateralParams = {
  actionType?: "MORPHO_SUPPLY_COLLATERAL" | undefined;
  /**
   * Amount of the token to supply to the market as collateral.
   */
  amount: number | string;
  /**
   * The key that uniquely identifies the market. This can be found using the 'Get Markets' endpoint.
   */
  uniqueMarketKey: string;
  /**
   * The address on behalf of whom the supplied collateral is made. Defaults to sender.
   */
  onBehalfOf?: string | null | undefined;
  /**
   * An optional field for callback byte data that will be triggered upon successful supplying of collateral.
   */
  callbackData?: Uint8Array | string | null | undefined;
};

/** @internal */
export const MorphoSupplyCollateralParamsAmount$inboundSchema: z.ZodType<
  MorphoSupplyCollateralParamsAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type MorphoSupplyCollateralParamsAmount$Outbound = number | string;

/** @internal */
export const MorphoSupplyCollateralParamsAmount$outboundSchema: z.ZodType<
  MorphoSupplyCollateralParamsAmount$Outbound,
  z.ZodTypeDef,
  MorphoSupplyCollateralParamsAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MorphoSupplyCollateralParamsAmount$ {
  /** @deprecated use `MorphoSupplyCollateralParamsAmount$inboundSchema` instead. */
  export const inboundSchema = MorphoSupplyCollateralParamsAmount$inboundSchema;
  /** @deprecated use `MorphoSupplyCollateralParamsAmount$outboundSchema` instead. */
  export const outboundSchema =
    MorphoSupplyCollateralParamsAmount$outboundSchema;
  /** @deprecated use `MorphoSupplyCollateralParamsAmount$Outbound` instead. */
  export type Outbound = MorphoSupplyCollateralParamsAmount$Outbound;
}

export function morphoSupplyCollateralParamsAmountToJSON(
  morphoSupplyCollateralParamsAmount: MorphoSupplyCollateralParamsAmount,
): string {
  return JSON.stringify(
    MorphoSupplyCollateralParamsAmount$outboundSchema.parse(
      morphoSupplyCollateralParamsAmount,
    ),
  );
}

export function morphoSupplyCollateralParamsAmountFromJSON(
  jsonString: string,
): SafeParseResult<MorphoSupplyCollateralParamsAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MorphoSupplyCollateralParamsAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MorphoSupplyCollateralParamsAmount' from JSON`,
  );
}

/** @internal */
export const MorphoSupplyCollateralParams$inboundSchema: z.ZodType<
  MorphoSupplyCollateralParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("MORPHO_SUPPLY_COLLATERAL").default(
    "MORPHO_SUPPLY_COLLATERAL",
  ),
  amount: z.union([z.number(), z.string()]),
  unique_market_key: z.string(),
  on_behalf_of: z.nullable(z.string()).optional(),
  callback_data: z.nullable(b64$.zodInbound).optional(),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "unique_market_key": "uniqueMarketKey",
    "on_behalf_of": "onBehalfOf",
    "callback_data": "callbackData",
  });
});

/** @internal */
export type MorphoSupplyCollateralParams$Outbound = {
  action_type: "MORPHO_SUPPLY_COLLATERAL";
  amount: number | string;
  unique_market_key: string;
  on_behalf_of?: string | null | undefined;
  callback_data?: Uint8Array | null | undefined;
};

/** @internal */
export const MorphoSupplyCollateralParams$outboundSchema: z.ZodType<
  MorphoSupplyCollateralParams$Outbound,
  z.ZodTypeDef,
  MorphoSupplyCollateralParams
> = z.object({
  actionType: z.literal("MORPHO_SUPPLY_COLLATERAL").default(
    "MORPHO_SUPPLY_COLLATERAL" as const,
  ),
  amount: z.union([z.number(), z.string()]),
  uniqueMarketKey: z.string(),
  onBehalfOf: z.nullable(z.string()).optional(),
  callbackData: z.nullable(b64$.zodOutbound).optional(),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    uniqueMarketKey: "unique_market_key",
    onBehalfOf: "on_behalf_of",
    callbackData: "callback_data",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MorphoSupplyCollateralParams$ {
  /** @deprecated use `MorphoSupplyCollateralParams$inboundSchema` instead. */
  export const inboundSchema = MorphoSupplyCollateralParams$inboundSchema;
  /** @deprecated use `MorphoSupplyCollateralParams$outboundSchema` instead. */
  export const outboundSchema = MorphoSupplyCollateralParams$outboundSchema;
  /** @deprecated use `MorphoSupplyCollateralParams$Outbound` instead. */
  export type Outbound = MorphoSupplyCollateralParams$Outbound;
}

export function morphoSupplyCollateralParamsToJSON(
  morphoSupplyCollateralParams: MorphoSupplyCollateralParams,
): string {
  return JSON.stringify(
    MorphoSupplyCollateralParams$outboundSchema.parse(
      morphoSupplyCollateralParams,
    ),
  );
}

export function morphoSupplyCollateralParamsFromJSON(
  jsonString: string,
): SafeParseResult<MorphoSupplyCollateralParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MorphoSupplyCollateralParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MorphoSupplyCollateralParams' from JSON`,
  );
}
