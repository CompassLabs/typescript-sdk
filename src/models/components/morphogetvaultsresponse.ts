/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  MorphoVault,
  MorphoVault$inboundSchema,
  MorphoVault$Outbound,
  MorphoVault$outboundSchema,
} from "./morphovault.js";

export type MorphoGetVaultsResponse = {
  /**
   *  A list of vaults matching the query.
   */
  vaults: Array<MorphoVault>;
};

/** @internal */
export const MorphoGetVaultsResponse$inboundSchema: z.ZodType<
  MorphoGetVaultsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  vaults: z.array(MorphoVault$inboundSchema),
});

/** @internal */
export type MorphoGetVaultsResponse$Outbound = {
  vaults: Array<MorphoVault$Outbound>;
};

/** @internal */
export const MorphoGetVaultsResponse$outboundSchema: z.ZodType<
  MorphoGetVaultsResponse$Outbound,
  z.ZodTypeDef,
  MorphoGetVaultsResponse
> = z.object({
  vaults: z.array(MorphoVault$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MorphoGetVaultsResponse$ {
  /** @deprecated use `MorphoGetVaultsResponse$inboundSchema` instead. */
  export const inboundSchema = MorphoGetVaultsResponse$inboundSchema;
  /** @deprecated use `MorphoGetVaultsResponse$outboundSchema` instead. */
  export const outboundSchema = MorphoGetVaultsResponse$outboundSchema;
  /** @deprecated use `MorphoGetVaultsResponse$Outbound` instead. */
  export type Outbound = MorphoGetVaultsResponse$Outbound;
}

export function morphoGetVaultsResponseToJSON(
  morphoGetVaultsResponse: MorphoGetVaultsResponse,
): string {
  return JSON.stringify(
    MorphoGetVaultsResponse$outboundSchema.parse(morphoGetVaultsResponse),
  );
}

export function morphoGetVaultsResponseFromJSON(
  jsonString: string,
): SafeParseResult<MorphoGetVaultsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MorphoGetVaultsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MorphoGetVaultsResponse' from JSON`,
  );
}
