/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The amount of USDS you would like to deposit for sUSDS to earn yield.
 */
export type SkyDepositParamsAmount = number | string;

export type SkyDepositParams = {
  actionType?: "SKY_DEPOSIT" | undefined;
  /**
   * The amount of USDS you would like to deposit for sUSDS to earn yield.
   */
  amount: number | string;
  /**
   * The address which will receive the sUSDS. Defaults to the sender.
   */
  receiver?: string | null | undefined;
};

/** @internal */
export const SkyDepositParamsAmount$inboundSchema: z.ZodType<
  SkyDepositParamsAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type SkyDepositParamsAmount$Outbound = number | string;

/** @internal */
export const SkyDepositParamsAmount$outboundSchema: z.ZodType<
  SkyDepositParamsAmount$Outbound,
  z.ZodTypeDef,
  SkyDepositParamsAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkyDepositParamsAmount$ {
  /** @deprecated use `SkyDepositParamsAmount$inboundSchema` instead. */
  export const inboundSchema = SkyDepositParamsAmount$inboundSchema;
  /** @deprecated use `SkyDepositParamsAmount$outboundSchema` instead. */
  export const outboundSchema = SkyDepositParamsAmount$outboundSchema;
  /** @deprecated use `SkyDepositParamsAmount$Outbound` instead. */
  export type Outbound = SkyDepositParamsAmount$Outbound;
}

export function skyDepositParamsAmountToJSON(
  skyDepositParamsAmount: SkyDepositParamsAmount,
): string {
  return JSON.stringify(
    SkyDepositParamsAmount$outboundSchema.parse(skyDepositParamsAmount),
  );
}

export function skyDepositParamsAmountFromJSON(
  jsonString: string,
): SafeParseResult<SkyDepositParamsAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SkyDepositParamsAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SkyDepositParamsAmount' from JSON`,
  );
}

/** @internal */
export const SkyDepositParams$inboundSchema: z.ZodType<
  SkyDepositParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("SKY_DEPOSIT").default("SKY_DEPOSIT"),
  amount: z.union([z.number(), z.string()]),
  receiver: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
  });
});

/** @internal */
export type SkyDepositParams$Outbound = {
  action_type: "SKY_DEPOSIT";
  amount: number | string;
  receiver?: string | null | undefined;
};

/** @internal */
export const SkyDepositParams$outboundSchema: z.ZodType<
  SkyDepositParams$Outbound,
  z.ZodTypeDef,
  SkyDepositParams
> = z.object({
  actionType: z.literal("SKY_DEPOSIT").default("SKY_DEPOSIT" as const),
  amount: z.union([z.number(), z.string()]),
  receiver: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkyDepositParams$ {
  /** @deprecated use `SkyDepositParams$inboundSchema` instead. */
  export const inboundSchema = SkyDepositParams$inboundSchema;
  /** @deprecated use `SkyDepositParams$outboundSchema` instead. */
  export const outboundSchema = SkyDepositParams$outboundSchema;
  /** @deprecated use `SkyDepositParams$Outbound` instead. */
  export type Outbound = SkyDepositParams$Outbound;
}

export function skyDepositParamsToJSON(
  skyDepositParams: SkyDepositParams,
): string {
  return JSON.stringify(
    SkyDepositParams$outboundSchema.parse(skyDepositParams),
  );
}

export function skyDepositParamsFromJSON(
  jsonString: string,
): SafeParseResult<SkyDepositParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SkyDepositParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SkyDepositParams' from JSON`,
  );
}
