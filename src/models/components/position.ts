/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  OpenPosition,
  OpenPosition$inboundSchema,
  OpenPosition$Outbound,
  OpenPosition$outboundSchema,
} from "./openposition.js";
import {
  SyPosition,
  SyPosition$inboundSchema,
  SyPosition$Outbound,
  SyPosition$outboundSchema,
} from "./syposition.js";

export type Position = {
  chainId: number;
  totalOpen: number;
  totalClosed: number;
  totalSy: number;
  openPositions: Array<OpenPosition>;
  closedPositions: Array<OpenPosition>;
  syPositions: Array<SyPosition>;
  updatedAt: Date;
};

/** @internal */
export const Position$inboundSchema: z.ZodType<
  Position,
  z.ZodTypeDef,
  unknown
> = z.object({
  chainId: z.number().int(),
  totalOpen: z.number().int(),
  totalClosed: z.number().int(),
  totalSy: z.number().int(),
  openPositions: z.array(OpenPosition$inboundSchema),
  closedPositions: z.array(OpenPosition$inboundSchema),
  syPositions: z.array(SyPosition$inboundSchema),
  updatedAt: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type Position$Outbound = {
  chainId: number;
  totalOpen: number;
  totalClosed: number;
  totalSy: number;
  openPositions: Array<OpenPosition$Outbound>;
  closedPositions: Array<OpenPosition$Outbound>;
  syPositions: Array<SyPosition$Outbound>;
  updatedAt: string;
};

/** @internal */
export const Position$outboundSchema: z.ZodType<
  Position$Outbound,
  z.ZodTypeDef,
  Position
> = z.object({
  chainId: z.number().int(),
  totalOpen: z.number().int(),
  totalClosed: z.number().int(),
  totalSy: z.number().int(),
  openPositions: z.array(OpenPosition$outboundSchema),
  closedPositions: z.array(OpenPosition$outboundSchema),
  syPositions: z.array(SyPosition$outboundSchema),
  updatedAt: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Position$ {
  /** @deprecated use `Position$inboundSchema` instead. */
  export const inboundSchema = Position$inboundSchema;
  /** @deprecated use `Position$outboundSchema` instead. */
  export const outboundSchema = Position$outboundSchema;
  /** @deprecated use `Position$Outbound` instead. */
  export type Outbound = Position$Outbound;
}

export function positionToJSON(position: Position): string {
  return JSON.stringify(Position$outboundSchema.parse(position));
}

export function positionFromJSON(
  jsonString: string,
): SafeParseResult<Position, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Position$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Position' from JSON`,
  );
}
