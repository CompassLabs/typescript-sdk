/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * How much liquidity to take out in percentage.
 */
export type AerodromeSlipstreamWithdrawLiquidityProvisionParamsPercentageForWithdrawal =
  | number
  | string;

/**
 * Endpoint parameters for liquidity provision withdrawal on aerodrome slipstream.
 *
 * @remarks
 *
 * This action is performed in a multicall on the NonfungiblePosition Manager: https://github.com/AerodromeSlipstream/v3-periphery/blob/0682387198a24c7cd63566a2c58398533860a5d1/contracts/base/Multicall.sol#L11-L27
 * First, we call decrease liquidity then collect the tokens owed to the user.
 */
export type AerodromeSlipstreamWithdrawLiquidityProvisionParams = {
  actionType?: "AERODROME_SLIPSTREAM_WITHDRAW_LIQUIDITY_PROVISION" | undefined;
  /**
   * Token ID of the NFT representing the liquidity provisioned position.
   */
  tokenId: number;
  /**
   * How much liquidity to take out in percentage.
   */
  percentageForWithdrawal: number | string;
};

/** @internal */
export const AerodromeSlipstreamWithdrawLiquidityProvisionParamsPercentageForWithdrawal$inboundSchema:
  z.ZodType<
    AerodromeSlipstreamWithdrawLiquidityProvisionParamsPercentageForWithdrawal,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type AerodromeSlipstreamWithdrawLiquidityProvisionParamsPercentageForWithdrawal$Outbound =
  | number
  | string;

/** @internal */
export const AerodromeSlipstreamWithdrawLiquidityProvisionParamsPercentageForWithdrawal$outboundSchema:
  z.ZodType<
    AerodromeSlipstreamWithdrawLiquidityProvisionParamsPercentageForWithdrawal$Outbound,
    z.ZodTypeDef,
    AerodromeSlipstreamWithdrawLiquidityProvisionParamsPercentageForWithdrawal
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamWithdrawLiquidityProvisionParamsPercentageForWithdrawal$ {
  /** @deprecated use `AerodromeSlipstreamWithdrawLiquidityProvisionParamsPercentageForWithdrawal$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamWithdrawLiquidityProvisionParamsPercentageForWithdrawal$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamWithdrawLiquidityProvisionParamsPercentageForWithdrawal$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamWithdrawLiquidityProvisionParamsPercentageForWithdrawal$outboundSchema;
  /** @deprecated use `AerodromeSlipstreamWithdrawLiquidityProvisionParamsPercentageForWithdrawal$Outbound` instead. */
  export type Outbound =
    AerodromeSlipstreamWithdrawLiquidityProvisionParamsPercentageForWithdrawal$Outbound;
}

export function aerodromeSlipstreamWithdrawLiquidityProvisionParamsPercentageForWithdrawalToJSON(
  aerodromeSlipstreamWithdrawLiquidityProvisionParamsPercentageForWithdrawal:
    AerodromeSlipstreamWithdrawLiquidityProvisionParamsPercentageForWithdrawal,
): string {
  return JSON.stringify(
    AerodromeSlipstreamWithdrawLiquidityProvisionParamsPercentageForWithdrawal$outboundSchema
      .parse(
        aerodromeSlipstreamWithdrawLiquidityProvisionParamsPercentageForWithdrawal,
      ),
  );
}

export function aerodromeSlipstreamWithdrawLiquidityProvisionParamsPercentageForWithdrawalFromJSON(
  jsonString: string,
): SafeParseResult<
  AerodromeSlipstreamWithdrawLiquidityProvisionParamsPercentageForWithdrawal,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AerodromeSlipstreamWithdrawLiquidityProvisionParamsPercentageForWithdrawal$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'AerodromeSlipstreamWithdrawLiquidityProvisionParamsPercentageForWithdrawal' from JSON`,
  );
}

/** @internal */
export const AerodromeSlipstreamWithdrawLiquidityProvisionParams$inboundSchema:
  z.ZodType<
    AerodromeSlipstreamWithdrawLiquidityProvisionParams,
    z.ZodTypeDef,
    unknown
  > = z.object({
    action_type: z.literal("AERODROME_SLIPSTREAM_WITHDRAW_LIQUIDITY_PROVISION")
      .default("AERODROME_SLIPSTREAM_WITHDRAW_LIQUIDITY_PROVISION"),
    token_id: z.number().int(),
    percentage_for_withdrawal: z.union([z.number(), z.string()]),
  }).transform((v) => {
    return remap$(v, {
      "action_type": "actionType",
      "token_id": "tokenId",
      "percentage_for_withdrawal": "percentageForWithdrawal",
    });
  });

/** @internal */
export type AerodromeSlipstreamWithdrawLiquidityProvisionParams$Outbound = {
  action_type: "AERODROME_SLIPSTREAM_WITHDRAW_LIQUIDITY_PROVISION";
  token_id: number;
  percentage_for_withdrawal: number | string;
};

/** @internal */
export const AerodromeSlipstreamWithdrawLiquidityProvisionParams$outboundSchema:
  z.ZodType<
    AerodromeSlipstreamWithdrawLiquidityProvisionParams$Outbound,
    z.ZodTypeDef,
    AerodromeSlipstreamWithdrawLiquidityProvisionParams
  > = z.object({
    actionType: z.literal("AERODROME_SLIPSTREAM_WITHDRAW_LIQUIDITY_PROVISION")
      .default("AERODROME_SLIPSTREAM_WITHDRAW_LIQUIDITY_PROVISION" as const),
    tokenId: z.number().int(),
    percentageForWithdrawal: z.union([z.number(), z.string()]),
  }).transform((v) => {
    return remap$(v, {
      actionType: "action_type",
      tokenId: "token_id",
      percentageForWithdrawal: "percentage_for_withdrawal",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamWithdrawLiquidityProvisionParams$ {
  /** @deprecated use `AerodromeSlipstreamWithdrawLiquidityProvisionParams$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamWithdrawLiquidityProvisionParams$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamWithdrawLiquidityProvisionParams$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamWithdrawLiquidityProvisionParams$outboundSchema;
  /** @deprecated use `AerodromeSlipstreamWithdrawLiquidityProvisionParams$Outbound` instead. */
  export type Outbound =
    AerodromeSlipstreamWithdrawLiquidityProvisionParams$Outbound;
}

export function aerodromeSlipstreamWithdrawLiquidityProvisionParamsToJSON(
  aerodromeSlipstreamWithdrawLiquidityProvisionParams:
    AerodromeSlipstreamWithdrawLiquidityProvisionParams,
): string {
  return JSON.stringify(
    AerodromeSlipstreamWithdrawLiquidityProvisionParams$outboundSchema.parse(
      aerodromeSlipstreamWithdrawLiquidityProvisionParams,
    ),
  );
}

export function aerodromeSlipstreamWithdrawLiquidityProvisionParamsFromJSON(
  jsonString: string,
): SafeParseResult<
  AerodromeSlipstreamWithdrawLiquidityProvisionParams,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AerodromeSlipstreamWithdrawLiquidityProvisionParams$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AerodromeSlipstreamWithdrawLiquidityProvisionParams' from JSON`,
  );
}
