/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Amount of the token to supply to the market as collateral.
 */
export type MorphoWithdrawCollateralRequestAmount = number | string;

export const MorphoWithdrawCollateralRequestChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type MorphoWithdrawCollateralRequestChain = ClosedEnum<
  typeof MorphoWithdrawCollateralRequestChain
>;

export type MorphoWithdrawCollateralRequest = {
  actionType?: "MORPHO_WITHDRAW_COLLATERAL" | undefined;
  /**
   * Amount of the token to supply to the market as collateral.
   */
  amount: number | string;
  /**
   * The key that uniquely identifies the market. This can be found using the 'Get Markets' endpoint.
   */
  uniqueMarketKey: string;
  /**
   * The address on behalf of whom the withdraw is made. Defaults to sender.
   */
  onBehalfOf?: string | null | undefined;
  /**
   * The address where the withdrawn collateral will be received. Defaults to sender.
   */
  receiver?: string | null | undefined;
  chain: MorphoWithdrawCollateralRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const MorphoWithdrawCollateralRequestAmount$inboundSchema: z.ZodType<
  MorphoWithdrawCollateralRequestAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type MorphoWithdrawCollateralRequestAmount$Outbound = number | string;

/** @internal */
export const MorphoWithdrawCollateralRequestAmount$outboundSchema: z.ZodType<
  MorphoWithdrawCollateralRequestAmount$Outbound,
  z.ZodTypeDef,
  MorphoWithdrawCollateralRequestAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MorphoWithdrawCollateralRequestAmount$ {
  /** @deprecated use `MorphoWithdrawCollateralRequestAmount$inboundSchema` instead. */
  export const inboundSchema =
    MorphoWithdrawCollateralRequestAmount$inboundSchema;
  /** @deprecated use `MorphoWithdrawCollateralRequestAmount$outboundSchema` instead. */
  export const outboundSchema =
    MorphoWithdrawCollateralRequestAmount$outboundSchema;
  /** @deprecated use `MorphoWithdrawCollateralRequestAmount$Outbound` instead. */
  export type Outbound = MorphoWithdrawCollateralRequestAmount$Outbound;
}

export function morphoWithdrawCollateralRequestAmountToJSON(
  morphoWithdrawCollateralRequestAmount: MorphoWithdrawCollateralRequestAmount,
): string {
  return JSON.stringify(
    MorphoWithdrawCollateralRequestAmount$outboundSchema.parse(
      morphoWithdrawCollateralRequestAmount,
    ),
  );
}

export function morphoWithdrawCollateralRequestAmountFromJSON(
  jsonString: string,
): SafeParseResult<MorphoWithdrawCollateralRequestAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      MorphoWithdrawCollateralRequestAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MorphoWithdrawCollateralRequestAmount' from JSON`,
  );
}

/** @internal */
export const MorphoWithdrawCollateralRequestChain$inboundSchema:
  z.ZodNativeEnum<typeof MorphoWithdrawCollateralRequestChain> = z.nativeEnum(
    MorphoWithdrawCollateralRequestChain,
  );

/** @internal */
export const MorphoWithdrawCollateralRequestChain$outboundSchema:
  z.ZodNativeEnum<typeof MorphoWithdrawCollateralRequestChain> =
    MorphoWithdrawCollateralRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MorphoWithdrawCollateralRequestChain$ {
  /** @deprecated use `MorphoWithdrawCollateralRequestChain$inboundSchema` instead. */
  export const inboundSchema =
    MorphoWithdrawCollateralRequestChain$inboundSchema;
  /** @deprecated use `MorphoWithdrawCollateralRequestChain$outboundSchema` instead. */
  export const outboundSchema =
    MorphoWithdrawCollateralRequestChain$outboundSchema;
}

/** @internal */
export const MorphoWithdrawCollateralRequest$inboundSchema: z.ZodType<
  MorphoWithdrawCollateralRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("MORPHO_WITHDRAW_COLLATERAL").default(
    "MORPHO_WITHDRAW_COLLATERAL",
  ),
  amount: z.union([z.number(), z.string()]),
  unique_market_key: z.string(),
  on_behalf_of: z.nullable(z.string()).optional(),
  receiver: z.nullable(z.string()).optional(),
  chain: MorphoWithdrawCollateralRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "unique_market_key": "uniqueMarketKey",
    "on_behalf_of": "onBehalfOf",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type MorphoWithdrawCollateralRequest$Outbound = {
  action_type: "MORPHO_WITHDRAW_COLLATERAL";
  amount: number | string;
  unique_market_key: string;
  on_behalf_of?: string | null | undefined;
  receiver?: string | null | undefined;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const MorphoWithdrawCollateralRequest$outboundSchema: z.ZodType<
  MorphoWithdrawCollateralRequest$Outbound,
  z.ZodTypeDef,
  MorphoWithdrawCollateralRequest
> = z.object({
  actionType: z.literal("MORPHO_WITHDRAW_COLLATERAL").default(
    "MORPHO_WITHDRAW_COLLATERAL" as const,
  ),
  amount: z.union([z.number(), z.string()]),
  uniqueMarketKey: z.string(),
  onBehalfOf: z.nullable(z.string()).optional(),
  receiver: z.nullable(z.string()).optional(),
  chain: MorphoWithdrawCollateralRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    uniqueMarketKey: "unique_market_key",
    onBehalfOf: "on_behalf_of",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MorphoWithdrawCollateralRequest$ {
  /** @deprecated use `MorphoWithdrawCollateralRequest$inboundSchema` instead. */
  export const inboundSchema = MorphoWithdrawCollateralRequest$inboundSchema;
  /** @deprecated use `MorphoWithdrawCollateralRequest$outboundSchema` instead. */
  export const outboundSchema = MorphoWithdrawCollateralRequest$outboundSchema;
  /** @deprecated use `MorphoWithdrawCollateralRequest$Outbound` instead. */
  export type Outbound = MorphoWithdrawCollateralRequest$Outbound;
}

export function morphoWithdrawCollateralRequestToJSON(
  morphoWithdrawCollateralRequest: MorphoWithdrawCollateralRequest,
): string {
  return JSON.stringify(
    MorphoWithdrawCollateralRequest$outboundSchema.parse(
      morphoWithdrawCollateralRequest,
    ),
  );
}

export function morphoWithdrawCollateralRequestFromJSON(
  jsonString: string,
): SafeParseResult<MorphoWithdrawCollateralRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MorphoWithdrawCollateralRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MorphoWithdrawCollateralRequest' from JSON`,
  );
}
