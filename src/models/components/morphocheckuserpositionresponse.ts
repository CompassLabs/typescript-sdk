/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  MarketPosition,
  MarketPosition$inboundSchema,
  MarketPosition$Outbound,
  MarketPosition$outboundSchema,
} from "./marketposition.js";
import {
  UserState,
  UserState$inboundSchema,
  UserState$Outbound,
  UserState$outboundSchema,
} from "./userstate.js";
import {
  VaultPosition,
  VaultPosition$inboundSchema,
  VaultPosition$Outbound,
  VaultPosition$outboundSchema,
} from "./vaultposition.js";

export type MorphoCheckUserPositionResponse = {
  state: UserState;
  /**
   * A list of the user's vault positions.
   */
  vaultPositions: Array<VaultPosition>;
  /**
   * A list of the user's market positions.
   */
  marketPositions: Array<MarketPosition>;
};

/** @internal */
export const MorphoCheckUserPositionResponse$inboundSchema: z.ZodType<
  MorphoCheckUserPositionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  state: UserState$inboundSchema,
  vaultPositions: z.array(VaultPosition$inboundSchema),
  marketPositions: z.array(MarketPosition$inboundSchema),
});

/** @internal */
export type MorphoCheckUserPositionResponse$Outbound = {
  state: UserState$Outbound;
  vaultPositions: Array<VaultPosition$Outbound>;
  marketPositions: Array<MarketPosition$Outbound>;
};

/** @internal */
export const MorphoCheckUserPositionResponse$outboundSchema: z.ZodType<
  MorphoCheckUserPositionResponse$Outbound,
  z.ZodTypeDef,
  MorphoCheckUserPositionResponse
> = z.object({
  state: UserState$outboundSchema,
  vaultPositions: z.array(VaultPosition$outboundSchema),
  marketPositions: z.array(MarketPosition$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MorphoCheckUserPositionResponse$ {
  /** @deprecated use `MorphoCheckUserPositionResponse$inboundSchema` instead. */
  export const inboundSchema = MorphoCheckUserPositionResponse$inboundSchema;
  /** @deprecated use `MorphoCheckUserPositionResponse$outboundSchema` instead. */
  export const outboundSchema = MorphoCheckUserPositionResponse$outboundSchema;
  /** @deprecated use `MorphoCheckUserPositionResponse$Outbound` instead. */
  export type Outbound = MorphoCheckUserPositionResponse$Outbound;
}

export function morphoCheckUserPositionResponseToJSON(
  morphoCheckUserPositionResponse: MorphoCheckUserPositionResponse,
): string {
  return JSON.stringify(
    MorphoCheckUserPositionResponse$outboundSchema.parse(
      morphoCheckUserPositionResponse,
    ),
  );
}

export function morphoCheckUserPositionResponseFromJSON(
  jsonString: string,
): SafeParseResult<MorphoCheckUserPositionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MorphoCheckUserPositionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MorphoCheckUserPositionResponse' from JSON`,
  );
}
