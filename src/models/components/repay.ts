/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Reserve,
  Reserve$inboundSchema,
  Reserve$Outbound,
  Reserve$outboundSchema,
} from "./reserve.js";

export type Repay = {
  /**
   * The id of a historical transaction on aave
   */
  id: string;
  /**
   * Timestamp in unix time
   */
  timestamp: number;
  /**
   * Transaction hash. You can paste these into the search bar on etherscan
   */
  txHash: string;
  /**
   * Quantity of token
   */
  amount: number;
  reserve: Reserve;
  assetPriceUSD: number;
  /**
   * The type of transaction
   */
  action?: "Repay" | undefined;
  block: number;
};

/** @internal */
export const Repay$inboundSchema: z.ZodType<Repay, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    timestamp: z.number().int(),
    txHash: z.string(),
    amount: z.number(),
    reserve: Reserve$inboundSchema,
    assetPriceUSD: z.number(),
    action: z.literal("Repay").default("Repay").optional(),
    block: z.number().int(),
  });

/** @internal */
export type Repay$Outbound = {
  id: string;
  timestamp: number;
  txHash: string;
  amount: number;
  reserve: Reserve$Outbound;
  assetPriceUSD: number;
  action: "Repay";
  block: number;
};

/** @internal */
export const Repay$outboundSchema: z.ZodType<
  Repay$Outbound,
  z.ZodTypeDef,
  Repay
> = z.object({
  id: z.string(),
  timestamp: z.number().int(),
  txHash: z.string(),
  amount: z.number(),
  reserve: Reserve$outboundSchema,
  assetPriceUSD: z.number(),
  action: z.literal("Repay").default("Repay" as const),
  block: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Repay$ {
  /** @deprecated use `Repay$inboundSchema` instead. */
  export const inboundSchema = Repay$inboundSchema;
  /** @deprecated use `Repay$outboundSchema` instead. */
  export const outboundSchema = Repay$outboundSchema;
  /** @deprecated use `Repay$Outbound` instead. */
  export type Outbound = Repay$Outbound;
}

export function repayToJSON(repay: Repay): string {
  return JSON.stringify(Repay$outboundSchema.parse(repay));
}

export function repayFromJSON(
  jsonString: string,
): SafeParseResult<Repay, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Repay$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Repay' from JSON`,
  );
}
