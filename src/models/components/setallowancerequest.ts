/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const SetAllowanceRequestContractEnum = {
  AaveV3Pool: "AaveV3Pool",
  AerodromeBasicRouter: "AerodromeBasicRouter",
  AerodromeSlipstreamRouter: "AerodromeSlipstreamRouter",
  AerodromeSlipstreamNonfungiblePositionManager:
    "AerodromeSlipstreamNonfungiblePositionManager",
  UniswapV3Router: "UniswapV3Router",
  UniswapV3NFTPositionManager: "UniswapV3NFTPositionManager",
  Morpho: "Morpho",
  SkyDaiUsdsConverter: "SkyDaiUsdsConverter",
  SkyUsdcUsdsConverter: "SkyUsdcUsdsConverter",
  SkyUsdsVault: "SkyUsdsVault",
  PendleRouter: "PendleRouter",
  OdosRouter: "OdosRouter",
  EthenaVault: "EthenaVault",
} as const;
export type SetAllowanceRequestContractEnum = ClosedEnum<
  typeof SetAllowanceRequestContractEnum
>;

/**
 * The name or address of the contract to set spending allowance for.
 */
export type SetAllowanceRequestContractUnion =
  | SetAllowanceRequestContractEnum
  | string;

/**
 * The amount to set the allowance to.
 */
export type SetAllowanceRequestAmount = number | string;

export const SetAllowanceRequestChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type SetAllowanceRequestChain = ClosedEnum<
  typeof SetAllowanceRequestChain
>;

/**
 * Request model for increasing token allowance for a contract.
 */
export type SetAllowanceRequest = {
  actionType?: "SET_ALLOWANCE" | undefined;
  /**
   * The symbol or address of the token for which the allowance is set..
   */
  token: string;
  /**
   * The name or address of the contract to set spending allowance for.
   */
  contract: SetAllowanceRequestContractEnum | string;
  /**
   * The amount to set the allowance to.
   */
  amount: number | string;
  chain: SetAllowanceRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const SetAllowanceRequestContractEnum$inboundSchema: z.ZodNativeEnum<
  typeof SetAllowanceRequestContractEnum
> = z.nativeEnum(SetAllowanceRequestContractEnum);

/** @internal */
export const SetAllowanceRequestContractEnum$outboundSchema: z.ZodNativeEnum<
  typeof SetAllowanceRequestContractEnum
> = SetAllowanceRequestContractEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetAllowanceRequestContractEnum$ {
  /** @deprecated use `SetAllowanceRequestContractEnum$inboundSchema` instead. */
  export const inboundSchema = SetAllowanceRequestContractEnum$inboundSchema;
  /** @deprecated use `SetAllowanceRequestContractEnum$outboundSchema` instead. */
  export const outboundSchema = SetAllowanceRequestContractEnum$outboundSchema;
}

/** @internal */
export const SetAllowanceRequestContractUnion$inboundSchema: z.ZodType<
  SetAllowanceRequestContractUnion,
  z.ZodTypeDef,
  unknown
> = z.union([SetAllowanceRequestContractEnum$inboundSchema, z.string()]);

/** @internal */
export type SetAllowanceRequestContractUnion$Outbound = string | string;

/** @internal */
export const SetAllowanceRequestContractUnion$outboundSchema: z.ZodType<
  SetAllowanceRequestContractUnion$Outbound,
  z.ZodTypeDef,
  SetAllowanceRequestContractUnion
> = z.union([SetAllowanceRequestContractEnum$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetAllowanceRequestContractUnion$ {
  /** @deprecated use `SetAllowanceRequestContractUnion$inboundSchema` instead. */
  export const inboundSchema = SetAllowanceRequestContractUnion$inboundSchema;
  /** @deprecated use `SetAllowanceRequestContractUnion$outboundSchema` instead. */
  export const outboundSchema = SetAllowanceRequestContractUnion$outboundSchema;
  /** @deprecated use `SetAllowanceRequestContractUnion$Outbound` instead. */
  export type Outbound = SetAllowanceRequestContractUnion$Outbound;
}

export function setAllowanceRequestContractUnionToJSON(
  setAllowanceRequestContractUnion: SetAllowanceRequestContractUnion,
): string {
  return JSON.stringify(
    SetAllowanceRequestContractUnion$outboundSchema.parse(
      setAllowanceRequestContractUnion,
    ),
  );
}

export function setAllowanceRequestContractUnionFromJSON(
  jsonString: string,
): SafeParseResult<SetAllowanceRequestContractUnion, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SetAllowanceRequestContractUnion$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SetAllowanceRequestContractUnion' from JSON`,
  );
}

/** @internal */
export const SetAllowanceRequestAmount$inboundSchema: z.ZodType<
  SetAllowanceRequestAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type SetAllowanceRequestAmount$Outbound = number | string;

/** @internal */
export const SetAllowanceRequestAmount$outboundSchema: z.ZodType<
  SetAllowanceRequestAmount$Outbound,
  z.ZodTypeDef,
  SetAllowanceRequestAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetAllowanceRequestAmount$ {
  /** @deprecated use `SetAllowanceRequestAmount$inboundSchema` instead. */
  export const inboundSchema = SetAllowanceRequestAmount$inboundSchema;
  /** @deprecated use `SetAllowanceRequestAmount$outboundSchema` instead. */
  export const outboundSchema = SetAllowanceRequestAmount$outboundSchema;
  /** @deprecated use `SetAllowanceRequestAmount$Outbound` instead. */
  export type Outbound = SetAllowanceRequestAmount$Outbound;
}

export function setAllowanceRequestAmountToJSON(
  setAllowanceRequestAmount: SetAllowanceRequestAmount,
): string {
  return JSON.stringify(
    SetAllowanceRequestAmount$outboundSchema.parse(setAllowanceRequestAmount),
  );
}

export function setAllowanceRequestAmountFromJSON(
  jsonString: string,
): SafeParseResult<SetAllowanceRequestAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SetAllowanceRequestAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SetAllowanceRequestAmount' from JSON`,
  );
}

/** @internal */
export const SetAllowanceRequestChain$inboundSchema: z.ZodNativeEnum<
  typeof SetAllowanceRequestChain
> = z.nativeEnum(SetAllowanceRequestChain);

/** @internal */
export const SetAllowanceRequestChain$outboundSchema: z.ZodNativeEnum<
  typeof SetAllowanceRequestChain
> = SetAllowanceRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetAllowanceRequestChain$ {
  /** @deprecated use `SetAllowanceRequestChain$inboundSchema` instead. */
  export const inboundSchema = SetAllowanceRequestChain$inboundSchema;
  /** @deprecated use `SetAllowanceRequestChain$outboundSchema` instead. */
  export const outboundSchema = SetAllowanceRequestChain$outboundSchema;
}

/** @internal */
export const SetAllowanceRequest$inboundSchema: z.ZodType<
  SetAllowanceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("SET_ALLOWANCE").default("SET_ALLOWANCE"),
  token: z.string(),
  contract: z.union([
    SetAllowanceRequestContractEnum$inboundSchema,
    z.string(),
  ]),
  amount: z.union([z.number(), z.string()]),
  chain: SetAllowanceRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type SetAllowanceRequest$Outbound = {
  action_type: "SET_ALLOWANCE";
  token: string;
  contract: string | string;
  amount: number | string;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const SetAllowanceRequest$outboundSchema: z.ZodType<
  SetAllowanceRequest$Outbound,
  z.ZodTypeDef,
  SetAllowanceRequest
> = z.object({
  actionType: z.literal("SET_ALLOWANCE").default("SET_ALLOWANCE" as const),
  token: z.string(),
  contract: z.union([
    SetAllowanceRequestContractEnum$outboundSchema,
    z.string(),
  ]),
  amount: z.union([z.number(), z.string()]),
  chain: SetAllowanceRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SetAllowanceRequest$ {
  /** @deprecated use `SetAllowanceRequest$inboundSchema` instead. */
  export const inboundSchema = SetAllowanceRequest$inboundSchema;
  /** @deprecated use `SetAllowanceRequest$outboundSchema` instead. */
  export const outboundSchema = SetAllowanceRequest$outboundSchema;
  /** @deprecated use `SetAllowanceRequest$Outbound` instead. */
  export type Outbound = SetAllowanceRequest$Outbound;
}

export function setAllowanceRequestToJSON(
  setAllowanceRequest: SetAllowanceRequest,
): string {
  return JSON.stringify(
    SetAllowanceRequest$outboundSchema.parse(setAllowanceRequest),
  );
}

export function setAllowanceRequestFromJSON(
  jsonString: string,
): SafeParseResult<SetAllowanceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SetAllowanceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SetAllowanceRequest' from JSON`,
  );
}
