/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The amount of the token to swap from
 */
export type AerodromeSlipstreamSellExactlyParamsAmountIn = number | string;

/**
 * The minimum amount of the token to swap to, defaults to 0
 */
export type AerodromeSlipstreamSellExactlyParamsAmountOutMinimum =
  | number
  | string;

/**
 * Parameters model for selling exactly an amount of tokens.
 */
export type AerodromeSlipstreamSellExactlyParams = {
  actionType?: "AERODROME_SLIPSTREAM_SELL_EXACTLY" | undefined;
  /**
   * The symbol or address of the token to swap from.
   */
  tokenIn: string;
  /**
   * The symbol or address of the token to swap to.
   */
  tokenOut: string;
  /**
   * The tick spacing of the pool
   */
  tickSpacing: number;
  /**
   * The amount of the token to swap from
   */
  amountIn: number | string;
  /**
   * The minimum amount of the token to swap to, defaults to 0
   */
  amountOutMinimum?: number | string | undefined;
};

/** @internal */
export const AerodromeSlipstreamSellExactlyParamsAmountIn$inboundSchema:
  z.ZodType<
    AerodromeSlipstreamSellExactlyParamsAmountIn,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type AerodromeSlipstreamSellExactlyParamsAmountIn$Outbound =
  | number
  | string;

/** @internal */
export const AerodromeSlipstreamSellExactlyParamsAmountIn$outboundSchema:
  z.ZodType<
    AerodromeSlipstreamSellExactlyParamsAmountIn$Outbound,
    z.ZodTypeDef,
    AerodromeSlipstreamSellExactlyParamsAmountIn
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamSellExactlyParamsAmountIn$ {
  /** @deprecated use `AerodromeSlipstreamSellExactlyParamsAmountIn$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamSellExactlyParamsAmountIn$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamSellExactlyParamsAmountIn$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamSellExactlyParamsAmountIn$outboundSchema;
  /** @deprecated use `AerodromeSlipstreamSellExactlyParamsAmountIn$Outbound` instead. */
  export type Outbound = AerodromeSlipstreamSellExactlyParamsAmountIn$Outbound;
}

export function aerodromeSlipstreamSellExactlyParamsAmountInToJSON(
  aerodromeSlipstreamSellExactlyParamsAmountIn:
    AerodromeSlipstreamSellExactlyParamsAmountIn,
): string {
  return JSON.stringify(
    AerodromeSlipstreamSellExactlyParamsAmountIn$outboundSchema.parse(
      aerodromeSlipstreamSellExactlyParamsAmountIn,
    ),
  );
}

export function aerodromeSlipstreamSellExactlyParamsAmountInFromJSON(
  jsonString: string,
): SafeParseResult<
  AerodromeSlipstreamSellExactlyParamsAmountIn,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AerodromeSlipstreamSellExactlyParamsAmountIn$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AerodromeSlipstreamSellExactlyParamsAmountIn' from JSON`,
  );
}

/** @internal */
export const AerodromeSlipstreamSellExactlyParamsAmountOutMinimum$inboundSchema:
  z.ZodType<
    AerodromeSlipstreamSellExactlyParamsAmountOutMinimum,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type AerodromeSlipstreamSellExactlyParamsAmountOutMinimum$Outbound =
  | number
  | string;

/** @internal */
export const AerodromeSlipstreamSellExactlyParamsAmountOutMinimum$outboundSchema:
  z.ZodType<
    AerodromeSlipstreamSellExactlyParamsAmountOutMinimum$Outbound,
    z.ZodTypeDef,
    AerodromeSlipstreamSellExactlyParamsAmountOutMinimum
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamSellExactlyParamsAmountOutMinimum$ {
  /** @deprecated use `AerodromeSlipstreamSellExactlyParamsAmountOutMinimum$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamSellExactlyParamsAmountOutMinimum$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamSellExactlyParamsAmountOutMinimum$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamSellExactlyParamsAmountOutMinimum$outboundSchema;
  /** @deprecated use `AerodromeSlipstreamSellExactlyParamsAmountOutMinimum$Outbound` instead. */
  export type Outbound =
    AerodromeSlipstreamSellExactlyParamsAmountOutMinimum$Outbound;
}

export function aerodromeSlipstreamSellExactlyParamsAmountOutMinimumToJSON(
  aerodromeSlipstreamSellExactlyParamsAmountOutMinimum:
    AerodromeSlipstreamSellExactlyParamsAmountOutMinimum,
): string {
  return JSON.stringify(
    AerodromeSlipstreamSellExactlyParamsAmountOutMinimum$outboundSchema.parse(
      aerodromeSlipstreamSellExactlyParamsAmountOutMinimum,
    ),
  );
}

export function aerodromeSlipstreamSellExactlyParamsAmountOutMinimumFromJSON(
  jsonString: string,
): SafeParseResult<
  AerodromeSlipstreamSellExactlyParamsAmountOutMinimum,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AerodromeSlipstreamSellExactlyParamsAmountOutMinimum$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AerodromeSlipstreamSellExactlyParamsAmountOutMinimum' from JSON`,
  );
}

/** @internal */
export const AerodromeSlipstreamSellExactlyParams$inboundSchema: z.ZodType<
  AerodromeSlipstreamSellExactlyParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("AERODROME_SLIPSTREAM_SELL_EXACTLY").default(
    "AERODROME_SLIPSTREAM_SELL_EXACTLY",
  ),
  token_in: z.string(),
  token_out: z.string(),
  tick_spacing: z.number().int(),
  amount_in: z.union([z.number(), z.string()]),
  amount_out_minimum: z.union([z.number(), z.string()]).optional(),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "token_in": "tokenIn",
    "token_out": "tokenOut",
    "tick_spacing": "tickSpacing",
    "amount_in": "amountIn",
    "amount_out_minimum": "amountOutMinimum",
  });
});

/** @internal */
export type AerodromeSlipstreamSellExactlyParams$Outbound = {
  action_type: "AERODROME_SLIPSTREAM_SELL_EXACTLY";
  token_in: string;
  token_out: string;
  tick_spacing: number;
  amount_in: number | string;
  amount_out_minimum?: number | string | undefined;
};

/** @internal */
export const AerodromeSlipstreamSellExactlyParams$outboundSchema: z.ZodType<
  AerodromeSlipstreamSellExactlyParams$Outbound,
  z.ZodTypeDef,
  AerodromeSlipstreamSellExactlyParams
> = z.object({
  actionType: z.literal("AERODROME_SLIPSTREAM_SELL_EXACTLY").default(
    "AERODROME_SLIPSTREAM_SELL_EXACTLY" as const,
  ),
  tokenIn: z.string(),
  tokenOut: z.string(),
  tickSpacing: z.number().int(),
  amountIn: z.union([z.number(), z.string()]),
  amountOutMinimum: z.union([z.number(), z.string()]).optional(),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    tokenIn: "token_in",
    tokenOut: "token_out",
    tickSpacing: "tick_spacing",
    amountIn: "amount_in",
    amountOutMinimum: "amount_out_minimum",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamSellExactlyParams$ {
  /** @deprecated use `AerodromeSlipstreamSellExactlyParams$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamSellExactlyParams$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamSellExactlyParams$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamSellExactlyParams$outboundSchema;
  /** @deprecated use `AerodromeSlipstreamSellExactlyParams$Outbound` instead. */
  export type Outbound = AerodromeSlipstreamSellExactlyParams$Outbound;
}

export function aerodromeSlipstreamSellExactlyParamsToJSON(
  aerodromeSlipstreamSellExactlyParams: AerodromeSlipstreamSellExactlyParams,
): string {
  return JSON.stringify(
    AerodromeSlipstreamSellExactlyParams$outboundSchema.parse(
      aerodromeSlipstreamSellExactlyParams,
    ),
  );
}

export function aerodromeSlipstreamSellExactlyParamsFromJSON(
  jsonString: string,
): SafeParseResult<AerodromeSlipstreamSellExactlyParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      AerodromeSlipstreamSellExactlyParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AerodromeSlipstreamSellExactlyParams' from JSON`,
  );
}
