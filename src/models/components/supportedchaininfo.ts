/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import { Chain, Chain$inboundSchema, Chain$outboundSchema } from "./chain.js";

/**
 * Response model for a chain.
 */
export type SupportedChainInfo = {
  chains: Array<Chain>;
};

/** @internal */
export const SupportedChainInfo$inboundSchema: z.ZodType<
  SupportedChainInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  chains: z.array(Chain$inboundSchema),
});

/** @internal */
export type SupportedChainInfo$Outbound = {
  chains: Array<string>;
};

/** @internal */
export const SupportedChainInfo$outboundSchema: z.ZodType<
  SupportedChainInfo$Outbound,
  z.ZodTypeDef,
  SupportedChainInfo
> = z.object({
  chains: z.array(Chain$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SupportedChainInfo$ {
  /** @deprecated use `SupportedChainInfo$inboundSchema` instead. */
  export const inboundSchema = SupportedChainInfo$inboundSchema;
  /** @deprecated use `SupportedChainInfo$outboundSchema` instead. */
  export const outboundSchema = SupportedChainInfo$outboundSchema;
  /** @deprecated use `SupportedChainInfo$Outbound` instead. */
  export type Outbound = SupportedChainInfo$Outbound;
}

export function supportedChainInfoToJSON(
  supportedChainInfo: SupportedChainInfo,
): string {
  return JSON.stringify(
    SupportedChainInfo$outboundSchema.parse(supportedChainInfo),
  );
}

export function supportedChainInfoFromJSON(
  jsonString: string,
): SafeParseResult<SupportedChainInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SupportedChainInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SupportedChainInfo' from JSON`,
  );
}
