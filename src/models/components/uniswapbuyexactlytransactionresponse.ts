/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UnsignedTransaction,
  UnsignedTransaction$inboundSchema,
  UnsignedTransaction$Outbound,
  UnsignedTransaction$outboundSchema,
} from "./unsignedtransaction.js";
import {
  UserOperationResponse,
  UserOperationResponse$inboundSchema,
  UserOperationResponse$Outbound,
  UserOperationResponse$outboundSchema,
} from "./useroperationresponse.js";

/**
 * The unsigned transaction data. User must sign and broadcast to network.
 */
export type UniswapBuyExactlyTransactionResponseTransaction =
  | UnsignedTransaction
  | UserOperationResponse;

export type UniswapBuyExactlyTransactionResponse = {
  /**
   * The unsigned transaction data. User must sign and broadcast to network.
   */
  transaction: UnsignedTransaction | UserOperationResponse;
  /**
   * The estimated amount in for the transaction. The actual input amount for this transaction is guaranteed be within the acceptable threshold, defined by the `max_slippage_percent`, relative to this quote.
   */
  amountInQuote: string;
};

/** @internal */
export const UniswapBuyExactlyTransactionResponseTransaction$inboundSchema:
  z.ZodType<
    UniswapBuyExactlyTransactionResponseTransaction,
    z.ZodTypeDef,
    unknown
  > = z.union([
    UnsignedTransaction$inboundSchema,
    UserOperationResponse$inboundSchema,
  ]);

/** @internal */
export type UniswapBuyExactlyTransactionResponseTransaction$Outbound =
  | UnsignedTransaction$Outbound
  | UserOperationResponse$Outbound;

/** @internal */
export const UniswapBuyExactlyTransactionResponseTransaction$outboundSchema:
  z.ZodType<
    UniswapBuyExactlyTransactionResponseTransaction$Outbound,
    z.ZodTypeDef,
    UniswapBuyExactlyTransactionResponseTransaction
  > = z.union([
    UnsignedTransaction$outboundSchema,
    UserOperationResponse$outboundSchema,
  ]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapBuyExactlyTransactionResponseTransaction$ {
  /** @deprecated use `UniswapBuyExactlyTransactionResponseTransaction$inboundSchema` instead. */
  export const inboundSchema =
    UniswapBuyExactlyTransactionResponseTransaction$inboundSchema;
  /** @deprecated use `UniswapBuyExactlyTransactionResponseTransaction$outboundSchema` instead. */
  export const outboundSchema =
    UniswapBuyExactlyTransactionResponseTransaction$outboundSchema;
  /** @deprecated use `UniswapBuyExactlyTransactionResponseTransaction$Outbound` instead. */
  export type Outbound =
    UniswapBuyExactlyTransactionResponseTransaction$Outbound;
}

export function uniswapBuyExactlyTransactionResponseTransactionToJSON(
  uniswapBuyExactlyTransactionResponseTransaction:
    UniswapBuyExactlyTransactionResponseTransaction,
): string {
  return JSON.stringify(
    UniswapBuyExactlyTransactionResponseTransaction$outboundSchema.parse(
      uniswapBuyExactlyTransactionResponseTransaction,
    ),
  );
}

export function uniswapBuyExactlyTransactionResponseTransactionFromJSON(
  jsonString: string,
): SafeParseResult<
  UniswapBuyExactlyTransactionResponseTransaction,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UniswapBuyExactlyTransactionResponseTransaction$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UniswapBuyExactlyTransactionResponseTransaction' from JSON`,
  );
}

/** @internal */
export const UniswapBuyExactlyTransactionResponse$inboundSchema: z.ZodType<
  UniswapBuyExactlyTransactionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  transaction: z.union([
    UnsignedTransaction$inboundSchema,
    UserOperationResponse$inboundSchema,
  ]),
  amount_in_quote: z.string(),
}).transform((v) => {
  return remap$(v, {
    "amount_in_quote": "amountInQuote",
  });
});

/** @internal */
export type UniswapBuyExactlyTransactionResponse$Outbound = {
  transaction: UnsignedTransaction$Outbound | UserOperationResponse$Outbound;
  amount_in_quote: string;
};

/** @internal */
export const UniswapBuyExactlyTransactionResponse$outboundSchema: z.ZodType<
  UniswapBuyExactlyTransactionResponse$Outbound,
  z.ZodTypeDef,
  UniswapBuyExactlyTransactionResponse
> = z.object({
  transaction: z.union([
    UnsignedTransaction$outboundSchema,
    UserOperationResponse$outboundSchema,
  ]),
  amountInQuote: z.string(),
}).transform((v) => {
  return remap$(v, {
    amountInQuote: "amount_in_quote",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapBuyExactlyTransactionResponse$ {
  /** @deprecated use `UniswapBuyExactlyTransactionResponse$inboundSchema` instead. */
  export const inboundSchema =
    UniswapBuyExactlyTransactionResponse$inboundSchema;
  /** @deprecated use `UniswapBuyExactlyTransactionResponse$outboundSchema` instead. */
  export const outboundSchema =
    UniswapBuyExactlyTransactionResponse$outboundSchema;
  /** @deprecated use `UniswapBuyExactlyTransactionResponse$Outbound` instead. */
  export type Outbound = UniswapBuyExactlyTransactionResponse$Outbound;
}

export function uniswapBuyExactlyTransactionResponseToJSON(
  uniswapBuyExactlyTransactionResponse: UniswapBuyExactlyTransactionResponse,
): string {
  return JSON.stringify(
    UniswapBuyExactlyTransactionResponse$outboundSchema.parse(
      uniswapBuyExactlyTransactionResponse,
    ),
  );
}

export function uniswapBuyExactlyTransactionResponseFromJSON(
  jsonString: string,
): SafeParseResult<UniswapBuyExactlyTransactionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UniswapBuyExactlyTransactionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UniswapBuyExactlyTransactionResponse' from JSON`,
  );
}
