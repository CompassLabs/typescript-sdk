/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type LpBalance = {
  valuation: number;
  balance: string;
  activeBalance: string;
};

/** @internal */
export const LpBalance$inboundSchema: z.ZodType<
  LpBalance,
  z.ZodTypeDef,
  unknown
> = z.object({
  valuation: z.number(),
  balance: z.string(),
  activeBalance: z.string(),
});

/** @internal */
export type LpBalance$Outbound = {
  valuation: number;
  balance: string;
  activeBalance: string;
};

/** @internal */
export const LpBalance$outboundSchema: z.ZodType<
  LpBalance$Outbound,
  z.ZodTypeDef,
  LpBalance
> = z.object({
  valuation: z.number(),
  balance: z.string(),
  activeBalance: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace LpBalance$ {
  /** @deprecated use `LpBalance$inboundSchema` instead. */
  export const inboundSchema = LpBalance$inboundSchema;
  /** @deprecated use `LpBalance$outboundSchema` instead. */
  export const outboundSchema = LpBalance$outboundSchema;
  /** @deprecated use `LpBalance$Outbound` instead. */
  export type Outbound = LpBalance$Outbound;
}

export function lpBalanceToJSON(lpBalance: LpBalance): string {
  return JSON.stringify(LpBalance$outboundSchema.parse(lpBalance));
}

export function lpBalanceFromJSON(
  jsonString: string,
): SafeParseResult<LpBalance, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => LpBalance$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'LpBalance' from JSON`,
  );
}
