/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FeeEnum,
  FeeEnum$inboundSchema,
  FeeEnum$outboundSchema,
} from "./feeenum.js";

/**
 * The amount of 'token_out' to buy.
 */
export type UniswapBuyExactlyParamsAmountOut = number | string;

export type UniswapBuyExactlyParams = {
  actionType?: "UNISWAP_BUY_EXACTLY" | undefined;
  /**
   * The symbol or address of the token to swap from..
   */
  tokenIn: string;
  /**
   * The symbol or address of the token to swap to..
   */
  tokenOut: string;
  /**
   * The transaction fee of a Uniswap pool in bips.
   *
   * @remarks
   *
   * Uniswap supports 4 different fee levels.
   */
  fee: FeeEnum;
  /**
   * The amount of 'token_out' to buy.
   */
  amountOut: number | string;
  /**
   * The maximum slippage allowed in percent. e.g. `1` means `1 %` slippage allowed.
   */
  maxSlippagePercent: number;
};

/** @internal */
export const UniswapBuyExactlyParamsAmountOut$inboundSchema: z.ZodType<
  UniswapBuyExactlyParamsAmountOut,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type UniswapBuyExactlyParamsAmountOut$Outbound = number | string;

/** @internal */
export const UniswapBuyExactlyParamsAmountOut$outboundSchema: z.ZodType<
  UniswapBuyExactlyParamsAmountOut$Outbound,
  z.ZodTypeDef,
  UniswapBuyExactlyParamsAmountOut
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapBuyExactlyParamsAmountOut$ {
  /** @deprecated use `UniswapBuyExactlyParamsAmountOut$inboundSchema` instead. */
  export const inboundSchema = UniswapBuyExactlyParamsAmountOut$inboundSchema;
  /** @deprecated use `UniswapBuyExactlyParamsAmountOut$outboundSchema` instead. */
  export const outboundSchema = UniswapBuyExactlyParamsAmountOut$outboundSchema;
  /** @deprecated use `UniswapBuyExactlyParamsAmountOut$Outbound` instead. */
  export type Outbound = UniswapBuyExactlyParamsAmountOut$Outbound;
}

export function uniswapBuyExactlyParamsAmountOutToJSON(
  uniswapBuyExactlyParamsAmountOut: UniswapBuyExactlyParamsAmountOut,
): string {
  return JSON.stringify(
    UniswapBuyExactlyParamsAmountOut$outboundSchema.parse(
      uniswapBuyExactlyParamsAmountOut,
    ),
  );
}

export function uniswapBuyExactlyParamsAmountOutFromJSON(
  jsonString: string,
): SafeParseResult<UniswapBuyExactlyParamsAmountOut, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UniswapBuyExactlyParamsAmountOut$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UniswapBuyExactlyParamsAmountOut' from JSON`,
  );
}

/** @internal */
export const UniswapBuyExactlyParams$inboundSchema: z.ZodType<
  UniswapBuyExactlyParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("UNISWAP_BUY_EXACTLY").default("UNISWAP_BUY_EXACTLY"),
  token_in: z.string(),
  token_out: z.string(),
  fee: FeeEnum$inboundSchema,
  amount_out: z.union([z.number(), z.string()]),
  max_slippage_percent: z.number(),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "token_in": "tokenIn",
    "token_out": "tokenOut",
    "amount_out": "amountOut",
    "max_slippage_percent": "maxSlippagePercent",
  });
});

/** @internal */
export type UniswapBuyExactlyParams$Outbound = {
  action_type: "UNISWAP_BUY_EXACTLY";
  token_in: string;
  token_out: string;
  fee: string;
  amount_out: number | string;
  max_slippage_percent: number;
};

/** @internal */
export const UniswapBuyExactlyParams$outboundSchema: z.ZodType<
  UniswapBuyExactlyParams$Outbound,
  z.ZodTypeDef,
  UniswapBuyExactlyParams
> = z.object({
  actionType: z.literal("UNISWAP_BUY_EXACTLY").default(
    "UNISWAP_BUY_EXACTLY" as const,
  ),
  tokenIn: z.string(),
  tokenOut: z.string(),
  fee: FeeEnum$outboundSchema,
  amountOut: z.union([z.number(), z.string()]),
  maxSlippagePercent: z.number(),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    tokenIn: "token_in",
    tokenOut: "token_out",
    amountOut: "amount_out",
    maxSlippagePercent: "max_slippage_percent",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapBuyExactlyParams$ {
  /** @deprecated use `UniswapBuyExactlyParams$inboundSchema` instead. */
  export const inboundSchema = UniswapBuyExactlyParams$inboundSchema;
  /** @deprecated use `UniswapBuyExactlyParams$outboundSchema` instead. */
  export const outboundSchema = UniswapBuyExactlyParams$outboundSchema;
  /** @deprecated use `UniswapBuyExactlyParams$Outbound` instead. */
  export type Outbound = UniswapBuyExactlyParams$Outbound;
}

export function uniswapBuyExactlyParamsToJSON(
  uniswapBuyExactlyParams: UniswapBuyExactlyParams,
): string {
  return JSON.stringify(
    UniswapBuyExactlyParams$outboundSchema.parse(uniswapBuyExactlyParams),
  );
}

export function uniswapBuyExactlyParamsFromJSON(
  jsonString: string,
): SafeParseResult<UniswapBuyExactlyParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UniswapBuyExactlyParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UniswapBuyExactlyParams' from JSON`,
  );
}
