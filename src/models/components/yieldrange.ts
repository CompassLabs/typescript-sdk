/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type YieldRange = {
  min: number;
  max: number;
};

/** @internal */
export const YieldRange$inboundSchema: z.ZodType<
  YieldRange,
  z.ZodTypeDef,
  unknown
> = z.object({
  min: z.number(),
  max: z.number(),
});

/** @internal */
export type YieldRange$Outbound = {
  min: number;
  max: number;
};

/** @internal */
export const YieldRange$outboundSchema: z.ZodType<
  YieldRange$Outbound,
  z.ZodTypeDef,
  YieldRange
> = z.object({
  min: z.number(),
  max: z.number(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace YieldRange$ {
  /** @deprecated use `YieldRange$inboundSchema` instead. */
  export const inboundSchema = YieldRange$inboundSchema;
  /** @deprecated use `YieldRange$outboundSchema` instead. */
  export const outboundSchema = YieldRange$outboundSchema;
  /** @deprecated use `YieldRange$Outbound` instead. */
  export type Outbound = YieldRange$Outbound;
}

export function yieldRangeToJSON(yieldRange: YieldRange): string {
  return JSON.stringify(YieldRange$outboundSchema.parse(yieldRange));
}

export function yieldRangeFromJSON(
  jsonString: string,
): SafeParseResult<YieldRange, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => YieldRange$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'YieldRange' from JSON`,
  );
}
