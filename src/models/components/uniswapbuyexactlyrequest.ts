/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FeeEnum,
  FeeEnum$inboundSchema,
  FeeEnum$outboundSchema,
} from "./feeenum.js";

/**
 * The amount of 'token_out' to buy.
 */
export type UniswapBuyExactlyRequestAmountOut = number | string;

export const UniswapBuyExactlyRequestChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type UniswapBuyExactlyRequestChain = ClosedEnum<
  typeof UniswapBuyExactlyRequestChain
>;

/**
 * Request model for buying an exact amount of tokens.
 */
export type UniswapBuyExactlyRequest = {
  actionType?: "UNISWAP_BUY_EXACTLY" | undefined;
  /**
   * The symbol or address of the token to swap from..
   */
  tokenIn: string;
  /**
   * The symbol or address of the token to swap to..
   */
  tokenOut: string;
  /**
   * The transaction fee of a Uniswap pool in bips.
   *
   * @remarks
   *
   * Uniswap supports 4 different fee levels.
   */
  fee: FeeEnum;
  /**
   * The amount of 'token_out' to buy.
   */
  amountOut: number | string;
  /**
   * The maximum slippage allowed in percent. e.g. `1` means `1 %` slippage allowed.
   */
  maxSlippagePercent: number;
  chain: UniswapBuyExactlyRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const UniswapBuyExactlyRequestAmountOut$inboundSchema: z.ZodType<
  UniswapBuyExactlyRequestAmountOut,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type UniswapBuyExactlyRequestAmountOut$Outbound = number | string;

/** @internal */
export const UniswapBuyExactlyRequestAmountOut$outboundSchema: z.ZodType<
  UniswapBuyExactlyRequestAmountOut$Outbound,
  z.ZodTypeDef,
  UniswapBuyExactlyRequestAmountOut
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapBuyExactlyRequestAmountOut$ {
  /** @deprecated use `UniswapBuyExactlyRequestAmountOut$inboundSchema` instead. */
  export const inboundSchema = UniswapBuyExactlyRequestAmountOut$inboundSchema;
  /** @deprecated use `UniswapBuyExactlyRequestAmountOut$outboundSchema` instead. */
  export const outboundSchema =
    UniswapBuyExactlyRequestAmountOut$outboundSchema;
  /** @deprecated use `UniswapBuyExactlyRequestAmountOut$Outbound` instead. */
  export type Outbound = UniswapBuyExactlyRequestAmountOut$Outbound;
}

export function uniswapBuyExactlyRequestAmountOutToJSON(
  uniswapBuyExactlyRequestAmountOut: UniswapBuyExactlyRequestAmountOut,
): string {
  return JSON.stringify(
    UniswapBuyExactlyRequestAmountOut$outboundSchema.parse(
      uniswapBuyExactlyRequestAmountOut,
    ),
  );
}

export function uniswapBuyExactlyRequestAmountOutFromJSON(
  jsonString: string,
): SafeParseResult<UniswapBuyExactlyRequestAmountOut, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UniswapBuyExactlyRequestAmountOut$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UniswapBuyExactlyRequestAmountOut' from JSON`,
  );
}

/** @internal */
export const UniswapBuyExactlyRequestChain$inboundSchema: z.ZodNativeEnum<
  typeof UniswapBuyExactlyRequestChain
> = z.nativeEnum(UniswapBuyExactlyRequestChain);

/** @internal */
export const UniswapBuyExactlyRequestChain$outboundSchema: z.ZodNativeEnum<
  typeof UniswapBuyExactlyRequestChain
> = UniswapBuyExactlyRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapBuyExactlyRequestChain$ {
  /** @deprecated use `UniswapBuyExactlyRequestChain$inboundSchema` instead. */
  export const inboundSchema = UniswapBuyExactlyRequestChain$inboundSchema;
  /** @deprecated use `UniswapBuyExactlyRequestChain$outboundSchema` instead. */
  export const outboundSchema = UniswapBuyExactlyRequestChain$outboundSchema;
}

/** @internal */
export const UniswapBuyExactlyRequest$inboundSchema: z.ZodType<
  UniswapBuyExactlyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("UNISWAP_BUY_EXACTLY").default("UNISWAP_BUY_EXACTLY"),
  token_in: z.string(),
  token_out: z.string(),
  fee: FeeEnum$inboundSchema,
  amount_out: z.union([z.number(), z.string()]),
  max_slippage_percent: z.number(),
  chain: UniswapBuyExactlyRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "token_in": "tokenIn",
    "token_out": "tokenOut",
    "amount_out": "amountOut",
    "max_slippage_percent": "maxSlippagePercent",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type UniswapBuyExactlyRequest$Outbound = {
  action_type: "UNISWAP_BUY_EXACTLY";
  token_in: string;
  token_out: string;
  fee: string;
  amount_out: number | string;
  max_slippage_percent: number;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const UniswapBuyExactlyRequest$outboundSchema: z.ZodType<
  UniswapBuyExactlyRequest$Outbound,
  z.ZodTypeDef,
  UniswapBuyExactlyRequest
> = z.object({
  actionType: z.literal("UNISWAP_BUY_EXACTLY").default(
    "UNISWAP_BUY_EXACTLY" as const,
  ),
  tokenIn: z.string(),
  tokenOut: z.string(),
  fee: FeeEnum$outboundSchema,
  amountOut: z.union([z.number(), z.string()]),
  maxSlippagePercent: z.number(),
  chain: UniswapBuyExactlyRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    tokenIn: "token_in",
    tokenOut: "token_out",
    amountOut: "amount_out",
    maxSlippagePercent: "max_slippage_percent",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapBuyExactlyRequest$ {
  /** @deprecated use `UniswapBuyExactlyRequest$inboundSchema` instead. */
  export const inboundSchema = UniswapBuyExactlyRequest$inboundSchema;
  /** @deprecated use `UniswapBuyExactlyRequest$outboundSchema` instead. */
  export const outboundSchema = UniswapBuyExactlyRequest$outboundSchema;
  /** @deprecated use `UniswapBuyExactlyRequest$Outbound` instead. */
  export type Outbound = UniswapBuyExactlyRequest$Outbound;
}

export function uniswapBuyExactlyRequestToJSON(
  uniswapBuyExactlyRequest: UniswapBuyExactlyRequest,
): string {
  return JSON.stringify(
    UniswapBuyExactlyRequest$outboundSchema.parse(uniswapBuyExactlyRequest),
  );
}

export function uniswapBuyExactlyRequestFromJSON(
  jsonString: string,
): SafeParseResult<UniswapBuyExactlyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UniswapBuyExactlyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UniswapBuyExactlyRequest' from JSON`,
  );
}
