/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  FeeEnum,
  FeeEnum$inboundSchema,
  FeeEnum$outboundSchema,
} from "./feeenum.js";

/**
 * The desired amount of the first token to deposit
 */
export type UniswapMintLiquidityProvisionParamsAmount0Desired = number | string;

/**
 * The desired amount of the second token to deposit
 */
export type UniswapMintLiquidityProvisionParamsAmount1Desired = number | string;

/**
 * The minimum amount of the first token to deposit
 */
export type UniswapMintLiquidityProvisionParamsAmount0Min = number | string;

/**
 * The minimum amount of the second token to deposit
 */
export type UniswapMintLiquidityProvisionParamsAmount1Min = number | string;

export type UniswapMintLiquidityProvisionParams = {
  actionType?: "UNISWAP_MINT_LIQUIDITY_PROVISION" | undefined;
  /**
   * The symbol or address of the first token in the pair.
   */
  token0: string;
  /**
   * The symbol or address of the second token in the pair.
   */
  token1: string;
  /**
   * The transaction fee of a Uniswap pool in bips.
   *
   * @remarks
   *
   * Uniswap supports 4 different fee levels.
   */
  fee: FeeEnum;
  /**
   * The lower tick of the range to mint the position in
   */
  tickLower: number;
  /**
   * The upper tick of the range to mint the position in
   */
  tickUpper: number;
  /**
   * The desired amount of the first token to deposit
   */
  amount0Desired: number | string;
  /**
   * The desired amount of the second token to deposit
   */
  amount1Desired: number | string;
  /**
   * The minimum amount of the first token to deposit
   */
  amount0Min: number | string;
  /**
   * The minimum amount of the second token to deposit
   */
  amount1Min: number | string;
  /**
   * The address that will receive the LP tokens
   */
  recipient?: string | null | undefined;
};

/** @internal */
export const UniswapMintLiquidityProvisionParamsAmount0Desired$inboundSchema:
  z.ZodType<
    UniswapMintLiquidityProvisionParamsAmount0Desired,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type UniswapMintLiquidityProvisionParamsAmount0Desired$Outbound =
  | number
  | string;

/** @internal */
export const UniswapMintLiquidityProvisionParamsAmount0Desired$outboundSchema:
  z.ZodType<
    UniswapMintLiquidityProvisionParamsAmount0Desired$Outbound,
    z.ZodTypeDef,
    UniswapMintLiquidityProvisionParamsAmount0Desired
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapMintLiquidityProvisionParamsAmount0Desired$ {
  /** @deprecated use `UniswapMintLiquidityProvisionParamsAmount0Desired$inboundSchema` instead. */
  export const inboundSchema =
    UniswapMintLiquidityProvisionParamsAmount0Desired$inboundSchema;
  /** @deprecated use `UniswapMintLiquidityProvisionParamsAmount0Desired$outboundSchema` instead. */
  export const outboundSchema =
    UniswapMintLiquidityProvisionParamsAmount0Desired$outboundSchema;
  /** @deprecated use `UniswapMintLiquidityProvisionParamsAmount0Desired$Outbound` instead. */
  export type Outbound =
    UniswapMintLiquidityProvisionParamsAmount0Desired$Outbound;
}

export function uniswapMintLiquidityProvisionParamsAmount0DesiredToJSON(
  uniswapMintLiquidityProvisionParamsAmount0Desired:
    UniswapMintLiquidityProvisionParamsAmount0Desired,
): string {
  return JSON.stringify(
    UniswapMintLiquidityProvisionParamsAmount0Desired$outboundSchema.parse(
      uniswapMintLiquidityProvisionParamsAmount0Desired,
    ),
  );
}

export function uniswapMintLiquidityProvisionParamsAmount0DesiredFromJSON(
  jsonString: string,
): SafeParseResult<
  UniswapMintLiquidityProvisionParamsAmount0Desired,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UniswapMintLiquidityProvisionParamsAmount0Desired$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UniswapMintLiquidityProvisionParamsAmount0Desired' from JSON`,
  );
}

/** @internal */
export const UniswapMintLiquidityProvisionParamsAmount1Desired$inboundSchema:
  z.ZodType<
    UniswapMintLiquidityProvisionParamsAmount1Desired,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type UniswapMintLiquidityProvisionParamsAmount1Desired$Outbound =
  | number
  | string;

/** @internal */
export const UniswapMintLiquidityProvisionParamsAmount1Desired$outboundSchema:
  z.ZodType<
    UniswapMintLiquidityProvisionParamsAmount1Desired$Outbound,
    z.ZodTypeDef,
    UniswapMintLiquidityProvisionParamsAmount1Desired
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapMintLiquidityProvisionParamsAmount1Desired$ {
  /** @deprecated use `UniswapMintLiquidityProvisionParamsAmount1Desired$inboundSchema` instead. */
  export const inboundSchema =
    UniswapMintLiquidityProvisionParamsAmount1Desired$inboundSchema;
  /** @deprecated use `UniswapMintLiquidityProvisionParamsAmount1Desired$outboundSchema` instead. */
  export const outboundSchema =
    UniswapMintLiquidityProvisionParamsAmount1Desired$outboundSchema;
  /** @deprecated use `UniswapMintLiquidityProvisionParamsAmount1Desired$Outbound` instead. */
  export type Outbound =
    UniswapMintLiquidityProvisionParamsAmount1Desired$Outbound;
}

export function uniswapMintLiquidityProvisionParamsAmount1DesiredToJSON(
  uniswapMintLiquidityProvisionParamsAmount1Desired:
    UniswapMintLiquidityProvisionParamsAmount1Desired,
): string {
  return JSON.stringify(
    UniswapMintLiquidityProvisionParamsAmount1Desired$outboundSchema.parse(
      uniswapMintLiquidityProvisionParamsAmount1Desired,
    ),
  );
}

export function uniswapMintLiquidityProvisionParamsAmount1DesiredFromJSON(
  jsonString: string,
): SafeParseResult<
  UniswapMintLiquidityProvisionParamsAmount1Desired,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UniswapMintLiquidityProvisionParamsAmount1Desired$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UniswapMintLiquidityProvisionParamsAmount1Desired' from JSON`,
  );
}

/** @internal */
export const UniswapMintLiquidityProvisionParamsAmount0Min$inboundSchema:
  z.ZodType<
    UniswapMintLiquidityProvisionParamsAmount0Min,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type UniswapMintLiquidityProvisionParamsAmount0Min$Outbound =
  | number
  | string;

/** @internal */
export const UniswapMintLiquidityProvisionParamsAmount0Min$outboundSchema:
  z.ZodType<
    UniswapMintLiquidityProvisionParamsAmount0Min$Outbound,
    z.ZodTypeDef,
    UniswapMintLiquidityProvisionParamsAmount0Min
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapMintLiquidityProvisionParamsAmount0Min$ {
  /** @deprecated use `UniswapMintLiquidityProvisionParamsAmount0Min$inboundSchema` instead. */
  export const inboundSchema =
    UniswapMintLiquidityProvisionParamsAmount0Min$inboundSchema;
  /** @deprecated use `UniswapMintLiquidityProvisionParamsAmount0Min$outboundSchema` instead. */
  export const outboundSchema =
    UniswapMintLiquidityProvisionParamsAmount0Min$outboundSchema;
  /** @deprecated use `UniswapMintLiquidityProvisionParamsAmount0Min$Outbound` instead. */
  export type Outbound = UniswapMintLiquidityProvisionParamsAmount0Min$Outbound;
}

export function uniswapMintLiquidityProvisionParamsAmount0MinToJSON(
  uniswapMintLiquidityProvisionParamsAmount0Min:
    UniswapMintLiquidityProvisionParamsAmount0Min,
): string {
  return JSON.stringify(
    UniswapMintLiquidityProvisionParamsAmount0Min$outboundSchema.parse(
      uniswapMintLiquidityProvisionParamsAmount0Min,
    ),
  );
}

export function uniswapMintLiquidityProvisionParamsAmount0MinFromJSON(
  jsonString: string,
): SafeParseResult<
  UniswapMintLiquidityProvisionParamsAmount0Min,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UniswapMintLiquidityProvisionParamsAmount0Min$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UniswapMintLiquidityProvisionParamsAmount0Min' from JSON`,
  );
}

/** @internal */
export const UniswapMintLiquidityProvisionParamsAmount1Min$inboundSchema:
  z.ZodType<
    UniswapMintLiquidityProvisionParamsAmount1Min,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type UniswapMintLiquidityProvisionParamsAmount1Min$Outbound =
  | number
  | string;

/** @internal */
export const UniswapMintLiquidityProvisionParamsAmount1Min$outboundSchema:
  z.ZodType<
    UniswapMintLiquidityProvisionParamsAmount1Min$Outbound,
    z.ZodTypeDef,
    UniswapMintLiquidityProvisionParamsAmount1Min
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapMintLiquidityProvisionParamsAmount1Min$ {
  /** @deprecated use `UniswapMintLiquidityProvisionParamsAmount1Min$inboundSchema` instead. */
  export const inboundSchema =
    UniswapMintLiquidityProvisionParamsAmount1Min$inboundSchema;
  /** @deprecated use `UniswapMintLiquidityProvisionParamsAmount1Min$outboundSchema` instead. */
  export const outboundSchema =
    UniswapMintLiquidityProvisionParamsAmount1Min$outboundSchema;
  /** @deprecated use `UniswapMintLiquidityProvisionParamsAmount1Min$Outbound` instead. */
  export type Outbound = UniswapMintLiquidityProvisionParamsAmount1Min$Outbound;
}

export function uniswapMintLiquidityProvisionParamsAmount1MinToJSON(
  uniswapMintLiquidityProvisionParamsAmount1Min:
    UniswapMintLiquidityProvisionParamsAmount1Min,
): string {
  return JSON.stringify(
    UniswapMintLiquidityProvisionParamsAmount1Min$outboundSchema.parse(
      uniswapMintLiquidityProvisionParamsAmount1Min,
    ),
  );
}

export function uniswapMintLiquidityProvisionParamsAmount1MinFromJSON(
  jsonString: string,
): SafeParseResult<
  UniswapMintLiquidityProvisionParamsAmount1Min,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UniswapMintLiquidityProvisionParamsAmount1Min$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UniswapMintLiquidityProvisionParamsAmount1Min' from JSON`,
  );
}

/** @internal */
export const UniswapMintLiquidityProvisionParams$inboundSchema: z.ZodType<
  UniswapMintLiquidityProvisionParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("UNISWAP_MINT_LIQUIDITY_PROVISION").default(
    "UNISWAP_MINT_LIQUIDITY_PROVISION",
  ),
  token0: z.string(),
  token1: z.string(),
  fee: FeeEnum$inboundSchema,
  tick_lower: z.number().int(),
  tick_upper: z.number().int(),
  amount0_desired: z.union([z.number(), z.string()]),
  amount1_desired: z.union([z.number(), z.string()]),
  amount0_min: z.union([z.number(), z.string()]),
  amount1_min: z.union([z.number(), z.string()]),
  recipient: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "tick_lower": "tickLower",
    "tick_upper": "tickUpper",
    "amount0_desired": "amount0Desired",
    "amount1_desired": "amount1Desired",
    "amount0_min": "amount0Min",
    "amount1_min": "amount1Min",
  });
});

/** @internal */
export type UniswapMintLiquidityProvisionParams$Outbound = {
  action_type: "UNISWAP_MINT_LIQUIDITY_PROVISION";
  token0: string;
  token1: string;
  fee: string;
  tick_lower: number;
  tick_upper: number;
  amount0_desired: number | string;
  amount1_desired: number | string;
  amount0_min: number | string;
  amount1_min: number | string;
  recipient?: string | null | undefined;
};

/** @internal */
export const UniswapMintLiquidityProvisionParams$outboundSchema: z.ZodType<
  UniswapMintLiquidityProvisionParams$Outbound,
  z.ZodTypeDef,
  UniswapMintLiquidityProvisionParams
> = z.object({
  actionType: z.literal("UNISWAP_MINT_LIQUIDITY_PROVISION").default(
    "UNISWAP_MINT_LIQUIDITY_PROVISION" as const,
  ),
  token0: z.string(),
  token1: z.string(),
  fee: FeeEnum$outboundSchema,
  tickLower: z.number().int(),
  tickUpper: z.number().int(),
  amount0Desired: z.union([z.number(), z.string()]),
  amount1Desired: z.union([z.number(), z.string()]),
  amount0Min: z.union([z.number(), z.string()]),
  amount1Min: z.union([z.number(), z.string()]),
  recipient: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    tickLower: "tick_lower",
    tickUpper: "tick_upper",
    amount0Desired: "amount0_desired",
    amount1Desired: "amount1_desired",
    amount0Min: "amount0_min",
    amount1Min: "amount1_min",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapMintLiquidityProvisionParams$ {
  /** @deprecated use `UniswapMintLiquidityProvisionParams$inboundSchema` instead. */
  export const inboundSchema =
    UniswapMintLiquidityProvisionParams$inboundSchema;
  /** @deprecated use `UniswapMintLiquidityProvisionParams$outboundSchema` instead. */
  export const outboundSchema =
    UniswapMintLiquidityProvisionParams$outboundSchema;
  /** @deprecated use `UniswapMintLiquidityProvisionParams$Outbound` instead. */
  export type Outbound = UniswapMintLiquidityProvisionParams$Outbound;
}

export function uniswapMintLiquidityProvisionParamsToJSON(
  uniswapMintLiquidityProvisionParams: UniswapMintLiquidityProvisionParams,
): string {
  return JSON.stringify(
    UniswapMintLiquidityProvisionParams$outboundSchema.parse(
      uniswapMintLiquidityProvisionParams,
    ),
  );
}

export function uniswapMintLiquidityProvisionParamsFromJSON(
  jsonString: string,
): SafeParseResult<UniswapMintLiquidityProvisionParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      UniswapMintLiquidityProvisionParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UniswapMintLiquidityProvisionParams' from JSON`,
  );
}
