/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AaveSupportedTokenMetadata = {
  /**
   * Token symbol (e.g., 'WETH', 'DAI').
   */
  symbol: string;
  /**
   * Token contract address.
   */
  address: string;
  /**
   * Whether the token can be used as collateral.
   */
  supplyingEnabled: boolean;
  /**
   * Whether the token can be borrowed.
   */
  borrowingEnabled: boolean;
};

/** @internal */
export const AaveSupportedTokenMetadata$inboundSchema: z.ZodType<
  AaveSupportedTokenMetadata,
  z.ZodTypeDef,
  unknown
> = z.object({
  symbol: z.string(),
  address: z.string(),
  supplying_enabled: z.boolean(),
  borrowing_enabled: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "supplying_enabled": "supplyingEnabled",
    "borrowing_enabled": "borrowingEnabled",
  });
});

/** @internal */
export type AaveSupportedTokenMetadata$Outbound = {
  symbol: string;
  address: string;
  supplying_enabled: boolean;
  borrowing_enabled: boolean;
};

/** @internal */
export const AaveSupportedTokenMetadata$outboundSchema: z.ZodType<
  AaveSupportedTokenMetadata$Outbound,
  z.ZodTypeDef,
  AaveSupportedTokenMetadata
> = z.object({
  symbol: z.string(),
  address: z.string(),
  supplyingEnabled: z.boolean(),
  borrowingEnabled: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    supplyingEnabled: "supplying_enabled",
    borrowingEnabled: "borrowing_enabled",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AaveSupportedTokenMetadata$ {
  /** @deprecated use `AaveSupportedTokenMetadata$inboundSchema` instead. */
  export const inboundSchema = AaveSupportedTokenMetadata$inboundSchema;
  /** @deprecated use `AaveSupportedTokenMetadata$outboundSchema` instead. */
  export const outboundSchema = AaveSupportedTokenMetadata$outboundSchema;
  /** @deprecated use `AaveSupportedTokenMetadata$Outbound` instead. */
  export type Outbound = AaveSupportedTokenMetadata$Outbound;
}

export function aaveSupportedTokenMetadataToJSON(
  aaveSupportedTokenMetadata: AaveSupportedTokenMetadata,
): string {
  return JSON.stringify(
    AaveSupportedTokenMetadata$outboundSchema.parse(aaveSupportedTokenMetadata),
  );
}

export function aaveSupportedTokenMetadataFromJSON(
  jsonString: string,
): SafeParseResult<AaveSupportedTokenMetadata, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AaveSupportedTokenMetadata$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AaveSupportedTokenMetadata' from JSON`,
  );
}
