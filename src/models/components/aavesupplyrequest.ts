/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The amount of the asset to supply
 */
export type AaveSupplyRequestAmount = number | string;

export const AaveSupplyRequestChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type AaveSupplyRequestChain = ClosedEnum<typeof AaveSupplyRequestChain>;

export type AaveSupplyRequest = {
  actionType?: "AAVE_SUPPLY" | undefined;
  /**
   * The symbol or address of the underlying asset to supply as collateral. You can borrow against it..
   */
  token: string;
  /**
   * The amount of the asset to supply
   */
  amount: number | string;
  /**
   * The address on behalf of whom the supply is made. Defaults to the transaction sender.
   */
  onBehalfOf?: string | null | undefined;
  chain: AaveSupplyRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const AaveSupplyRequestAmount$inboundSchema: z.ZodType<
  AaveSupplyRequestAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type AaveSupplyRequestAmount$Outbound = number | string;

/** @internal */
export const AaveSupplyRequestAmount$outboundSchema: z.ZodType<
  AaveSupplyRequestAmount$Outbound,
  z.ZodTypeDef,
  AaveSupplyRequestAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AaveSupplyRequestAmount$ {
  /** @deprecated use `AaveSupplyRequestAmount$inboundSchema` instead. */
  export const inboundSchema = AaveSupplyRequestAmount$inboundSchema;
  /** @deprecated use `AaveSupplyRequestAmount$outboundSchema` instead. */
  export const outboundSchema = AaveSupplyRequestAmount$outboundSchema;
  /** @deprecated use `AaveSupplyRequestAmount$Outbound` instead. */
  export type Outbound = AaveSupplyRequestAmount$Outbound;
}

export function aaveSupplyRequestAmountToJSON(
  aaveSupplyRequestAmount: AaveSupplyRequestAmount,
): string {
  return JSON.stringify(
    AaveSupplyRequestAmount$outboundSchema.parse(aaveSupplyRequestAmount),
  );
}

export function aaveSupplyRequestAmountFromJSON(
  jsonString: string,
): SafeParseResult<AaveSupplyRequestAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AaveSupplyRequestAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AaveSupplyRequestAmount' from JSON`,
  );
}

/** @internal */
export const AaveSupplyRequestChain$inboundSchema: z.ZodNativeEnum<
  typeof AaveSupplyRequestChain
> = z.nativeEnum(AaveSupplyRequestChain);

/** @internal */
export const AaveSupplyRequestChain$outboundSchema: z.ZodNativeEnum<
  typeof AaveSupplyRequestChain
> = AaveSupplyRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AaveSupplyRequestChain$ {
  /** @deprecated use `AaveSupplyRequestChain$inboundSchema` instead. */
  export const inboundSchema = AaveSupplyRequestChain$inboundSchema;
  /** @deprecated use `AaveSupplyRequestChain$outboundSchema` instead. */
  export const outboundSchema = AaveSupplyRequestChain$outboundSchema;
}

/** @internal */
export const AaveSupplyRequest$inboundSchema: z.ZodType<
  AaveSupplyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("AAVE_SUPPLY").default("AAVE_SUPPLY"),
  token: z.string(),
  amount: z.union([z.number(), z.string()]),
  on_behalf_of: z.nullable(z.string()).optional(),
  chain: AaveSupplyRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "on_behalf_of": "onBehalfOf",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type AaveSupplyRequest$Outbound = {
  action_type: "AAVE_SUPPLY";
  token: string;
  amount: number | string;
  on_behalf_of?: string | null | undefined;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const AaveSupplyRequest$outboundSchema: z.ZodType<
  AaveSupplyRequest$Outbound,
  z.ZodTypeDef,
  AaveSupplyRequest
> = z.object({
  actionType: z.literal("AAVE_SUPPLY").default("AAVE_SUPPLY" as const),
  token: z.string(),
  amount: z.union([z.number(), z.string()]),
  onBehalfOf: z.nullable(z.string()).optional(),
  chain: AaveSupplyRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    onBehalfOf: "on_behalf_of",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AaveSupplyRequest$ {
  /** @deprecated use `AaveSupplyRequest$inboundSchema` instead. */
  export const inboundSchema = AaveSupplyRequest$inboundSchema;
  /** @deprecated use `AaveSupplyRequest$outboundSchema` instead. */
  export const outboundSchema = AaveSupplyRequest$outboundSchema;
  /** @deprecated use `AaveSupplyRequest$Outbound` instead. */
  export type Outbound = AaveSupplyRequest$Outbound;
}

export function aaveSupplyRequestToJSON(
  aaveSupplyRequest: AaveSupplyRequest,
): string {
  return JSON.stringify(
    AaveSupplyRequest$outboundSchema.parse(aaveSupplyRequest),
  );
}

export function aaveSupplyRequestFromJSON(
  jsonString: string,
): SafeParseResult<AaveSupplyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AaveSupplyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AaveSupplyRequest' from JSON`,
  );
}
