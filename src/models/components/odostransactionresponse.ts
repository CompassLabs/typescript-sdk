/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UnsignedTransaction,
  UnsignedTransaction$inboundSchema,
  UnsignedTransaction$Outbound,
  UnsignedTransaction$outboundSchema,
} from "./unsignedtransaction.js";
import {
  UserOperationResponse,
  UserOperationResponse$inboundSchema,
  UserOperationResponse$Outbound,
  UserOperationResponse$outboundSchema,
} from "./useroperationresponse.js";

/**
 * The unsigned transaction data. User must sign and broadcast to network.
 */
export type OdosTransactionResponseTransaction =
  | UnsignedTransaction
  | UserOperationResponse;

export type OdosTransactionResponse = {
  /**
   * The unsigned transaction data. User must sign and broadcast to network.
   */
  transaction: UnsignedTransaction | UserOperationResponse;
  /**
   * The estimated amount out for the transaction. The actual output amount for this transaction is guaranteed be within the acceptable threshold, defined by the `max_slippage_percent`, relative to this quote.
   */
  amountOutQuote: string;
};

/** @internal */
export const OdosTransactionResponseTransaction$inboundSchema: z.ZodType<
  OdosTransactionResponseTransaction,
  z.ZodTypeDef,
  unknown
> = z.union([
  UnsignedTransaction$inboundSchema,
  UserOperationResponse$inboundSchema,
]);

/** @internal */
export type OdosTransactionResponseTransaction$Outbound =
  | UnsignedTransaction$Outbound
  | UserOperationResponse$Outbound;

/** @internal */
export const OdosTransactionResponseTransaction$outboundSchema: z.ZodType<
  OdosTransactionResponseTransaction$Outbound,
  z.ZodTypeDef,
  OdosTransactionResponseTransaction
> = z.union([
  UnsignedTransaction$outboundSchema,
  UserOperationResponse$outboundSchema,
]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OdosTransactionResponseTransaction$ {
  /** @deprecated use `OdosTransactionResponseTransaction$inboundSchema` instead. */
  export const inboundSchema = OdosTransactionResponseTransaction$inboundSchema;
  /** @deprecated use `OdosTransactionResponseTransaction$outboundSchema` instead. */
  export const outboundSchema =
    OdosTransactionResponseTransaction$outboundSchema;
  /** @deprecated use `OdosTransactionResponseTransaction$Outbound` instead. */
  export type Outbound = OdosTransactionResponseTransaction$Outbound;
}

export function odosTransactionResponseTransactionToJSON(
  odosTransactionResponseTransaction: OdosTransactionResponseTransaction,
): string {
  return JSON.stringify(
    OdosTransactionResponseTransaction$outboundSchema.parse(
      odosTransactionResponseTransaction,
    ),
  );
}

export function odosTransactionResponseTransactionFromJSON(
  jsonString: string,
): SafeParseResult<OdosTransactionResponseTransaction, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      OdosTransactionResponseTransaction$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OdosTransactionResponseTransaction' from JSON`,
  );
}

/** @internal */
export const OdosTransactionResponse$inboundSchema: z.ZodType<
  OdosTransactionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  transaction: z.union([
    UnsignedTransaction$inboundSchema,
    UserOperationResponse$inboundSchema,
  ]),
  amount_out_quote: z.string(),
}).transform((v) => {
  return remap$(v, {
    "amount_out_quote": "amountOutQuote",
  });
});

/** @internal */
export type OdosTransactionResponse$Outbound = {
  transaction: UnsignedTransaction$Outbound | UserOperationResponse$Outbound;
  amount_out_quote: string;
};

/** @internal */
export const OdosTransactionResponse$outboundSchema: z.ZodType<
  OdosTransactionResponse$Outbound,
  z.ZodTypeDef,
  OdosTransactionResponse
> = z.object({
  transaction: z.union([
    UnsignedTransaction$outboundSchema,
    UserOperationResponse$outboundSchema,
  ]),
  amountOutQuote: z.string(),
}).transform((v) => {
  return remap$(v, {
    amountOutQuote: "amount_out_quote",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace OdosTransactionResponse$ {
  /** @deprecated use `OdosTransactionResponse$inboundSchema` instead. */
  export const inboundSchema = OdosTransactionResponse$inboundSchema;
  /** @deprecated use `OdosTransactionResponse$outboundSchema` instead. */
  export const outboundSchema = OdosTransactionResponse$outboundSchema;
  /** @deprecated use `OdosTransactionResponse$Outbound` instead. */
  export type Outbound = OdosTransactionResponse$Outbound;
}

export function odosTransactionResponseToJSON(
  odosTransactionResponse: OdosTransactionResponse,
): string {
  return JSON.stringify(
    OdosTransactionResponse$outboundSchema.parse(odosTransactionResponse),
  );
}

export function odosTransactionResponseFromJSON(
  jsonString: string,
): SafeParseResult<OdosTransactionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => OdosTransactionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'OdosTransactionResponse' from JSON`,
  );
}
