/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The amount of ETH to wrap.
 */
export type WrapEthParamsAmount = number | string;

/**
 * Parameters model for wrapping ETH into WETH.
 */
export type WrapEthParams = {
  actionType?: "WRAP_ETH" | undefined;
  /**
   * The amount of ETH to wrap.
   */
  amount: number | string;
};

/** @internal */
export const WrapEthParamsAmount$inboundSchema: z.ZodType<
  WrapEthParamsAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type WrapEthParamsAmount$Outbound = number | string;

/** @internal */
export const WrapEthParamsAmount$outboundSchema: z.ZodType<
  WrapEthParamsAmount$Outbound,
  z.ZodTypeDef,
  WrapEthParamsAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WrapEthParamsAmount$ {
  /** @deprecated use `WrapEthParamsAmount$inboundSchema` instead. */
  export const inboundSchema = WrapEthParamsAmount$inboundSchema;
  /** @deprecated use `WrapEthParamsAmount$outboundSchema` instead. */
  export const outboundSchema = WrapEthParamsAmount$outboundSchema;
  /** @deprecated use `WrapEthParamsAmount$Outbound` instead. */
  export type Outbound = WrapEthParamsAmount$Outbound;
}

export function wrapEthParamsAmountToJSON(
  wrapEthParamsAmount: WrapEthParamsAmount,
): string {
  return JSON.stringify(
    WrapEthParamsAmount$outboundSchema.parse(wrapEthParamsAmount),
  );
}

export function wrapEthParamsAmountFromJSON(
  jsonString: string,
): SafeParseResult<WrapEthParamsAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WrapEthParamsAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WrapEthParamsAmount' from JSON`,
  );
}

/** @internal */
export const WrapEthParams$inboundSchema: z.ZodType<
  WrapEthParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("WRAP_ETH").default("WRAP_ETH"),
  amount: z.union([z.number(), z.string()]),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
  });
});

/** @internal */
export type WrapEthParams$Outbound = {
  action_type: "WRAP_ETH";
  amount: number | string;
};

/** @internal */
export const WrapEthParams$outboundSchema: z.ZodType<
  WrapEthParams$Outbound,
  z.ZodTypeDef,
  WrapEthParams
> = z.object({
  actionType: z.literal("WRAP_ETH").default("WRAP_ETH" as const),
  amount: z.union([z.number(), z.string()]),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace WrapEthParams$ {
  /** @deprecated use `WrapEthParams$inboundSchema` instead. */
  export const inboundSchema = WrapEthParams$inboundSchema;
  /** @deprecated use `WrapEthParams$outboundSchema` instead. */
  export const outboundSchema = WrapEthParams$outboundSchema;
  /** @deprecated use `WrapEthParams$Outbound` instead. */
  export type Outbound = WrapEthParams$Outbound;
}

export function wrapEthParamsToJSON(wrapEthParams: WrapEthParams): string {
  return JSON.stringify(WrapEthParams$outboundSchema.parse(wrapEthParams));
}

export function wrapEthParamsFromJSON(
  jsonString: string,
): SafeParseResult<WrapEthParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => WrapEthParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'WrapEthParams' from JSON`,
  );
}
