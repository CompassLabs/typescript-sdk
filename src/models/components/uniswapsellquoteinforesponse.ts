/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UniswapSellQuoteInfoResponse = {
  /**
   * The amount of token_out you would receive from the pool.
   */
  amountOut: string;
  /**
   * The price of the pool after this trade would happen. (How much token0 you need to buy 1 token1.)
   */
  priceAfter: string;
};

/** @internal */
export const UniswapSellQuoteInfoResponse$inboundSchema: z.ZodType<
  UniswapSellQuoteInfoResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount_out: z.string(),
  price_after: z.string(),
}).transform((v) => {
  return remap$(v, {
    "amount_out": "amountOut",
    "price_after": "priceAfter",
  });
});

/** @internal */
export type UniswapSellQuoteInfoResponse$Outbound = {
  amount_out: string;
  price_after: string;
};

/** @internal */
export const UniswapSellQuoteInfoResponse$outboundSchema: z.ZodType<
  UniswapSellQuoteInfoResponse$Outbound,
  z.ZodTypeDef,
  UniswapSellQuoteInfoResponse
> = z.object({
  amountOut: z.string(),
  priceAfter: z.string(),
}).transform((v) => {
  return remap$(v, {
    amountOut: "amount_out",
    priceAfter: "price_after",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapSellQuoteInfoResponse$ {
  /** @deprecated use `UniswapSellQuoteInfoResponse$inboundSchema` instead. */
  export const inboundSchema = UniswapSellQuoteInfoResponse$inboundSchema;
  /** @deprecated use `UniswapSellQuoteInfoResponse$outboundSchema` instead. */
  export const outboundSchema = UniswapSellQuoteInfoResponse$outboundSchema;
  /** @deprecated use `UniswapSellQuoteInfoResponse$Outbound` instead. */
  export type Outbound = UniswapSellQuoteInfoResponse$Outbound;
}

export function uniswapSellQuoteInfoResponseToJSON(
  uniswapSellQuoteInfoResponse: UniswapSellQuoteInfoResponse,
): string {
  return JSON.stringify(
    UniswapSellQuoteInfoResponse$outboundSchema.parse(
      uniswapSellQuoteInfoResponse,
    ),
  );
}

export function uniswapSellQuoteInfoResponseFromJSON(
  jsonString: string,
): SafeParseResult<UniswapSellQuoteInfoResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UniswapSellQuoteInfoResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UniswapSellQuoteInfoResponse' from JSON`,
  );
}
