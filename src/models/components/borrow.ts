/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Reserve,
  Reserve$inboundSchema,
  Reserve$Outbound,
  Reserve$outboundSchema,
} from "./reserve.js";

/**
 * The interest rate mode to borrow: 1 represents stable interest rate mode. 2 represents variable interest rate mode
 */
export const Borrowratemode = {
  One: 1,
  Two: 2,
} as const;
/**
 * The interest rate mode to borrow: 1 represents stable interest rate mode. 2 represents variable interest rate mode
 */
export type Borrowratemode = ClosedEnum<typeof Borrowratemode>;

export type Borrow = {
  /**
   * The id of a historical transaction on aave
   */
  id: string;
  /**
   * Timestamp in unix time
   */
  timestamp: number;
  /**
   * Transaction hash. You can paste these into the search bar on etherscan
   */
  txHash: string;
  /**
   * Quantity of token
   */
  amount: number;
  /**
   * The interest rate mode to borrow: 1 represents stable interest rate mode. 2 represents variable interest rate mode
   */
  borrowRateMode: Borrowratemode;
  reserve: Reserve;
  /**
   * Price of token in USD
   */
  assetPriceUSD: number;
  /**
   * The type of transaction
   */
  action?: "Borrow" | undefined;
  block: number;
};

/** @internal */
export const Borrowratemode$inboundSchema: z.ZodNativeEnum<
  typeof Borrowratemode
> = z.nativeEnum(Borrowratemode);

/** @internal */
export const Borrowratemode$outboundSchema: z.ZodNativeEnum<
  typeof Borrowratemode
> = Borrowratemode$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Borrowratemode$ {
  /** @deprecated use `Borrowratemode$inboundSchema` instead. */
  export const inboundSchema = Borrowratemode$inboundSchema;
  /** @deprecated use `Borrowratemode$outboundSchema` instead. */
  export const outboundSchema = Borrowratemode$outboundSchema;
}

/** @internal */
export const Borrow$inboundSchema: z.ZodType<Borrow, z.ZodTypeDef, unknown> = z
  .object({
    id: z.string(),
    timestamp: z.number().int(),
    txHash: z.string(),
    amount: z.number(),
    borrowRateMode: Borrowratemode$inboundSchema,
    reserve: Reserve$inboundSchema,
    assetPriceUSD: z.number(),
    action: z.literal("Borrow").default("Borrow").optional(),
    block: z.number().int(),
  });

/** @internal */
export type Borrow$Outbound = {
  id: string;
  timestamp: number;
  txHash: string;
  amount: number;
  borrowRateMode: number;
  reserve: Reserve$Outbound;
  assetPriceUSD: number;
  action: "Borrow";
  block: number;
};

/** @internal */
export const Borrow$outboundSchema: z.ZodType<
  Borrow$Outbound,
  z.ZodTypeDef,
  Borrow
> = z.object({
  id: z.string(),
  timestamp: z.number().int(),
  txHash: z.string(),
  amount: z.number(),
  borrowRateMode: Borrowratemode$outboundSchema,
  reserve: Reserve$outboundSchema,
  assetPriceUSD: z.number(),
  action: z.literal("Borrow").default("Borrow" as const),
  block: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Borrow$ {
  /** @deprecated use `Borrow$inboundSchema` instead. */
  export const inboundSchema = Borrow$inboundSchema;
  /** @deprecated use `Borrow$outboundSchema` instead. */
  export const outboundSchema = Borrow$outboundSchema;
  /** @deprecated use `Borrow$Outbound` instead. */
  export type Outbound = Borrow$Outbound;
}

export function borrowToJSON(borrow: Borrow): string {
  return JSON.stringify(Borrow$outboundSchema.parse(borrow));
}

export function borrowFromJSON(
  jsonString: string,
): SafeParseResult<Borrow, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Borrow$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Borrow' from JSON`,
  );
}
