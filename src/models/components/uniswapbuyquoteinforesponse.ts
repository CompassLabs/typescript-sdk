/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UniswapBuyQuoteInfoResponse = {
  /**
   * The amount of token_in you would need to give to the pool.
   */
  amountIn: string;
  /**
   * The price of the pool after this trade would happen. (How much token0 you need to buy 1 token1.)
   */
  priceAfter: string;
};

/** @internal */
export const UniswapBuyQuoteInfoResponse$inboundSchema: z.ZodType<
  UniswapBuyQuoteInfoResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount_in: z.string(),
  price_after: z.string(),
}).transform((v) => {
  return remap$(v, {
    "amount_in": "amountIn",
    "price_after": "priceAfter",
  });
});

/** @internal */
export type UniswapBuyQuoteInfoResponse$Outbound = {
  amount_in: string;
  price_after: string;
};

/** @internal */
export const UniswapBuyQuoteInfoResponse$outboundSchema: z.ZodType<
  UniswapBuyQuoteInfoResponse$Outbound,
  z.ZodTypeDef,
  UniswapBuyQuoteInfoResponse
> = z.object({
  amountIn: z.string(),
  priceAfter: z.string(),
}).transform((v) => {
  return remap$(v, {
    amountIn: "amount_in",
    priceAfter: "price_after",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapBuyQuoteInfoResponse$ {
  /** @deprecated use `UniswapBuyQuoteInfoResponse$inboundSchema` instead. */
  export const inboundSchema = UniswapBuyQuoteInfoResponse$inboundSchema;
  /** @deprecated use `UniswapBuyQuoteInfoResponse$outboundSchema` instead. */
  export const outboundSchema = UniswapBuyQuoteInfoResponse$outboundSchema;
  /** @deprecated use `UniswapBuyQuoteInfoResponse$Outbound` instead. */
  export type Outbound = UniswapBuyQuoteInfoResponse$Outbound;
}

export function uniswapBuyQuoteInfoResponseToJSON(
  uniswapBuyQuoteInfoResponse: UniswapBuyQuoteInfoResponse,
): string {
  return JSON.stringify(
    UniswapBuyQuoteInfoResponse$outboundSchema.parse(
      uniswapBuyQuoteInfoResponse,
    ),
  );
}

export function uniswapBuyQuoteInfoResponseFromJSON(
  jsonString: string,
): SafeParseResult<UniswapBuyQuoteInfoResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UniswapBuyQuoteInfoResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UniswapBuyQuoteInfoResponse' from JSON`,
  );
}
