/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UnderlyingToken = {
  address: string;
  name: string;
  symbol: string;
  decimals: number;
};

/** @internal */
export const UnderlyingToken$inboundSchema: z.ZodType<
  UnderlyingToken,
  z.ZodTypeDef,
  unknown
> = z.object({
  address: z.string(),
  name: z.string(),
  symbol: z.string(),
  decimals: z.number().int(),
});

/** @internal */
export type UnderlyingToken$Outbound = {
  address: string;
  name: string;
  symbol: string;
  decimals: number;
};

/** @internal */
export const UnderlyingToken$outboundSchema: z.ZodType<
  UnderlyingToken$Outbound,
  z.ZodTypeDef,
  UnderlyingToken
> = z.object({
  address: z.string(),
  name: z.string(),
  symbol: z.string(),
  decimals: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UnderlyingToken$ {
  /** @deprecated use `UnderlyingToken$inboundSchema` instead. */
  export const inboundSchema = UnderlyingToken$inboundSchema;
  /** @deprecated use `UnderlyingToken$outboundSchema` instead. */
  export const outboundSchema = UnderlyingToken$outboundSchema;
  /** @deprecated use `UnderlyingToken$Outbound` instead. */
  export type Outbound = UnderlyingToken$Outbound;
}

export function underlyingTokenToJSON(
  underlyingToken: UnderlyingToken,
): string {
  return JSON.stringify(UnderlyingToken$outboundSchema.parse(underlyingToken));
}

export function underlyingTokenFromJSON(
  jsonString: string,
): SafeParseResult<UnderlyingToken, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UnderlyingToken$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UnderlyingToken' from JSON`,
  );
}
