/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UniswapPoolPriceResponse = {
  /**
   * The first token in the pool
   */
  tokenIn: string;
  /**
   * The second token in the pool
   */
  tokenOut: string;
  /**
   * The price of the pool. This is expressed as an instantanteous amount of how many token0 you need to buy 1 token1. In any swap this will not change during the trade; use the quote endpoint to get a better idea of how much you will pay!
   */
  price: string;
  /**
   * The current tick in the pool. This is a number that represents the price of the pool according to the uniswap v3 concentrated liquidity concept.
   */
  tick: number;
};

/** @internal */
export const UniswapPoolPriceResponse$inboundSchema: z.ZodType<
  UniswapPoolPriceResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  token_in: z.string(),
  token_out: z.string(),
  price: z.string(),
  tick: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "token_in": "tokenIn",
    "token_out": "tokenOut",
  });
});

/** @internal */
export type UniswapPoolPriceResponse$Outbound = {
  token_in: string;
  token_out: string;
  price: string;
  tick: number;
};

/** @internal */
export const UniswapPoolPriceResponse$outboundSchema: z.ZodType<
  UniswapPoolPriceResponse$Outbound,
  z.ZodTypeDef,
  UniswapPoolPriceResponse
> = z.object({
  tokenIn: z.string(),
  tokenOut: z.string(),
  price: z.string(),
  tick: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    tokenIn: "token_in",
    tokenOut: "token_out",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapPoolPriceResponse$ {
  /** @deprecated use `UniswapPoolPriceResponse$inboundSchema` instead. */
  export const inboundSchema = UniswapPoolPriceResponse$inboundSchema;
  /** @deprecated use `UniswapPoolPriceResponse$outboundSchema` instead. */
  export const outboundSchema = UniswapPoolPriceResponse$outboundSchema;
  /** @deprecated use `UniswapPoolPriceResponse$Outbound` instead. */
  export type Outbound = UniswapPoolPriceResponse$Outbound;
}

export function uniswapPoolPriceResponseToJSON(
  uniswapPoolPriceResponse: UniswapPoolPriceResponse,
): string {
  return JSON.stringify(
    UniswapPoolPriceResponse$outboundSchema.parse(uniswapPoolPriceResponse),
  );
}

export function uniswapPoolPriceResponseFromJSON(
  jsonString: string,
): SafeParseResult<UniswapPoolPriceResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UniswapPoolPriceResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UniswapPoolPriceResponse' from JSON`,
  );
}
