/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Specifies the direction of the liquidity operation for the Pendle market. Valid values are `SUPPLY` (to add liquidity) or `WITHDRAW` (to remove liquidity).
 */
export const PendleManageLiquidityRequestAction = {
  Supply: "SUPPLY",
  Withdraw: "WITHDRAW",
} as const;
/**
 * Specifies the direction of the liquidity operation for the Pendle market. Valid values are `SUPPLY` (to add liquidity) or `WITHDRAW` (to remove liquidity).
 */
export type PendleManageLiquidityRequestAction = ClosedEnum<
  typeof PendleManageLiquidityRequestAction
>;

/**
 * For `action` set to `SUPPLY`, this is the amount in of `token` to add as liquidity in exchange for Liquidity Provider (LP) tokens. For `action` set to `WITHDRAW`, this is the amount in of LP tokens to redeem for `token`.
 */
export type PendleManageLiquidityRequestAmountIn = number | string;

export const PendleManageLiquidityRequestChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type PendleManageLiquidityRequestChain = ClosedEnum<
  typeof PendleManageLiquidityRequestChain
>;

export type PendleManageLiquidityRequest = {
  actionType?: "PENDLE_MANAGE_LIQUIDITY" | undefined;
  /**
   * The address identifying which Pendle Market you would like to add liquidity to.
   */
  marketAddress: string;
  /**
   * Specifies the direction of the liquidity operation for the Pendle market. Valid values are `SUPPLY` (to add liquidity) or `WITHDRAW` (to remove liquidity).
   */
  action: PendleManageLiquidityRequestAction;
  /**
   * The symbol or address of the token to manage liquidity with. For `action` set to `SUPPLY`, this is the token to add as liquidity. For `action` set to `WITHDRAW`, this is the token to remove from liquidity.
   */
  token: string;
  /**
   * For `action` set to `SUPPLY`, this is the amount in of `token` to add as liquidity in exchange for Liquidity Provider (LP) tokens. For `action` set to `WITHDRAW`, this is the amount in of LP tokens to redeem for `token`.
   */
  amountIn: number | string;
  /**
   * The maximum slippage allowed in percent. e.g. `1` means `1%` slippage allowed.
   */
  maxSlippagePercent: number;
  chain: PendleManageLiquidityRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const PendleManageLiquidityRequestAction$inboundSchema: z.ZodNativeEnum<
  typeof PendleManageLiquidityRequestAction
> = z.nativeEnum(PendleManageLiquidityRequestAction);

/** @internal */
export const PendleManageLiquidityRequestAction$outboundSchema: z.ZodNativeEnum<
  typeof PendleManageLiquidityRequestAction
> = PendleManageLiquidityRequestAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendleManageLiquidityRequestAction$ {
  /** @deprecated use `PendleManageLiquidityRequestAction$inboundSchema` instead. */
  export const inboundSchema = PendleManageLiquidityRequestAction$inboundSchema;
  /** @deprecated use `PendleManageLiquidityRequestAction$outboundSchema` instead. */
  export const outboundSchema =
    PendleManageLiquidityRequestAction$outboundSchema;
}

/** @internal */
export const PendleManageLiquidityRequestAmountIn$inboundSchema: z.ZodType<
  PendleManageLiquidityRequestAmountIn,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type PendleManageLiquidityRequestAmountIn$Outbound = number | string;

/** @internal */
export const PendleManageLiquidityRequestAmountIn$outboundSchema: z.ZodType<
  PendleManageLiquidityRequestAmountIn$Outbound,
  z.ZodTypeDef,
  PendleManageLiquidityRequestAmountIn
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendleManageLiquidityRequestAmountIn$ {
  /** @deprecated use `PendleManageLiquidityRequestAmountIn$inboundSchema` instead. */
  export const inboundSchema =
    PendleManageLiquidityRequestAmountIn$inboundSchema;
  /** @deprecated use `PendleManageLiquidityRequestAmountIn$outboundSchema` instead. */
  export const outboundSchema =
    PendleManageLiquidityRequestAmountIn$outboundSchema;
  /** @deprecated use `PendleManageLiquidityRequestAmountIn$Outbound` instead. */
  export type Outbound = PendleManageLiquidityRequestAmountIn$Outbound;
}

export function pendleManageLiquidityRequestAmountInToJSON(
  pendleManageLiquidityRequestAmountIn: PendleManageLiquidityRequestAmountIn,
): string {
  return JSON.stringify(
    PendleManageLiquidityRequestAmountIn$outboundSchema.parse(
      pendleManageLiquidityRequestAmountIn,
    ),
  );
}

export function pendleManageLiquidityRequestAmountInFromJSON(
  jsonString: string,
): SafeParseResult<PendleManageLiquidityRequestAmountIn, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PendleManageLiquidityRequestAmountIn$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendleManageLiquidityRequestAmountIn' from JSON`,
  );
}

/** @internal */
export const PendleManageLiquidityRequestChain$inboundSchema: z.ZodNativeEnum<
  typeof PendleManageLiquidityRequestChain
> = z.nativeEnum(PendleManageLiquidityRequestChain);

/** @internal */
export const PendleManageLiquidityRequestChain$outboundSchema: z.ZodNativeEnum<
  typeof PendleManageLiquidityRequestChain
> = PendleManageLiquidityRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendleManageLiquidityRequestChain$ {
  /** @deprecated use `PendleManageLiquidityRequestChain$inboundSchema` instead. */
  export const inboundSchema = PendleManageLiquidityRequestChain$inboundSchema;
  /** @deprecated use `PendleManageLiquidityRequestChain$outboundSchema` instead. */
  export const outboundSchema =
    PendleManageLiquidityRequestChain$outboundSchema;
}

/** @internal */
export const PendleManageLiquidityRequest$inboundSchema: z.ZodType<
  PendleManageLiquidityRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("PENDLE_MANAGE_LIQUIDITY").default(
    "PENDLE_MANAGE_LIQUIDITY",
  ),
  market_address: z.string(),
  action: PendleManageLiquidityRequestAction$inboundSchema,
  token: z.string(),
  amount_in: z.union([z.number(), z.string()]),
  max_slippage_percent: z.number(),
  chain: PendleManageLiquidityRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "market_address": "marketAddress",
    "amount_in": "amountIn",
    "max_slippage_percent": "maxSlippagePercent",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type PendleManageLiquidityRequest$Outbound = {
  action_type: "PENDLE_MANAGE_LIQUIDITY";
  market_address: string;
  action: string;
  token: string;
  amount_in: number | string;
  max_slippage_percent: number;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const PendleManageLiquidityRequest$outboundSchema: z.ZodType<
  PendleManageLiquidityRequest$Outbound,
  z.ZodTypeDef,
  PendleManageLiquidityRequest
> = z.object({
  actionType: z.literal("PENDLE_MANAGE_LIQUIDITY").default(
    "PENDLE_MANAGE_LIQUIDITY" as const,
  ),
  marketAddress: z.string(),
  action: PendleManageLiquidityRequestAction$outboundSchema,
  token: z.string(),
  amountIn: z.union([z.number(), z.string()]),
  maxSlippagePercent: z.number(),
  chain: PendleManageLiquidityRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    marketAddress: "market_address",
    amountIn: "amount_in",
    maxSlippagePercent: "max_slippage_percent",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendleManageLiquidityRequest$ {
  /** @deprecated use `PendleManageLiquidityRequest$inboundSchema` instead. */
  export const inboundSchema = PendleManageLiquidityRequest$inboundSchema;
  /** @deprecated use `PendleManageLiquidityRequest$outboundSchema` instead. */
  export const outboundSchema = PendleManageLiquidityRequest$outboundSchema;
  /** @deprecated use `PendleManageLiquidityRequest$Outbound` instead. */
  export type Outbound = PendleManageLiquidityRequest$Outbound;
}

export function pendleManageLiquidityRequestToJSON(
  pendleManageLiquidityRequest: PendleManageLiquidityRequest,
): string {
  return JSON.stringify(
    PendleManageLiquidityRequest$outboundSchema.parse(
      pendleManageLiquidityRequest,
    ),
  );
}

export function pendleManageLiquidityRequestFromJSON(
  jsonString: string,
): SafeParseResult<PendleManageLiquidityRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PendleManageLiquidityRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendleManageLiquidityRequest' from JSON`,
  );
}
