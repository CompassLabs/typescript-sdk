/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type SkyCheckPositionResponse = {
  /**
   * The USDS equivalent value of the user's deposits thus far (principal + yield).
   */
  usdsValueOfDeposits: string;
  shares: number;
};

/** @internal */
export const SkyCheckPositionResponse$inboundSchema: z.ZodType<
  SkyCheckPositionResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  usds_value_of_deposits: z.string(),
  shares: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "usds_value_of_deposits": "usdsValueOfDeposits",
  });
});

/** @internal */
export type SkyCheckPositionResponse$Outbound = {
  usds_value_of_deposits: string;
  shares: number;
};

/** @internal */
export const SkyCheckPositionResponse$outboundSchema: z.ZodType<
  SkyCheckPositionResponse$Outbound,
  z.ZodTypeDef,
  SkyCheckPositionResponse
> = z.object({
  usdsValueOfDeposits: z.string(),
  shares: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    usdsValueOfDeposits: "usds_value_of_deposits",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkyCheckPositionResponse$ {
  /** @deprecated use `SkyCheckPositionResponse$inboundSchema` instead. */
  export const inboundSchema = SkyCheckPositionResponse$inboundSchema;
  /** @deprecated use `SkyCheckPositionResponse$outboundSchema` instead. */
  export const outboundSchema = SkyCheckPositionResponse$outboundSchema;
  /** @deprecated use `SkyCheckPositionResponse$Outbound` instead. */
  export type Outbound = SkyCheckPositionResponse$Outbound;
}

export function skyCheckPositionResponseToJSON(
  skyCheckPositionResponse: SkyCheckPositionResponse,
): string {
  return JSON.stringify(
    SkyCheckPositionResponse$outboundSchema.parse(skyCheckPositionResponse),
  );
}

export function skyCheckPositionResponseFromJSON(
  jsonString: string,
): SafeParseResult<SkyCheckPositionResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SkyCheckPositionResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SkyCheckPositionResponse' from JSON`,
  );
}
