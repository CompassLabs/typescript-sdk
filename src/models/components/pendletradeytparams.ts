/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Specifies the direction of the YT trade. Valid values are `BUY` (to buy YT) or `SELL` (to sell YT).
 */
export const PendleTradeYtParamsAction = {
  Buy: "BUY",
  Sell: "SELL",
} as const;
/**
 * Specifies the direction of the YT trade. Valid values are `BUY` (to buy YT) or `SELL` (to sell YT).
 */
export type PendleTradeYtParamsAction = ClosedEnum<
  typeof PendleTradeYtParamsAction
>;

/**
 * For `action` set to `BUY`, this is the amount in of `token` to buy YT with. For `action` set to `SELL`, this is the amount in of YT to sell for `token`.
 */
export type PendleTradeYtParamsAmountIn = number | string;

export type PendleTradeYtParams = {
  actionType?: "PENDLE_TRADE_YT" | undefined;
  /**
   * The address of the market identifying which Yield Token (YT) you would like to trade.
   */
  marketAddress: string;
  /**
   * Specifies the direction of the YT trade. Valid values are `BUY` (to buy YT) or `SELL` (to sell YT).
   */
  action: PendleTradeYtParamsAction;
  /**
   * TThe symbol or address of the token to trade YT with. For `action` set to `BUY`, this is the token to buy YT with. For `action` set to `SELL`, this is the token to sell YT for.
   */
  token: string;
  /**
   * For `action` set to `BUY`, this is the amount in of `token` to buy YT with. For `action` set to `SELL`, this is the amount in of YT to sell for `token`.
   */
  amountIn: number | string;
  /**
   * The maximum slippage allowed in percent. e.g. `1` means `1%` slippage allowed.
   */
  maxSlippagePercent: number;
};

/** @internal */
export const PendleTradeYtParamsAction$inboundSchema: z.ZodNativeEnum<
  typeof PendleTradeYtParamsAction
> = z.nativeEnum(PendleTradeYtParamsAction);

/** @internal */
export const PendleTradeYtParamsAction$outboundSchema: z.ZodNativeEnum<
  typeof PendleTradeYtParamsAction
> = PendleTradeYtParamsAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendleTradeYtParamsAction$ {
  /** @deprecated use `PendleTradeYtParamsAction$inboundSchema` instead. */
  export const inboundSchema = PendleTradeYtParamsAction$inboundSchema;
  /** @deprecated use `PendleTradeYtParamsAction$outboundSchema` instead. */
  export const outboundSchema = PendleTradeYtParamsAction$outboundSchema;
}

/** @internal */
export const PendleTradeYtParamsAmountIn$inboundSchema: z.ZodType<
  PendleTradeYtParamsAmountIn,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type PendleTradeYtParamsAmountIn$Outbound = number | string;

/** @internal */
export const PendleTradeYtParamsAmountIn$outboundSchema: z.ZodType<
  PendleTradeYtParamsAmountIn$Outbound,
  z.ZodTypeDef,
  PendleTradeYtParamsAmountIn
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendleTradeYtParamsAmountIn$ {
  /** @deprecated use `PendleTradeYtParamsAmountIn$inboundSchema` instead. */
  export const inboundSchema = PendleTradeYtParamsAmountIn$inboundSchema;
  /** @deprecated use `PendleTradeYtParamsAmountIn$outboundSchema` instead. */
  export const outboundSchema = PendleTradeYtParamsAmountIn$outboundSchema;
  /** @deprecated use `PendleTradeYtParamsAmountIn$Outbound` instead. */
  export type Outbound = PendleTradeYtParamsAmountIn$Outbound;
}

export function pendleTradeYtParamsAmountInToJSON(
  pendleTradeYtParamsAmountIn: PendleTradeYtParamsAmountIn,
): string {
  return JSON.stringify(
    PendleTradeYtParamsAmountIn$outboundSchema.parse(
      pendleTradeYtParamsAmountIn,
    ),
  );
}

export function pendleTradeYtParamsAmountInFromJSON(
  jsonString: string,
): SafeParseResult<PendleTradeYtParamsAmountIn, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PendleTradeYtParamsAmountIn$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendleTradeYtParamsAmountIn' from JSON`,
  );
}

/** @internal */
export const PendleTradeYtParams$inboundSchema: z.ZodType<
  PendleTradeYtParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("PENDLE_TRADE_YT").default("PENDLE_TRADE_YT"),
  market_address: z.string(),
  action: PendleTradeYtParamsAction$inboundSchema,
  token: z.string(),
  amount_in: z.union([z.number(), z.string()]),
  max_slippage_percent: z.number(),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "market_address": "marketAddress",
    "amount_in": "amountIn",
    "max_slippage_percent": "maxSlippagePercent",
  });
});

/** @internal */
export type PendleTradeYtParams$Outbound = {
  action_type: "PENDLE_TRADE_YT";
  market_address: string;
  action: string;
  token: string;
  amount_in: number | string;
  max_slippage_percent: number;
};

/** @internal */
export const PendleTradeYtParams$outboundSchema: z.ZodType<
  PendleTradeYtParams$Outbound,
  z.ZodTypeDef,
  PendleTradeYtParams
> = z.object({
  actionType: z.literal("PENDLE_TRADE_YT").default("PENDLE_TRADE_YT" as const),
  marketAddress: z.string(),
  action: PendleTradeYtParamsAction$outboundSchema,
  token: z.string(),
  amountIn: z.union([z.number(), z.string()]),
  maxSlippagePercent: z.number(),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    marketAddress: "market_address",
    amountIn: "amount_in",
    maxSlippagePercent: "max_slippage_percent",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendleTradeYtParams$ {
  /** @deprecated use `PendleTradeYtParams$inboundSchema` instead. */
  export const inboundSchema = PendleTradeYtParams$inboundSchema;
  /** @deprecated use `PendleTradeYtParams$outboundSchema` instead. */
  export const outboundSchema = PendleTradeYtParams$outboundSchema;
  /** @deprecated use `PendleTradeYtParams$Outbound` instead. */
  export type Outbound = PendleTradeYtParams$Outbound;
}

export function pendleTradeYtParamsToJSON(
  pendleTradeYtParams: PendleTradeYtParams,
): string {
  return JSON.stringify(
    PendleTradeYtParams$outboundSchema.parse(pendleTradeYtParams),
  );
}

export function pendleTradeYtParamsFromJSON(
  jsonString: string,
): SafeParseResult<PendleTradeYtParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PendleTradeYtParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendleTradeYtParams' from JSON`,
  );
}
