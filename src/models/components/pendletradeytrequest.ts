/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Specifies the direction of the YT trade. Valid values are `BUY` (to buy YT) or `SELL` (to sell YT).
 */
export const PendleTradeYtRequestAction = {
  Buy: "BUY",
  Sell: "SELL",
} as const;
/**
 * Specifies the direction of the YT trade. Valid values are `BUY` (to buy YT) or `SELL` (to sell YT).
 */
export type PendleTradeYtRequestAction = ClosedEnum<
  typeof PendleTradeYtRequestAction
>;

/**
 * For `action` set to `BUY`, this is the amount in of `token` to buy YT with. For `action` set to `SELL`, this is the amount in of YT to sell for `token`.
 */
export type PendleTradeYtRequestAmountIn = number | string;

export const PendleTradeYtRequestChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type PendleTradeYtRequestChain = ClosedEnum<
  typeof PendleTradeYtRequestChain
>;

export type PendleTradeYtRequest = {
  actionType?: "PENDLE_TRADE_YT" | undefined;
  /**
   * The address of the market identifying which Yield Token (YT) you would like to trade.
   */
  marketAddress: string;
  /**
   * Specifies the direction of the YT trade. Valid values are `BUY` (to buy YT) or `SELL` (to sell YT).
   */
  action: PendleTradeYtRequestAction;
  /**
   * TThe symbol or address of the token to trade YT with. For `action` set to `BUY`, this is the token to buy YT with. For `action` set to `SELL`, this is the token to sell YT for.
   */
  token: string;
  /**
   * For `action` set to `BUY`, this is the amount in of `token` to buy YT with. For `action` set to `SELL`, this is the amount in of YT to sell for `token`.
   */
  amountIn: number | string;
  /**
   * The maximum slippage allowed in percent. e.g. `1` means `1%` slippage allowed.
   */
  maxSlippagePercent: number;
  chain: PendleTradeYtRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const PendleTradeYtRequestAction$inboundSchema: z.ZodNativeEnum<
  typeof PendleTradeYtRequestAction
> = z.nativeEnum(PendleTradeYtRequestAction);

/** @internal */
export const PendleTradeYtRequestAction$outboundSchema: z.ZodNativeEnum<
  typeof PendleTradeYtRequestAction
> = PendleTradeYtRequestAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendleTradeYtRequestAction$ {
  /** @deprecated use `PendleTradeYtRequestAction$inboundSchema` instead. */
  export const inboundSchema = PendleTradeYtRequestAction$inboundSchema;
  /** @deprecated use `PendleTradeYtRequestAction$outboundSchema` instead. */
  export const outboundSchema = PendleTradeYtRequestAction$outboundSchema;
}

/** @internal */
export const PendleTradeYtRequestAmountIn$inboundSchema: z.ZodType<
  PendleTradeYtRequestAmountIn,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type PendleTradeYtRequestAmountIn$Outbound = number | string;

/** @internal */
export const PendleTradeYtRequestAmountIn$outboundSchema: z.ZodType<
  PendleTradeYtRequestAmountIn$Outbound,
  z.ZodTypeDef,
  PendleTradeYtRequestAmountIn
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendleTradeYtRequestAmountIn$ {
  /** @deprecated use `PendleTradeYtRequestAmountIn$inboundSchema` instead. */
  export const inboundSchema = PendleTradeYtRequestAmountIn$inboundSchema;
  /** @deprecated use `PendleTradeYtRequestAmountIn$outboundSchema` instead. */
  export const outboundSchema = PendleTradeYtRequestAmountIn$outboundSchema;
  /** @deprecated use `PendleTradeYtRequestAmountIn$Outbound` instead. */
  export type Outbound = PendleTradeYtRequestAmountIn$Outbound;
}

export function pendleTradeYtRequestAmountInToJSON(
  pendleTradeYtRequestAmountIn: PendleTradeYtRequestAmountIn,
): string {
  return JSON.stringify(
    PendleTradeYtRequestAmountIn$outboundSchema.parse(
      pendleTradeYtRequestAmountIn,
    ),
  );
}

export function pendleTradeYtRequestAmountInFromJSON(
  jsonString: string,
): SafeParseResult<PendleTradeYtRequestAmountIn, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PendleTradeYtRequestAmountIn$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendleTradeYtRequestAmountIn' from JSON`,
  );
}

/** @internal */
export const PendleTradeYtRequestChain$inboundSchema: z.ZodNativeEnum<
  typeof PendleTradeYtRequestChain
> = z.nativeEnum(PendleTradeYtRequestChain);

/** @internal */
export const PendleTradeYtRequestChain$outboundSchema: z.ZodNativeEnum<
  typeof PendleTradeYtRequestChain
> = PendleTradeYtRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendleTradeYtRequestChain$ {
  /** @deprecated use `PendleTradeYtRequestChain$inboundSchema` instead. */
  export const inboundSchema = PendleTradeYtRequestChain$inboundSchema;
  /** @deprecated use `PendleTradeYtRequestChain$outboundSchema` instead. */
  export const outboundSchema = PendleTradeYtRequestChain$outboundSchema;
}

/** @internal */
export const PendleTradeYtRequest$inboundSchema: z.ZodType<
  PendleTradeYtRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("PENDLE_TRADE_YT").default("PENDLE_TRADE_YT"),
  market_address: z.string(),
  action: PendleTradeYtRequestAction$inboundSchema,
  token: z.string(),
  amount_in: z.union([z.number(), z.string()]),
  max_slippage_percent: z.number(),
  chain: PendleTradeYtRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "market_address": "marketAddress",
    "amount_in": "amountIn",
    "max_slippage_percent": "maxSlippagePercent",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type PendleTradeYtRequest$Outbound = {
  action_type: "PENDLE_TRADE_YT";
  market_address: string;
  action: string;
  token: string;
  amount_in: number | string;
  max_slippage_percent: number;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const PendleTradeYtRequest$outboundSchema: z.ZodType<
  PendleTradeYtRequest$Outbound,
  z.ZodTypeDef,
  PendleTradeYtRequest
> = z.object({
  actionType: z.literal("PENDLE_TRADE_YT").default("PENDLE_TRADE_YT" as const),
  marketAddress: z.string(),
  action: PendleTradeYtRequestAction$outboundSchema,
  token: z.string(),
  amountIn: z.union([z.number(), z.string()]),
  maxSlippagePercent: z.number(),
  chain: PendleTradeYtRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    marketAddress: "market_address",
    amountIn: "amount_in",
    maxSlippagePercent: "max_slippage_percent",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendleTradeYtRequest$ {
  /** @deprecated use `PendleTradeYtRequest$inboundSchema` instead. */
  export const inboundSchema = PendleTradeYtRequest$inboundSchema;
  /** @deprecated use `PendleTradeYtRequest$outboundSchema` instead. */
  export const outboundSchema = PendleTradeYtRequest$outboundSchema;
  /** @deprecated use `PendleTradeYtRequest$Outbound` instead. */
  export type Outbound = PendleTradeYtRequest$Outbound;
}

export function pendleTradeYtRequestToJSON(
  pendleTradeYtRequest: PendleTradeYtRequest,
): string {
  return JSON.stringify(
    PendleTradeYtRequest$outboundSchema.parse(pendleTradeYtRequest),
  );
}

export function pendleTradeYtRequestFromJSON(
  jsonString: string,
): SafeParseResult<PendleTradeYtRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PendleTradeYtRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendleTradeYtRequest' from JSON`,
  );
}
