/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The amount of USDe to deposit into Ethena's vault.
 */
export type EthenaDepositRequestAmount = number | string;

export const EthenaDepositRequestChain = {
  Ethereum: "ethereum",
} as const;
export type EthenaDepositRequestChain = ClosedEnum<
  typeof EthenaDepositRequestChain
>;

export type EthenaDepositRequest = {
  actionType?: "ETHENA_DEPOSIT" | undefined;
  /**
   * The amount of USDe to deposit into Ethena's vault.
   */
  amount: number | string;
  /**
   * The address which will receive the shares (sUSDe) from Ethena's vault representing their proportional ownership of the vault's assets. Defaults to the sender.
   */
  receiver?: string | null | undefined;
  chain: EthenaDepositRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const EthenaDepositRequestAmount$inboundSchema: z.ZodType<
  EthenaDepositRequestAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type EthenaDepositRequestAmount$Outbound = number | string;

/** @internal */
export const EthenaDepositRequestAmount$outboundSchema: z.ZodType<
  EthenaDepositRequestAmount$Outbound,
  z.ZodTypeDef,
  EthenaDepositRequestAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EthenaDepositRequestAmount$ {
  /** @deprecated use `EthenaDepositRequestAmount$inboundSchema` instead. */
  export const inboundSchema = EthenaDepositRequestAmount$inboundSchema;
  /** @deprecated use `EthenaDepositRequestAmount$outboundSchema` instead. */
  export const outboundSchema = EthenaDepositRequestAmount$outboundSchema;
  /** @deprecated use `EthenaDepositRequestAmount$Outbound` instead. */
  export type Outbound = EthenaDepositRequestAmount$Outbound;
}

export function ethenaDepositRequestAmountToJSON(
  ethenaDepositRequestAmount: EthenaDepositRequestAmount,
): string {
  return JSON.stringify(
    EthenaDepositRequestAmount$outboundSchema.parse(ethenaDepositRequestAmount),
  );
}

export function ethenaDepositRequestAmountFromJSON(
  jsonString: string,
): SafeParseResult<EthenaDepositRequestAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EthenaDepositRequestAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EthenaDepositRequestAmount' from JSON`,
  );
}

/** @internal */
export const EthenaDepositRequestChain$inboundSchema: z.ZodNativeEnum<
  typeof EthenaDepositRequestChain
> = z.nativeEnum(EthenaDepositRequestChain);

/** @internal */
export const EthenaDepositRequestChain$outboundSchema: z.ZodNativeEnum<
  typeof EthenaDepositRequestChain
> = EthenaDepositRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EthenaDepositRequestChain$ {
  /** @deprecated use `EthenaDepositRequestChain$inboundSchema` instead. */
  export const inboundSchema = EthenaDepositRequestChain$inboundSchema;
  /** @deprecated use `EthenaDepositRequestChain$outboundSchema` instead. */
  export const outboundSchema = EthenaDepositRequestChain$outboundSchema;
}

/** @internal */
export const EthenaDepositRequest$inboundSchema: z.ZodType<
  EthenaDepositRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("ETHENA_DEPOSIT").default("ETHENA_DEPOSIT"),
  amount: z.union([z.number(), z.string()]),
  receiver: z.nullable(z.string()).optional(),
  chain: EthenaDepositRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type EthenaDepositRequest$Outbound = {
  action_type: "ETHENA_DEPOSIT";
  amount: number | string;
  receiver?: string | null | undefined;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const EthenaDepositRequest$outboundSchema: z.ZodType<
  EthenaDepositRequest$Outbound,
  z.ZodTypeDef,
  EthenaDepositRequest
> = z.object({
  actionType: z.literal("ETHENA_DEPOSIT").default("ETHENA_DEPOSIT" as const),
  amount: z.union([z.number(), z.string()]),
  receiver: z.nullable(z.string()).optional(),
  chain: EthenaDepositRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace EthenaDepositRequest$ {
  /** @deprecated use `EthenaDepositRequest$inboundSchema` instead. */
  export const inboundSchema = EthenaDepositRequest$inboundSchema;
  /** @deprecated use `EthenaDepositRequest$outboundSchema` instead. */
  export const outboundSchema = EthenaDepositRequest$outboundSchema;
  /** @deprecated use `EthenaDepositRequest$Outbound` instead. */
  export type Outbound = EthenaDepositRequest$Outbound;
}

export function ethenaDepositRequestToJSON(
  ethenaDepositRequest: EthenaDepositRequest,
): string {
  return JSON.stringify(
    EthenaDepositRequest$outboundSchema.parse(ethenaDepositRequest),
  );
}

export function ethenaDepositRequestFromJSON(
  jsonString: string,
): SafeParseResult<EthenaDepositRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => EthenaDepositRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'EthenaDepositRequest' from JSON`,
  );
}
