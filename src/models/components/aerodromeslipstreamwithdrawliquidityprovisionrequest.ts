/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * How much liquidity to take out in percentage.
 */
export type AerodromeSlipstreamWithdrawLiquidityProvisionRequestPercentageForWithdrawal =
  | number
  | string;

export const AerodromeSlipstreamWithdrawLiquidityProvisionRequestChain = {
  Base: "base",
} as const;
export type AerodromeSlipstreamWithdrawLiquidityProvisionRequestChain =
  ClosedEnum<typeof AerodromeSlipstreamWithdrawLiquidityProvisionRequestChain>;

export type AerodromeSlipstreamWithdrawLiquidityProvisionRequest = {
  actionType?: "AERODROME_SLIPSTREAM_WITHDRAW_LIQUIDITY_PROVISION" | undefined;
  /**
   * Token ID of the NFT representing the liquidity provisioned position.
   */
  tokenId: number;
  /**
   * How much liquidity to take out in percentage.
   */
  percentageForWithdrawal: number | string;
  chain: AerodromeSlipstreamWithdrawLiquidityProvisionRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const AerodromeSlipstreamWithdrawLiquidityProvisionRequestPercentageForWithdrawal$inboundSchema:
  z.ZodType<
    AerodromeSlipstreamWithdrawLiquidityProvisionRequestPercentageForWithdrawal,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type AerodromeSlipstreamWithdrawLiquidityProvisionRequestPercentageForWithdrawal$Outbound =
  | number
  | string;

/** @internal */
export const AerodromeSlipstreamWithdrawLiquidityProvisionRequestPercentageForWithdrawal$outboundSchema:
  z.ZodType<
    AerodromeSlipstreamWithdrawLiquidityProvisionRequestPercentageForWithdrawal$Outbound,
    z.ZodTypeDef,
    AerodromeSlipstreamWithdrawLiquidityProvisionRequestPercentageForWithdrawal
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamWithdrawLiquidityProvisionRequestPercentageForWithdrawal$ {
  /** @deprecated use `AerodromeSlipstreamWithdrawLiquidityProvisionRequestPercentageForWithdrawal$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamWithdrawLiquidityProvisionRequestPercentageForWithdrawal$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamWithdrawLiquidityProvisionRequestPercentageForWithdrawal$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamWithdrawLiquidityProvisionRequestPercentageForWithdrawal$outboundSchema;
  /** @deprecated use `AerodromeSlipstreamWithdrawLiquidityProvisionRequestPercentageForWithdrawal$Outbound` instead. */
  export type Outbound =
    AerodromeSlipstreamWithdrawLiquidityProvisionRequestPercentageForWithdrawal$Outbound;
}

export function aerodromeSlipstreamWithdrawLiquidityProvisionRequestPercentageForWithdrawalToJSON(
  aerodromeSlipstreamWithdrawLiquidityProvisionRequestPercentageForWithdrawal:
    AerodromeSlipstreamWithdrawLiquidityProvisionRequestPercentageForWithdrawal,
): string {
  return JSON.stringify(
    AerodromeSlipstreamWithdrawLiquidityProvisionRequestPercentageForWithdrawal$outboundSchema
      .parse(
        aerodromeSlipstreamWithdrawLiquidityProvisionRequestPercentageForWithdrawal,
      ),
  );
}

export function aerodromeSlipstreamWithdrawLiquidityProvisionRequestPercentageForWithdrawalFromJSON(
  jsonString: string,
): SafeParseResult<
  AerodromeSlipstreamWithdrawLiquidityProvisionRequestPercentageForWithdrawal,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AerodromeSlipstreamWithdrawLiquidityProvisionRequestPercentageForWithdrawal$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'AerodromeSlipstreamWithdrawLiquidityProvisionRequestPercentageForWithdrawal' from JSON`,
  );
}

/** @internal */
export const AerodromeSlipstreamWithdrawLiquidityProvisionRequestChain$inboundSchema:
  z.ZodNativeEnum<
    typeof AerodromeSlipstreamWithdrawLiquidityProvisionRequestChain
  > = z.nativeEnum(AerodromeSlipstreamWithdrawLiquidityProvisionRequestChain);

/** @internal */
export const AerodromeSlipstreamWithdrawLiquidityProvisionRequestChain$outboundSchema:
  z.ZodNativeEnum<
    typeof AerodromeSlipstreamWithdrawLiquidityProvisionRequestChain
  > = AerodromeSlipstreamWithdrawLiquidityProvisionRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamWithdrawLiquidityProvisionRequestChain$ {
  /** @deprecated use `AerodromeSlipstreamWithdrawLiquidityProvisionRequestChain$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamWithdrawLiquidityProvisionRequestChain$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamWithdrawLiquidityProvisionRequestChain$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamWithdrawLiquidityProvisionRequestChain$outboundSchema;
}

/** @internal */
export const AerodromeSlipstreamWithdrawLiquidityProvisionRequest$inboundSchema:
  z.ZodType<
    AerodromeSlipstreamWithdrawLiquidityProvisionRequest,
    z.ZodTypeDef,
    unknown
  > = z.object({
    action_type: z.literal("AERODROME_SLIPSTREAM_WITHDRAW_LIQUIDITY_PROVISION")
      .default("AERODROME_SLIPSTREAM_WITHDRAW_LIQUIDITY_PROVISION"),
    token_id: z.number().int(),
    percentage_for_withdrawal: z.union([z.number(), z.string()]),
    chain:
      AerodromeSlipstreamWithdrawLiquidityProvisionRequestChain$inboundSchema,
    sender: z.string(),
    estimate_gas: z.boolean().default(true),
  }).transform((v) => {
    return remap$(v, {
      "action_type": "actionType",
      "token_id": "tokenId",
      "percentage_for_withdrawal": "percentageForWithdrawal",
      "estimate_gas": "estimateGas",
    });
  });

/** @internal */
export type AerodromeSlipstreamWithdrawLiquidityProvisionRequest$Outbound = {
  action_type: "AERODROME_SLIPSTREAM_WITHDRAW_LIQUIDITY_PROVISION";
  token_id: number;
  percentage_for_withdrawal: number | string;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const AerodromeSlipstreamWithdrawLiquidityProvisionRequest$outboundSchema:
  z.ZodType<
    AerodromeSlipstreamWithdrawLiquidityProvisionRequest$Outbound,
    z.ZodTypeDef,
    AerodromeSlipstreamWithdrawLiquidityProvisionRequest
  > = z.object({
    actionType: z.literal("AERODROME_SLIPSTREAM_WITHDRAW_LIQUIDITY_PROVISION")
      .default("AERODROME_SLIPSTREAM_WITHDRAW_LIQUIDITY_PROVISION" as const),
    tokenId: z.number().int(),
    percentageForWithdrawal: z.union([z.number(), z.string()]),
    chain:
      AerodromeSlipstreamWithdrawLiquidityProvisionRequestChain$outboundSchema,
    sender: z.string(),
    estimateGas: z.boolean().default(true),
  }).transform((v) => {
    return remap$(v, {
      actionType: "action_type",
      tokenId: "token_id",
      percentageForWithdrawal: "percentage_for_withdrawal",
      estimateGas: "estimate_gas",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeSlipstreamWithdrawLiquidityProvisionRequest$ {
  /** @deprecated use `AerodromeSlipstreamWithdrawLiquidityProvisionRequest$inboundSchema` instead. */
  export const inboundSchema =
    AerodromeSlipstreamWithdrawLiquidityProvisionRequest$inboundSchema;
  /** @deprecated use `AerodromeSlipstreamWithdrawLiquidityProvisionRequest$outboundSchema` instead. */
  export const outboundSchema =
    AerodromeSlipstreamWithdrawLiquidityProvisionRequest$outboundSchema;
  /** @deprecated use `AerodromeSlipstreamWithdrawLiquidityProvisionRequest$Outbound` instead. */
  export type Outbound =
    AerodromeSlipstreamWithdrawLiquidityProvisionRequest$Outbound;
}

export function aerodromeSlipstreamWithdrawLiquidityProvisionRequestToJSON(
  aerodromeSlipstreamWithdrawLiquidityProvisionRequest:
    AerodromeSlipstreamWithdrawLiquidityProvisionRequest,
): string {
  return JSON.stringify(
    AerodromeSlipstreamWithdrawLiquidityProvisionRequest$outboundSchema.parse(
      aerodromeSlipstreamWithdrawLiquidityProvisionRequest,
    ),
  );
}

export function aerodromeSlipstreamWithdrawLiquidityProvisionRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  AerodromeSlipstreamWithdrawLiquidityProvisionRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      AerodromeSlipstreamWithdrawLiquidityProvisionRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'AerodromeSlipstreamWithdrawLiquidityProvisionRequest' from JSON`,
  );
}
