/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type AerodromePosition = {
  nonce: number;
  operator: string;
  token0: string;
  token1: string;
  tickSpacing: number;
  tickLower: number;
  tickUpper: number;
  liquidity: number;
  feeGrowthInside0LastX128: number;
  feeGrowthInside1LastX128: number;
  tokensOwed0: number;
  tokensOwed1: number;
  tokenId: number;
};

/** @internal */
export const AerodromePosition$inboundSchema: z.ZodType<
  AerodromePosition,
  z.ZodTypeDef,
  unknown
> = z.object({
  nonce: z.number().int(),
  operator: z.string(),
  token0: z.string(),
  token1: z.string(),
  tick_spacing: z.number().int(),
  tick_lower: z.number().int(),
  tick_upper: z.number().int(),
  liquidity: z.number().int(),
  fee_growth_inside0_last_x128: z.number().int(),
  fee_growth_inside1_last_x128: z.number().int(),
  tokens_owed0: z.number().int(),
  tokens_owed1: z.number().int(),
  token_id: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    "tick_spacing": "tickSpacing",
    "tick_lower": "tickLower",
    "tick_upper": "tickUpper",
    "fee_growth_inside0_last_x128": "feeGrowthInside0LastX128",
    "fee_growth_inside1_last_x128": "feeGrowthInside1LastX128",
    "tokens_owed0": "tokensOwed0",
    "tokens_owed1": "tokensOwed1",
    "token_id": "tokenId",
  });
});

/** @internal */
export type AerodromePosition$Outbound = {
  nonce: number;
  operator: string;
  token0: string;
  token1: string;
  tick_spacing: number;
  tick_lower: number;
  tick_upper: number;
  liquidity: number;
  fee_growth_inside0_last_x128: number;
  fee_growth_inside1_last_x128: number;
  tokens_owed0: number;
  tokens_owed1: number;
  token_id: number;
};

/** @internal */
export const AerodromePosition$outboundSchema: z.ZodType<
  AerodromePosition$Outbound,
  z.ZodTypeDef,
  AerodromePosition
> = z.object({
  nonce: z.number().int(),
  operator: z.string(),
  token0: z.string(),
  token1: z.string(),
  tickSpacing: z.number().int(),
  tickLower: z.number().int(),
  tickUpper: z.number().int(),
  liquidity: z.number().int(),
  feeGrowthInside0LastX128: z.number().int(),
  feeGrowthInside1LastX128: z.number().int(),
  tokensOwed0: z.number().int(),
  tokensOwed1: z.number().int(),
  tokenId: z.number().int(),
}).transform((v) => {
  return remap$(v, {
    tickSpacing: "tick_spacing",
    tickLower: "tick_lower",
    tickUpper: "tick_upper",
    feeGrowthInside0LastX128: "fee_growth_inside0_last_x128",
    feeGrowthInside1LastX128: "fee_growth_inside1_last_x128",
    tokensOwed0: "tokens_owed0",
    tokensOwed1: "tokens_owed1",
    tokenId: "token_id",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromePosition$ {
  /** @deprecated use `AerodromePosition$inboundSchema` instead. */
  export const inboundSchema = AerodromePosition$inboundSchema;
  /** @deprecated use `AerodromePosition$outboundSchema` instead. */
  export const outboundSchema = AerodromePosition$outboundSchema;
  /** @deprecated use `AerodromePosition$Outbound` instead. */
  export type Outbound = AerodromePosition$Outbound;
}

export function aerodromePositionToJSON(
  aerodromePosition: AerodromePosition,
): string {
  return JSON.stringify(
    AerodromePosition$outboundSchema.parse(aerodromePosition),
  );
}

export function aerodromePositionFromJSON(
  jsonString: string,
): SafeParseResult<AerodromePosition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AerodromePosition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AerodromePosition' from JSON`,
  );
}
