/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const SkyWithdrawRequestChain = {
  Ethereum: "ethereum",
} as const;
export type SkyWithdrawRequestChain = ClosedEnum<
  typeof SkyWithdrawRequestChain
>;

export type SkyWithdrawRequest = {
  actionType?: "SKY_WITHDRAW" | undefined;
  /**
   * The amount of USDS you would like to withdraw. If set to 'ALL', your total deposited USDS amount will be withdrawn.
   */
  amount?: any | undefined;
  /**
   * The address which will receive the withdrawn USDS. Defaults to the sender.
   */
  receiver?: string | null | undefined;
  chain?: SkyWithdrawRequestChain | undefined;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const SkyWithdrawRequestChain$inboundSchema: z.ZodNativeEnum<
  typeof SkyWithdrawRequestChain
> = z.nativeEnum(SkyWithdrawRequestChain);

/** @internal */
export const SkyWithdrawRequestChain$outboundSchema: z.ZodNativeEnum<
  typeof SkyWithdrawRequestChain
> = SkyWithdrawRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkyWithdrawRequestChain$ {
  /** @deprecated use `SkyWithdrawRequestChain$inboundSchema` instead. */
  export const inboundSchema = SkyWithdrawRequestChain$inboundSchema;
  /** @deprecated use `SkyWithdrawRequestChain$outboundSchema` instead. */
  export const outboundSchema = SkyWithdrawRequestChain$outboundSchema;
}

/** @internal */
export const SkyWithdrawRequest$inboundSchema: z.ZodType<
  SkyWithdrawRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("SKY_WITHDRAW").default("SKY_WITHDRAW"),
  amount: z.any().optional(),
  receiver: z.nullable(z.string()).optional(),
  chain: SkyWithdrawRequestChain$inboundSchema.default("ethereum"),
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type SkyWithdrawRequest$Outbound = {
  action_type: "SKY_WITHDRAW";
  amount?: any | undefined;
  receiver?: string | null | undefined;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const SkyWithdrawRequest$outboundSchema: z.ZodType<
  SkyWithdrawRequest$Outbound,
  z.ZodTypeDef,
  SkyWithdrawRequest
> = z.object({
  actionType: z.literal("SKY_WITHDRAW").default("SKY_WITHDRAW" as const),
  amount: z.any().optional(),
  receiver: z.nullable(z.string()).optional(),
  chain: SkyWithdrawRequestChain$outboundSchema.default("ethereum"),
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkyWithdrawRequest$ {
  /** @deprecated use `SkyWithdrawRequest$inboundSchema` instead. */
  export const inboundSchema = SkyWithdrawRequest$inboundSchema;
  /** @deprecated use `SkyWithdrawRequest$outboundSchema` instead. */
  export const outboundSchema = SkyWithdrawRequest$outboundSchema;
  /** @deprecated use `SkyWithdrawRequest$Outbound` instead. */
  export type Outbound = SkyWithdrawRequest$Outbound;
}

export function skyWithdrawRequestToJSON(
  skyWithdrawRequest: SkyWithdrawRequest,
): string {
  return JSON.stringify(
    SkyWithdrawRequest$outboundSchema.parse(skyWithdrawRequest),
  );
}

export function skyWithdrawRequestFromJSON(
  jsonString: string,
): SafeParseResult<SkyWithdrawRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SkyWithdrawRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SkyWithdrawRequest' from JSON`,
  );
}
