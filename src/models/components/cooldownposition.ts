/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * When the cooldown period ends. ISO 8601 format. UTC timezone.
 */
export type CooldownEnd = Date | boolean;

export type CooldownPosition = {
  /**
   * The amount of USDe currently in a cooldown period.
   */
  amountInUnderlyingAsset: string;
  /**
   * When the cooldown period ends. ISO 8601 format. UTC timezone.
   */
  cooldownEnd: Date | boolean;
  /**
   * Whether the USDe in cooldown can be withdrawn at this moment.
   */
  canBeWithdrawn: boolean;
};

/** @internal */
export const CooldownEnd$inboundSchema: z.ZodType<
  CooldownEnd,
  z.ZodTypeDef,
  unknown
> = z.union([
  z.string().datetime({ offset: true }).transform(v => new Date(v)),
  z.boolean(),
]);

/** @internal */
export type CooldownEnd$Outbound = string | boolean;

/** @internal */
export const CooldownEnd$outboundSchema: z.ZodType<
  CooldownEnd$Outbound,
  z.ZodTypeDef,
  CooldownEnd
> = z.union([z.date().transform(v => v.toISOString()), z.boolean()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CooldownEnd$ {
  /** @deprecated use `CooldownEnd$inboundSchema` instead. */
  export const inboundSchema = CooldownEnd$inboundSchema;
  /** @deprecated use `CooldownEnd$outboundSchema` instead. */
  export const outboundSchema = CooldownEnd$outboundSchema;
  /** @deprecated use `CooldownEnd$Outbound` instead. */
  export type Outbound = CooldownEnd$Outbound;
}

export function cooldownEndToJSON(cooldownEnd: CooldownEnd): string {
  return JSON.stringify(CooldownEnd$outboundSchema.parse(cooldownEnd));
}

export function cooldownEndFromJSON(
  jsonString: string,
): SafeParseResult<CooldownEnd, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CooldownEnd$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CooldownEnd' from JSON`,
  );
}

/** @internal */
export const CooldownPosition$inboundSchema: z.ZodType<
  CooldownPosition,
  z.ZodTypeDef,
  unknown
> = z.object({
  amount_in_underlying_asset: z.string(),
  cooldown_end: z.union([
    z.string().datetime({ offset: true }).transform(v => new Date(v)),
    z.boolean(),
  ]),
  can_be_withdrawn: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    "amount_in_underlying_asset": "amountInUnderlyingAsset",
    "cooldown_end": "cooldownEnd",
    "can_be_withdrawn": "canBeWithdrawn",
  });
});

/** @internal */
export type CooldownPosition$Outbound = {
  amount_in_underlying_asset: string;
  cooldown_end: string | boolean;
  can_be_withdrawn: boolean;
};

/** @internal */
export const CooldownPosition$outboundSchema: z.ZodType<
  CooldownPosition$Outbound,
  z.ZodTypeDef,
  CooldownPosition
> = z.object({
  amountInUnderlyingAsset: z.string(),
  cooldownEnd: z.union([z.date().transform(v => v.toISOString()), z.boolean()]),
  canBeWithdrawn: z.boolean(),
}).transform((v) => {
  return remap$(v, {
    amountInUnderlyingAsset: "amount_in_underlying_asset",
    cooldownEnd: "cooldown_end",
    canBeWithdrawn: "can_be_withdrawn",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CooldownPosition$ {
  /** @deprecated use `CooldownPosition$inboundSchema` instead. */
  export const inboundSchema = CooldownPosition$inboundSchema;
  /** @deprecated use `CooldownPosition$outboundSchema` instead. */
  export const outboundSchema = CooldownPosition$outboundSchema;
  /** @deprecated use `CooldownPosition$Outbound` instead. */
  export type Outbound = CooldownPosition$Outbound;
}

export function cooldownPositionToJSON(
  cooldownPosition: CooldownPosition,
): string {
  return JSON.stringify(
    CooldownPosition$outboundSchema.parse(cooldownPosition),
  );
}

export function cooldownPositionFromJSON(
  jsonString: string,
): SafeParseResult<CooldownPosition, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CooldownPosition$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CooldownPosition' from JSON`,
  );
}
