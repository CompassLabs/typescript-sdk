/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  CompassApiBackendModelsMorphoReadResponseGetMarketsAsset,
  CompassApiBackendModelsMorphoReadResponseGetMarketsAsset$inboundSchema,
  CompassApiBackendModelsMorphoReadResponseGetMarketsAsset$Outbound,
  CompassApiBackendModelsMorphoReadResponseGetMarketsAsset$outboundSchema,
} from "./compassapibackendmodelsmorphoreadresponsegetmarketsasset.js";
import {
  CompassApiBackendModelsMorphoReadResponseGetMarketsMarketState,
  CompassApiBackendModelsMorphoReadResponseGetMarketsMarketState$inboundSchema,
  CompassApiBackendModelsMorphoReadResponseGetMarketsMarketState$Outbound,
  CompassApiBackendModelsMorphoReadResponseGetMarketsMarketState$outboundSchema,
} from "./compassapibackendmodelsmorphoreadresponsegetmarketsmarketstate.js";
import {
  WeeklyApys,
  WeeklyApys$inboundSchema,
  WeeklyApys$Outbound,
  WeeklyApys$outboundSchema,
} from "./weeklyapys.js";

export type MorphoMarket = {
  uniqueKey: string;
  lltv: number;
  oracleAddress: string;
  irmAddress: string;
  state: CompassApiBackendModelsMorphoReadResponseGetMarketsMarketState;
  weeklyApys: WeeklyApys;
  collateralAsset:
    | CompassApiBackendModelsMorphoReadResponseGetMarketsAsset
    | null;
  loanAsset: CompassApiBackendModelsMorphoReadResponseGetMarketsAsset;
};

/** @internal */
export const MorphoMarket$inboundSchema: z.ZodType<
  MorphoMarket,
  z.ZodTypeDef,
  unknown
> = z.object({
  uniqueKey: z.string(),
  lltv: z.number().int(),
  oracleAddress: z.string(),
  irmAddress: z.string(),
  state:
    CompassApiBackendModelsMorphoReadResponseGetMarketsMarketState$inboundSchema,
  weeklyApys: WeeklyApys$inboundSchema,
  collateralAsset: z.nullable(
    CompassApiBackendModelsMorphoReadResponseGetMarketsAsset$inboundSchema,
  ),
  loanAsset:
    CompassApiBackendModelsMorphoReadResponseGetMarketsAsset$inboundSchema,
});

/** @internal */
export type MorphoMarket$Outbound = {
  uniqueKey: string;
  lltv: number;
  oracleAddress: string;
  irmAddress: string;
  state:
    CompassApiBackendModelsMorphoReadResponseGetMarketsMarketState$Outbound;
  weeklyApys: WeeklyApys$Outbound;
  collateralAsset:
    | CompassApiBackendModelsMorphoReadResponseGetMarketsAsset$Outbound
    | null;
  loanAsset: CompassApiBackendModelsMorphoReadResponseGetMarketsAsset$Outbound;
};

/** @internal */
export const MorphoMarket$outboundSchema: z.ZodType<
  MorphoMarket$Outbound,
  z.ZodTypeDef,
  MorphoMarket
> = z.object({
  uniqueKey: z.string(),
  lltv: z.number().int(),
  oracleAddress: z.string(),
  irmAddress: z.string(),
  state:
    CompassApiBackendModelsMorphoReadResponseGetMarketsMarketState$outboundSchema,
  weeklyApys: WeeklyApys$outboundSchema,
  collateralAsset: z.nullable(
    CompassApiBackendModelsMorphoReadResponseGetMarketsAsset$outboundSchema,
  ),
  loanAsset:
    CompassApiBackendModelsMorphoReadResponseGetMarketsAsset$outboundSchema,
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MorphoMarket$ {
  /** @deprecated use `MorphoMarket$inboundSchema` instead. */
  export const inboundSchema = MorphoMarket$inboundSchema;
  /** @deprecated use `MorphoMarket$outboundSchema` instead. */
  export const outboundSchema = MorphoMarket$outboundSchema;
  /** @deprecated use `MorphoMarket$Outbound` instead. */
  export type Outbound = MorphoMarket$Outbound;
}

export function morphoMarketToJSON(morphoMarket: MorphoMarket): string {
  return JSON.stringify(MorphoMarket$outboundSchema.parse(morphoMarket));
}

export function morphoMarketFromJSON(
  jsonString: string,
): SafeParseResult<MorphoMarket, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MorphoMarket$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MorphoMarket' from JSON`,
  );
}
