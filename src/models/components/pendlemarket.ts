/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Details,
  Details$inboundSchema,
  Details$Outbound,
  Details$outboundSchema,
} from "./details.js";

export type PendleMarket = {
  name: string;
  address: string;
  expiry: Date;
  pt: string;
  yt: string;
  sy: string;
  underlyingAsset: string;
  details: Details;
  isNew: boolean;
  isPrime: boolean;
  timestamp: Date;
};

/** @internal */
export const PendleMarket$inboundSchema: z.ZodType<
  PendleMarket,
  z.ZodTypeDef,
  unknown
> = z.object({
  name: z.string(),
  address: z.string(),
  expiry: z.string().datetime({ offset: true }).transform(v => new Date(v)),
  pt: z.string(),
  yt: z.string(),
  sy: z.string(),
  underlyingAsset: z.string(),
  details: Details$inboundSchema,
  isNew: z.boolean(),
  isPrime: z.boolean(),
  timestamp: z.string().datetime({ offset: true }).transform(v => new Date(v)),
});

/** @internal */
export type PendleMarket$Outbound = {
  name: string;
  address: string;
  expiry: string;
  pt: string;
  yt: string;
  sy: string;
  underlyingAsset: string;
  details: Details$Outbound;
  isNew: boolean;
  isPrime: boolean;
  timestamp: string;
};

/** @internal */
export const PendleMarket$outboundSchema: z.ZodType<
  PendleMarket$Outbound,
  z.ZodTypeDef,
  PendleMarket
> = z.object({
  name: z.string(),
  address: z.string(),
  expiry: z.date().transform(v => v.toISOString()),
  pt: z.string(),
  yt: z.string(),
  sy: z.string(),
  underlyingAsset: z.string(),
  details: Details$outboundSchema,
  isNew: z.boolean(),
  isPrime: z.boolean(),
  timestamp: z.date().transform(v => v.toISOString()),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendleMarket$ {
  /** @deprecated use `PendleMarket$inboundSchema` instead. */
  export const inboundSchema = PendleMarket$inboundSchema;
  /** @deprecated use `PendleMarket$outboundSchema` instead. */
  export const outboundSchema = PendleMarket$outboundSchema;
  /** @deprecated use `PendleMarket$Outbound` instead. */
  export type Outbound = PendleMarket$Outbound;
}

export function pendleMarketToJSON(pendleMarket: PendleMarket): string {
  return JSON.stringify(PendleMarket$outboundSchema.parse(pendleMarket));
}

export function pendleMarketFromJSON(
  jsonString: string,
): SafeParseResult<PendleMarket, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PendleMarket$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendleMarket' from JSON`,
  );
}
