/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The amount of USDS you would like to deposit for sUSDS to earn yield.
 */
export type SkyDepositRequestAmount = number | string;

export const SkyDepositRequestChain = {
  Ethereum: "ethereum",
} as const;
export type SkyDepositRequestChain = ClosedEnum<typeof SkyDepositRequestChain>;

export type SkyDepositRequest = {
  actionType?: "SKY_DEPOSIT" | undefined;
  /**
   * The amount of USDS you would like to deposit for sUSDS to earn yield.
   */
  amount: number | string;
  /**
   * The address which will receive the sUSDS. Defaults to the sender.
   */
  receiver?: string | null | undefined;
  chain?: SkyDepositRequestChain | undefined;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const SkyDepositRequestAmount$inboundSchema: z.ZodType<
  SkyDepositRequestAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type SkyDepositRequestAmount$Outbound = number | string;

/** @internal */
export const SkyDepositRequestAmount$outboundSchema: z.ZodType<
  SkyDepositRequestAmount$Outbound,
  z.ZodTypeDef,
  SkyDepositRequestAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkyDepositRequestAmount$ {
  /** @deprecated use `SkyDepositRequestAmount$inboundSchema` instead. */
  export const inboundSchema = SkyDepositRequestAmount$inboundSchema;
  /** @deprecated use `SkyDepositRequestAmount$outboundSchema` instead. */
  export const outboundSchema = SkyDepositRequestAmount$outboundSchema;
  /** @deprecated use `SkyDepositRequestAmount$Outbound` instead. */
  export type Outbound = SkyDepositRequestAmount$Outbound;
}

export function skyDepositRequestAmountToJSON(
  skyDepositRequestAmount: SkyDepositRequestAmount,
): string {
  return JSON.stringify(
    SkyDepositRequestAmount$outboundSchema.parse(skyDepositRequestAmount),
  );
}

export function skyDepositRequestAmountFromJSON(
  jsonString: string,
): SafeParseResult<SkyDepositRequestAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SkyDepositRequestAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SkyDepositRequestAmount' from JSON`,
  );
}

/** @internal */
export const SkyDepositRequestChain$inboundSchema: z.ZodNativeEnum<
  typeof SkyDepositRequestChain
> = z.nativeEnum(SkyDepositRequestChain);

/** @internal */
export const SkyDepositRequestChain$outboundSchema: z.ZodNativeEnum<
  typeof SkyDepositRequestChain
> = SkyDepositRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkyDepositRequestChain$ {
  /** @deprecated use `SkyDepositRequestChain$inboundSchema` instead. */
  export const inboundSchema = SkyDepositRequestChain$inboundSchema;
  /** @deprecated use `SkyDepositRequestChain$outboundSchema` instead. */
  export const outboundSchema = SkyDepositRequestChain$outboundSchema;
}

/** @internal */
export const SkyDepositRequest$inboundSchema: z.ZodType<
  SkyDepositRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("SKY_DEPOSIT").default("SKY_DEPOSIT"),
  amount: z.union([z.number(), z.string()]),
  receiver: z.nullable(z.string()).optional(),
  chain: SkyDepositRequestChain$inboundSchema.default("ethereum"),
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type SkyDepositRequest$Outbound = {
  action_type: "SKY_DEPOSIT";
  amount: number | string;
  receiver?: string | null | undefined;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const SkyDepositRequest$outboundSchema: z.ZodType<
  SkyDepositRequest$Outbound,
  z.ZodTypeDef,
  SkyDepositRequest
> = z.object({
  actionType: z.literal("SKY_DEPOSIT").default("SKY_DEPOSIT" as const),
  amount: z.union([z.number(), z.string()]),
  receiver: z.nullable(z.string()).optional(),
  chain: SkyDepositRequestChain$outboundSchema.default("ethereum"),
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SkyDepositRequest$ {
  /** @deprecated use `SkyDepositRequest$inboundSchema` instead. */
  export const inboundSchema = SkyDepositRequest$inboundSchema;
  /** @deprecated use `SkyDepositRequest$outboundSchema` instead. */
  export const outboundSchema = SkyDepositRequest$outboundSchema;
  /** @deprecated use `SkyDepositRequest$Outbound` instead. */
  export type Outbound = SkyDepositRequest$Outbound;
}

export function skyDepositRequestToJSON(
  skyDepositRequest: SkyDepositRequest,
): string {
  return JSON.stringify(
    SkyDepositRequest$outboundSchema.parse(skyDepositRequest),
  );
}

export function skyDepositRequestFromJSON(
  jsonString: string,
): SafeParseResult<SkyDepositRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SkyDepositRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SkyDepositRequest' from JSON`,
  );
}
