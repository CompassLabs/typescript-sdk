/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Reserve,
  Reserve$inboundSchema,
  Reserve$Outbound,
  Reserve$outboundSchema,
} from "./reserve.js";

export type UsageAsCollateral = {
  /**
   * The id of a historical transaction on aave
   */
  id: string;
  /**
   * Timestamp in unix time
   */
  timestamp: number;
  /**
   * Transaction hash. You can paste these into the search bar on etherscan
   */
  txHash: string;
  fromState: boolean;
  toState: boolean;
  reserve: Reserve;
  /**
   * The type of transaction
   */
  action?: "UsageAsCollateral" | undefined;
  block: number;
};

/** @internal */
export const UsageAsCollateral$inboundSchema: z.ZodType<
  UsageAsCollateral,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  timestamp: z.number().int(),
  txHash: z.string(),
  fromState: z.boolean(),
  toState: z.boolean(),
  reserve: Reserve$inboundSchema,
  action: z.literal("UsageAsCollateral").default("UsageAsCollateral")
    .optional(),
  block: z.number().int(),
});

/** @internal */
export type UsageAsCollateral$Outbound = {
  id: string;
  timestamp: number;
  txHash: string;
  fromState: boolean;
  toState: boolean;
  reserve: Reserve$Outbound;
  action: "UsageAsCollateral";
  block: number;
};

/** @internal */
export const UsageAsCollateral$outboundSchema: z.ZodType<
  UsageAsCollateral$Outbound,
  z.ZodTypeDef,
  UsageAsCollateral
> = z.object({
  id: z.string(),
  timestamp: z.number().int(),
  txHash: z.string(),
  fromState: z.boolean(),
  toState: z.boolean(),
  reserve: Reserve$outboundSchema,
  action: z.literal("UsageAsCollateral").default("UsageAsCollateral" as const),
  block: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UsageAsCollateral$ {
  /** @deprecated use `UsageAsCollateral$inboundSchema` instead. */
  export const inboundSchema = UsageAsCollateral$inboundSchema;
  /** @deprecated use `UsageAsCollateral$outboundSchema` instead. */
  export const outboundSchema = UsageAsCollateral$outboundSchema;
  /** @deprecated use `UsageAsCollateral$Outbound` instead. */
  export type Outbound = UsageAsCollateral$Outbound;
}

export function usageAsCollateralToJSON(
  usageAsCollateral: UsageAsCollateral,
): string {
  return JSON.stringify(
    UsageAsCollateral$outboundSchema.parse(usageAsCollateral),
  );
}

export function usageAsCollateralFromJSON(
  jsonString: string,
): SafeParseResult<UsageAsCollateral, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UsageAsCollateral$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UsageAsCollateral' from JSON`,
  );
}
