/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  AerodromePosition,
  AerodromePosition$inboundSchema,
  AerodromePosition$Outbound,
  AerodromePosition$outboundSchema,
} from "./aerodromeposition.js";

export type AerodromeLPPositionsResponse = {
  /**
   * Liquidity provision positions belonging to a particular user. The key is a
   *
   * @remarks
   * tuple of the token0, token1, tick_spacing, tick_lower, and tick_upper of the position.
   */
  positions: { [k: string]: AerodromePosition };
};

/** @internal */
export const AerodromeLPPositionsResponse$inboundSchema: z.ZodType<
  AerodromeLPPositionsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  positions: z.record(AerodromePosition$inboundSchema),
});

/** @internal */
export type AerodromeLPPositionsResponse$Outbound = {
  positions: { [k: string]: AerodromePosition$Outbound };
};

/** @internal */
export const AerodromeLPPositionsResponse$outboundSchema: z.ZodType<
  AerodromeLPPositionsResponse$Outbound,
  z.ZodTypeDef,
  AerodromeLPPositionsResponse
> = z.object({
  positions: z.record(AerodromePosition$outboundSchema),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AerodromeLPPositionsResponse$ {
  /** @deprecated use `AerodromeLPPositionsResponse$inboundSchema` instead. */
  export const inboundSchema = AerodromeLPPositionsResponse$inboundSchema;
  /** @deprecated use `AerodromeLPPositionsResponse$outboundSchema` instead. */
  export const outboundSchema = AerodromeLPPositionsResponse$outboundSchema;
  /** @deprecated use `AerodromeLPPositionsResponse$Outbound` instead. */
  export type Outbound = AerodromeLPPositionsResponse$Outbound;
}

export function aerodromeLPPositionsResponseToJSON(
  aerodromeLPPositionsResponse: AerodromeLPPositionsResponse,
): string {
  return JSON.stringify(
    AerodromeLPPositionsResponse$outboundSchema.parse(
      aerodromeLPPositionsResponse,
    ),
  );
}

export function aerodromeLPPositionsResponseFromJSON(
  jsonString: string,
): SafeParseResult<AerodromeLPPositionsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AerodromeLPPositionsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AerodromeLPPositionsResponse' from JSON`,
  );
}
