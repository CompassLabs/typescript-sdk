/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type ChainInfo = {
  id: number;
  network?: string | null | undefined;
};

/** @internal */
export const ChainInfo$inboundSchema: z.ZodType<
  ChainInfo,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.number().int(),
  network: z.nullable(z.string()).optional(),
});

/** @internal */
export type ChainInfo$Outbound = {
  id: number;
  network?: string | null | undefined;
};

/** @internal */
export const ChainInfo$outboundSchema: z.ZodType<
  ChainInfo$Outbound,
  z.ZodTypeDef,
  ChainInfo
> = z.object({
  id: z.number().int(),
  network: z.nullable(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ChainInfo$ {
  /** @deprecated use `ChainInfo$inboundSchema` instead. */
  export const inboundSchema = ChainInfo$inboundSchema;
  /** @deprecated use `ChainInfo$outboundSchema` instead. */
  export const outboundSchema = ChainInfo$outboundSchema;
  /** @deprecated use `ChainInfo$Outbound` instead. */
  export type Outbound = ChainInfo$Outbound;
}

export function chainInfoToJSON(chainInfo: ChainInfo): string {
  return JSON.stringify(ChainInfo$outboundSchema.parse(chainInfo));
}

export function chainInfoFromJSON(
  jsonString: string,
): SafeParseResult<ChainInfo, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ChainInfo$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ChainInfo' from JSON`,
  );
}
