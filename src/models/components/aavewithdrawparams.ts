/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The amount of the asset to withdraw
 */
export type AaveWithdrawParamsAmount = number | string;

export type AaveWithdrawParams = {
  actionType?: "AAVE_WITHDRAW" | undefined;
  /**
   * The symbol of the underlying asset to withdraw..
   */
  token: string;
  /**
   * The amount of the asset to withdraw
   */
  amount: number | string;
  /**
   * The address of the recipient of the withdrawn funds.
   */
  recipient: string;
};

/** @internal */
export const AaveWithdrawParamsAmount$inboundSchema: z.ZodType<
  AaveWithdrawParamsAmount,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type AaveWithdrawParamsAmount$Outbound = number | string;

/** @internal */
export const AaveWithdrawParamsAmount$outboundSchema: z.ZodType<
  AaveWithdrawParamsAmount$Outbound,
  z.ZodTypeDef,
  AaveWithdrawParamsAmount
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AaveWithdrawParamsAmount$ {
  /** @deprecated use `AaveWithdrawParamsAmount$inboundSchema` instead. */
  export const inboundSchema = AaveWithdrawParamsAmount$inboundSchema;
  /** @deprecated use `AaveWithdrawParamsAmount$outboundSchema` instead. */
  export const outboundSchema = AaveWithdrawParamsAmount$outboundSchema;
  /** @deprecated use `AaveWithdrawParamsAmount$Outbound` instead. */
  export type Outbound = AaveWithdrawParamsAmount$Outbound;
}

export function aaveWithdrawParamsAmountToJSON(
  aaveWithdrawParamsAmount: AaveWithdrawParamsAmount,
): string {
  return JSON.stringify(
    AaveWithdrawParamsAmount$outboundSchema.parse(aaveWithdrawParamsAmount),
  );
}

export function aaveWithdrawParamsAmountFromJSON(
  jsonString: string,
): SafeParseResult<AaveWithdrawParamsAmount, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AaveWithdrawParamsAmount$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AaveWithdrawParamsAmount' from JSON`,
  );
}

/** @internal */
export const AaveWithdrawParams$inboundSchema: z.ZodType<
  AaveWithdrawParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("AAVE_WITHDRAW").default("AAVE_WITHDRAW"),
  token: z.string(),
  amount: z.union([z.number(), z.string()]),
  recipient: z.string(),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
  });
});

/** @internal */
export type AaveWithdrawParams$Outbound = {
  action_type: "AAVE_WITHDRAW";
  token: string;
  amount: number | string;
  recipient: string;
};

/** @internal */
export const AaveWithdrawParams$outboundSchema: z.ZodType<
  AaveWithdrawParams$Outbound,
  z.ZodTypeDef,
  AaveWithdrawParams
> = z.object({
  actionType: z.literal("AAVE_WITHDRAW").default("AAVE_WITHDRAW" as const),
  token: z.string(),
  amount: z.union([z.number(), z.string()]),
  recipient: z.string(),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AaveWithdrawParams$ {
  /** @deprecated use `AaveWithdrawParams$inboundSchema` instead. */
  export const inboundSchema = AaveWithdrawParams$inboundSchema;
  /** @deprecated use `AaveWithdrawParams$outboundSchema` instead. */
  export const outboundSchema = AaveWithdrawParams$outboundSchema;
  /** @deprecated use `AaveWithdrawParams$Outbound` instead. */
  export type Outbound = AaveWithdrawParams$Outbound;
}

export function aaveWithdrawParamsToJSON(
  aaveWithdrawParams: AaveWithdrawParams,
): string {
  return JSON.stringify(
    AaveWithdrawParams$outboundSchema.parse(aaveWithdrawParams),
  );
}

export function aaveWithdrawParamsFromJSON(
  jsonString: string,
): SafeParseResult<AaveWithdrawParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AaveWithdrawParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AaveWithdrawParams' from JSON`,
  );
}
