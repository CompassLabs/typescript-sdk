/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import * as b64$ from "../../lib/base64.js";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const MorphoRepayRequestChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type MorphoRepayRequestChain = ClosedEnum<
  typeof MorphoRepayRequestChain
>;

export type MorphoRepayRequest = {
  actionType?: "MORPHO_REPAY" | undefined;
  /**
   * Amount of the token to repay to the market. If set to 'ALL', all debt plus interest will be paid back if the user has a sufficient token balance in their wallet.
   */
  amount?: any | undefined;
  /**
   * The key that uniquely identifies the market. This can be found using the 'Get Markets' endpoint.
   */
  uniqueMarketKey: string;
  /**
   * The address on behalf of whom the repayment is made. Defaults to sender.
   */
  onBehalfOf?: string | null | undefined;
  /**
   * An optional field for callback byte data that will be triggered upon successful repaying of debt.
   */
  callbackData?: Uint8Array | string | null | undefined;
  chain: MorphoRepayRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const MorphoRepayRequestChain$inboundSchema: z.ZodNativeEnum<
  typeof MorphoRepayRequestChain
> = z.nativeEnum(MorphoRepayRequestChain);

/** @internal */
export const MorphoRepayRequestChain$outboundSchema: z.ZodNativeEnum<
  typeof MorphoRepayRequestChain
> = MorphoRepayRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MorphoRepayRequestChain$ {
  /** @deprecated use `MorphoRepayRequestChain$inboundSchema` instead. */
  export const inboundSchema = MorphoRepayRequestChain$inboundSchema;
  /** @deprecated use `MorphoRepayRequestChain$outboundSchema` instead. */
  export const outboundSchema = MorphoRepayRequestChain$outboundSchema;
}

/** @internal */
export const MorphoRepayRequest$inboundSchema: z.ZodType<
  MorphoRepayRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("MORPHO_REPAY").default("MORPHO_REPAY"),
  amount: z.any().optional(),
  unique_market_key: z.string(),
  on_behalf_of: z.nullable(z.string()).optional(),
  callback_data: z.nullable(b64$.zodInbound).optional(),
  chain: MorphoRepayRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "unique_market_key": "uniqueMarketKey",
    "on_behalf_of": "onBehalfOf",
    "callback_data": "callbackData",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type MorphoRepayRequest$Outbound = {
  action_type: "MORPHO_REPAY";
  amount?: any | undefined;
  unique_market_key: string;
  on_behalf_of?: string | null | undefined;
  callback_data?: Uint8Array | null | undefined;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const MorphoRepayRequest$outboundSchema: z.ZodType<
  MorphoRepayRequest$Outbound,
  z.ZodTypeDef,
  MorphoRepayRequest
> = z.object({
  actionType: z.literal("MORPHO_REPAY").default("MORPHO_REPAY" as const),
  amount: z.any().optional(),
  uniqueMarketKey: z.string(),
  onBehalfOf: z.nullable(z.string()).optional(),
  callbackData: z.nullable(b64$.zodOutbound).optional(),
  chain: MorphoRepayRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    uniqueMarketKey: "unique_market_key",
    onBehalfOf: "on_behalf_of",
    callbackData: "callback_data",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MorphoRepayRequest$ {
  /** @deprecated use `MorphoRepayRequest$inboundSchema` instead. */
  export const inboundSchema = MorphoRepayRequest$inboundSchema;
  /** @deprecated use `MorphoRepayRequest$outboundSchema` instead. */
  export const outboundSchema = MorphoRepayRequest$outboundSchema;
  /** @deprecated use `MorphoRepayRequest$Outbound` instead. */
  export type Outbound = MorphoRepayRequest$Outbound;
}

export function morphoRepayRequestToJSON(
  morphoRepayRequest: MorphoRepayRequest,
): string {
  return JSON.stringify(
    MorphoRepayRequest$outboundSchema.parse(morphoRepayRequest),
  );
}

export function morphoRepayRequestFromJSON(
  jsonString: string,
): SafeParseResult<MorphoRepayRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MorphoRepayRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MorphoRepayRequest' from JSON`,
  );
}
