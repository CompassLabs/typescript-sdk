/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type Reserve = {
  /**
   * Symbol of token.
   */
  symbol: string;
  /**
   * Number of decimals of token.
   */
  decimals?: number | null | undefined;
  /**
   * Name of token
   */
  name: string;
  /**
   * Checksum address of Token.
   */
  underlyingAsset: string;
};

/** @internal */
export const Reserve$inboundSchema: z.ZodType<Reserve, z.ZodTypeDef, unknown> =
  z.object({
    symbol: z.string(),
    decimals: z.nullable(z.number().int()).optional(),
    name: z.string(),
    underlyingAsset: z.string(),
  });

/** @internal */
export type Reserve$Outbound = {
  symbol: string;
  decimals?: number | null | undefined;
  name: string;
  underlyingAsset: string;
};

/** @internal */
export const Reserve$outboundSchema: z.ZodType<
  Reserve$Outbound,
  z.ZodTypeDef,
  Reserve
> = z.object({
  symbol: z.string(),
  decimals: z.nullable(z.number().int()).optional(),
  name: z.string(),
  underlyingAsset: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Reserve$ {
  /** @deprecated use `Reserve$inboundSchema` instead. */
  export const inboundSchema = Reserve$inboundSchema;
  /** @deprecated use `Reserve$outboundSchema` instead. */
  export const outboundSchema = Reserve$outboundSchema;
  /** @deprecated use `Reserve$Outbound` instead. */
  export type Outbound = Reserve$Outbound;
}

export function reserveToJSON(reserve: Reserve): string {
  return JSON.stringify(Reserve$outboundSchema.parse(reserve));
}

export function reserveFromJSON(
  jsonString: string,
): SafeParseResult<Reserve, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Reserve$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Reserve' from JSON`,
  );
}
