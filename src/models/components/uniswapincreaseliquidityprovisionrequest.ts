/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * The desired amount of the first token to deposit
 */
export type UniswapIncreaseLiquidityProvisionRequestAmount0Desired =
  | number
  | string;

/**
 * The desired amount of the second token to deposit
 */
export type UniswapIncreaseLiquidityProvisionRequestAmount1Desired =
  | number
  | string;

/**
 * The minimum amount of the first token to deposit
 */
export type UniswapIncreaseLiquidityProvisionRequestAmount0Min =
  | number
  | string;

/**
 * The minimum amount of the second token to deposit
 */
export type UniswapIncreaseLiquidityProvisionRequestAmount1Min =
  | number
  | string;

export const UniswapIncreaseLiquidityProvisionRequestChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type UniswapIncreaseLiquidityProvisionRequestChain = ClosedEnum<
  typeof UniswapIncreaseLiquidityProvisionRequestChain
>;

/**
 * Request model for increasing liquidity provision in Uniswap V3.
 */
export type UniswapIncreaseLiquidityProvisionRequest = {
  actionType?: "UNISWAP_ADD_LIQUIDITY" | undefined;
  /**
   * Token ID of the NFT representing the liquidity provisioned position.
   */
  tokenId: number;
  /**
   * The desired amount of the first token to deposit
   */
  amount0Desired: number | string;
  /**
   * The desired amount of the second token to deposit
   */
  amount1Desired: number | string;
  /**
   * The minimum amount of the first token to deposit
   */
  amount0Min: number | string;
  /**
   * The minimum amount of the second token to deposit
   */
  amount1Min: number | string;
  chain: UniswapIncreaseLiquidityProvisionRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const UniswapIncreaseLiquidityProvisionRequestAmount0Desired$inboundSchema:
  z.ZodType<
    UniswapIncreaseLiquidityProvisionRequestAmount0Desired,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type UniswapIncreaseLiquidityProvisionRequestAmount0Desired$Outbound =
  | number
  | string;

/** @internal */
export const UniswapIncreaseLiquidityProvisionRequestAmount0Desired$outboundSchema:
  z.ZodType<
    UniswapIncreaseLiquidityProvisionRequestAmount0Desired$Outbound,
    z.ZodTypeDef,
    UniswapIncreaseLiquidityProvisionRequestAmount0Desired
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapIncreaseLiquidityProvisionRequestAmount0Desired$ {
  /** @deprecated use `UniswapIncreaseLiquidityProvisionRequestAmount0Desired$inboundSchema` instead. */
  export const inboundSchema =
    UniswapIncreaseLiquidityProvisionRequestAmount0Desired$inboundSchema;
  /** @deprecated use `UniswapIncreaseLiquidityProvisionRequestAmount0Desired$outboundSchema` instead. */
  export const outboundSchema =
    UniswapIncreaseLiquidityProvisionRequestAmount0Desired$outboundSchema;
  /** @deprecated use `UniswapIncreaseLiquidityProvisionRequestAmount0Desired$Outbound` instead. */
  export type Outbound =
    UniswapIncreaseLiquidityProvisionRequestAmount0Desired$Outbound;
}

export function uniswapIncreaseLiquidityProvisionRequestAmount0DesiredToJSON(
  uniswapIncreaseLiquidityProvisionRequestAmount0Desired:
    UniswapIncreaseLiquidityProvisionRequestAmount0Desired,
): string {
  return JSON.stringify(
    UniswapIncreaseLiquidityProvisionRequestAmount0Desired$outboundSchema.parse(
      uniswapIncreaseLiquidityProvisionRequestAmount0Desired,
    ),
  );
}

export function uniswapIncreaseLiquidityProvisionRequestAmount0DesiredFromJSON(
  jsonString: string,
): SafeParseResult<
  UniswapIncreaseLiquidityProvisionRequestAmount0Desired,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UniswapIncreaseLiquidityProvisionRequestAmount0Desired$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UniswapIncreaseLiquidityProvisionRequestAmount0Desired' from JSON`,
  );
}

/** @internal */
export const UniswapIncreaseLiquidityProvisionRequestAmount1Desired$inboundSchema:
  z.ZodType<
    UniswapIncreaseLiquidityProvisionRequestAmount1Desired,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type UniswapIncreaseLiquidityProvisionRequestAmount1Desired$Outbound =
  | number
  | string;

/** @internal */
export const UniswapIncreaseLiquidityProvisionRequestAmount1Desired$outboundSchema:
  z.ZodType<
    UniswapIncreaseLiquidityProvisionRequestAmount1Desired$Outbound,
    z.ZodTypeDef,
    UniswapIncreaseLiquidityProvisionRequestAmount1Desired
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapIncreaseLiquidityProvisionRequestAmount1Desired$ {
  /** @deprecated use `UniswapIncreaseLiquidityProvisionRequestAmount1Desired$inboundSchema` instead. */
  export const inboundSchema =
    UniswapIncreaseLiquidityProvisionRequestAmount1Desired$inboundSchema;
  /** @deprecated use `UniswapIncreaseLiquidityProvisionRequestAmount1Desired$outboundSchema` instead. */
  export const outboundSchema =
    UniswapIncreaseLiquidityProvisionRequestAmount1Desired$outboundSchema;
  /** @deprecated use `UniswapIncreaseLiquidityProvisionRequestAmount1Desired$Outbound` instead. */
  export type Outbound =
    UniswapIncreaseLiquidityProvisionRequestAmount1Desired$Outbound;
}

export function uniswapIncreaseLiquidityProvisionRequestAmount1DesiredToJSON(
  uniswapIncreaseLiquidityProvisionRequestAmount1Desired:
    UniswapIncreaseLiquidityProvisionRequestAmount1Desired,
): string {
  return JSON.stringify(
    UniswapIncreaseLiquidityProvisionRequestAmount1Desired$outboundSchema.parse(
      uniswapIncreaseLiquidityProvisionRequestAmount1Desired,
    ),
  );
}

export function uniswapIncreaseLiquidityProvisionRequestAmount1DesiredFromJSON(
  jsonString: string,
): SafeParseResult<
  UniswapIncreaseLiquidityProvisionRequestAmount1Desired,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UniswapIncreaseLiquidityProvisionRequestAmount1Desired$inboundSchema
        .parse(JSON.parse(x)),
    `Failed to parse 'UniswapIncreaseLiquidityProvisionRequestAmount1Desired' from JSON`,
  );
}

/** @internal */
export const UniswapIncreaseLiquidityProvisionRequestAmount0Min$inboundSchema:
  z.ZodType<
    UniswapIncreaseLiquidityProvisionRequestAmount0Min,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type UniswapIncreaseLiquidityProvisionRequestAmount0Min$Outbound =
  | number
  | string;

/** @internal */
export const UniswapIncreaseLiquidityProvisionRequestAmount0Min$outboundSchema:
  z.ZodType<
    UniswapIncreaseLiquidityProvisionRequestAmount0Min$Outbound,
    z.ZodTypeDef,
    UniswapIncreaseLiquidityProvisionRequestAmount0Min
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapIncreaseLiquidityProvisionRequestAmount0Min$ {
  /** @deprecated use `UniswapIncreaseLiquidityProvisionRequestAmount0Min$inboundSchema` instead. */
  export const inboundSchema =
    UniswapIncreaseLiquidityProvisionRequestAmount0Min$inboundSchema;
  /** @deprecated use `UniswapIncreaseLiquidityProvisionRequestAmount0Min$outboundSchema` instead. */
  export const outboundSchema =
    UniswapIncreaseLiquidityProvisionRequestAmount0Min$outboundSchema;
  /** @deprecated use `UniswapIncreaseLiquidityProvisionRequestAmount0Min$Outbound` instead. */
  export type Outbound =
    UniswapIncreaseLiquidityProvisionRequestAmount0Min$Outbound;
}

export function uniswapIncreaseLiquidityProvisionRequestAmount0MinToJSON(
  uniswapIncreaseLiquidityProvisionRequestAmount0Min:
    UniswapIncreaseLiquidityProvisionRequestAmount0Min,
): string {
  return JSON.stringify(
    UniswapIncreaseLiquidityProvisionRequestAmount0Min$outboundSchema.parse(
      uniswapIncreaseLiquidityProvisionRequestAmount0Min,
    ),
  );
}

export function uniswapIncreaseLiquidityProvisionRequestAmount0MinFromJSON(
  jsonString: string,
): SafeParseResult<
  UniswapIncreaseLiquidityProvisionRequestAmount0Min,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UniswapIncreaseLiquidityProvisionRequestAmount0Min$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UniswapIncreaseLiquidityProvisionRequestAmount0Min' from JSON`,
  );
}

/** @internal */
export const UniswapIncreaseLiquidityProvisionRequestAmount1Min$inboundSchema:
  z.ZodType<
    UniswapIncreaseLiquidityProvisionRequestAmount1Min,
    z.ZodTypeDef,
    unknown
  > = z.union([z.number(), z.string()]);

/** @internal */
export type UniswapIncreaseLiquidityProvisionRequestAmount1Min$Outbound =
  | number
  | string;

/** @internal */
export const UniswapIncreaseLiquidityProvisionRequestAmount1Min$outboundSchema:
  z.ZodType<
    UniswapIncreaseLiquidityProvisionRequestAmount1Min$Outbound,
    z.ZodTypeDef,
    UniswapIncreaseLiquidityProvisionRequestAmount1Min
  > = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapIncreaseLiquidityProvisionRequestAmount1Min$ {
  /** @deprecated use `UniswapIncreaseLiquidityProvisionRequestAmount1Min$inboundSchema` instead. */
  export const inboundSchema =
    UniswapIncreaseLiquidityProvisionRequestAmount1Min$inboundSchema;
  /** @deprecated use `UniswapIncreaseLiquidityProvisionRequestAmount1Min$outboundSchema` instead. */
  export const outboundSchema =
    UniswapIncreaseLiquidityProvisionRequestAmount1Min$outboundSchema;
  /** @deprecated use `UniswapIncreaseLiquidityProvisionRequestAmount1Min$Outbound` instead. */
  export type Outbound =
    UniswapIncreaseLiquidityProvisionRequestAmount1Min$Outbound;
}

export function uniswapIncreaseLiquidityProvisionRequestAmount1MinToJSON(
  uniswapIncreaseLiquidityProvisionRequestAmount1Min:
    UniswapIncreaseLiquidityProvisionRequestAmount1Min,
): string {
  return JSON.stringify(
    UniswapIncreaseLiquidityProvisionRequestAmount1Min$outboundSchema.parse(
      uniswapIncreaseLiquidityProvisionRequestAmount1Min,
    ),
  );
}

export function uniswapIncreaseLiquidityProvisionRequestAmount1MinFromJSON(
  jsonString: string,
): SafeParseResult<
  UniswapIncreaseLiquidityProvisionRequestAmount1Min,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UniswapIncreaseLiquidityProvisionRequestAmount1Min$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UniswapIncreaseLiquidityProvisionRequestAmount1Min' from JSON`,
  );
}

/** @internal */
export const UniswapIncreaseLiquidityProvisionRequestChain$inboundSchema:
  z.ZodNativeEnum<typeof UniswapIncreaseLiquidityProvisionRequestChain> = z
    .nativeEnum(UniswapIncreaseLiquidityProvisionRequestChain);

/** @internal */
export const UniswapIncreaseLiquidityProvisionRequestChain$outboundSchema:
  z.ZodNativeEnum<typeof UniswapIncreaseLiquidityProvisionRequestChain> =
    UniswapIncreaseLiquidityProvisionRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapIncreaseLiquidityProvisionRequestChain$ {
  /** @deprecated use `UniswapIncreaseLiquidityProvisionRequestChain$inboundSchema` instead. */
  export const inboundSchema =
    UniswapIncreaseLiquidityProvisionRequestChain$inboundSchema;
  /** @deprecated use `UniswapIncreaseLiquidityProvisionRequestChain$outboundSchema` instead. */
  export const outboundSchema =
    UniswapIncreaseLiquidityProvisionRequestChain$outboundSchema;
}

/** @internal */
export const UniswapIncreaseLiquidityProvisionRequest$inboundSchema: z.ZodType<
  UniswapIncreaseLiquidityProvisionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("UNISWAP_ADD_LIQUIDITY").default(
    "UNISWAP_ADD_LIQUIDITY",
  ),
  token_id: z.number().int(),
  amount0_desired: z.union([z.number(), z.string()]),
  amount1_desired: z.union([z.number(), z.string()]),
  amount0_min: z.union([z.number(), z.string()]),
  amount1_min: z.union([z.number(), z.string()]),
  chain: UniswapIncreaseLiquidityProvisionRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "token_id": "tokenId",
    "amount0_desired": "amount0Desired",
    "amount1_desired": "amount1Desired",
    "amount0_min": "amount0Min",
    "amount1_min": "amount1Min",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type UniswapIncreaseLiquidityProvisionRequest$Outbound = {
  action_type: "UNISWAP_ADD_LIQUIDITY";
  token_id: number;
  amount0_desired: number | string;
  amount1_desired: number | string;
  amount0_min: number | string;
  amount1_min: number | string;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const UniswapIncreaseLiquidityProvisionRequest$outboundSchema: z.ZodType<
  UniswapIncreaseLiquidityProvisionRequest$Outbound,
  z.ZodTypeDef,
  UniswapIncreaseLiquidityProvisionRequest
> = z.object({
  actionType: z.literal("UNISWAP_ADD_LIQUIDITY").default(
    "UNISWAP_ADD_LIQUIDITY" as const,
  ),
  tokenId: z.number().int(),
  amount0Desired: z.union([z.number(), z.string()]),
  amount1Desired: z.union([z.number(), z.string()]),
  amount0Min: z.union([z.number(), z.string()]),
  amount1Min: z.union([z.number(), z.string()]),
  chain: UniswapIncreaseLiquidityProvisionRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    tokenId: "token_id",
    amount0Desired: "amount0_desired",
    amount1Desired: "amount1_desired",
    amount0Min: "amount0_min",
    amount1Min: "amount1_min",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UniswapIncreaseLiquidityProvisionRequest$ {
  /** @deprecated use `UniswapIncreaseLiquidityProvisionRequest$inboundSchema` instead. */
  export const inboundSchema =
    UniswapIncreaseLiquidityProvisionRequest$inboundSchema;
  /** @deprecated use `UniswapIncreaseLiquidityProvisionRequest$outboundSchema` instead. */
  export const outboundSchema =
    UniswapIncreaseLiquidityProvisionRequest$outboundSchema;
  /** @deprecated use `UniswapIncreaseLiquidityProvisionRequest$Outbound` instead. */
  export type Outbound = UniswapIncreaseLiquidityProvisionRequest$Outbound;
}

export function uniswapIncreaseLiquidityProvisionRequestToJSON(
  uniswapIncreaseLiquidityProvisionRequest:
    UniswapIncreaseLiquidityProvisionRequest,
): string {
  return JSON.stringify(
    UniswapIncreaseLiquidityProvisionRequest$outboundSchema.parse(
      uniswapIncreaseLiquidityProvisionRequest,
    ),
  );
}

export function uniswapIncreaseLiquidityProvisionRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  UniswapIncreaseLiquidityProvisionRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      UniswapIncreaseLiquidityProvisionRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'UniswapIncreaseLiquidityProvisionRequest' from JSON`,
  );
}
