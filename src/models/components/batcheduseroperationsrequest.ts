/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  UserOperation,
  UserOperation$inboundSchema,
  UserOperation$Outbound,
  UserOperation$outboundSchema,
} from "./useroperation.js";

export const BatchedUserOperationsRequestChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type BatchedUserOperationsRequestChain = ClosedEnum<
  typeof BatchedUserOperationsRequestChain
>;

/**
 * Request model for batching user operations.
 *
 * @remarks
 *
 * Used for smart account batching and 5792 batching.
 */
export type BatchedUserOperationsRequest = {
  chain: BatchedUserOperationsRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
  /**
   * List of possible user operations
   */
  operations: Array<UserOperation>;
};

/** @internal */
export const BatchedUserOperationsRequestChain$inboundSchema: z.ZodNativeEnum<
  typeof BatchedUserOperationsRequestChain
> = z.nativeEnum(BatchedUserOperationsRequestChain);

/** @internal */
export const BatchedUserOperationsRequestChain$outboundSchema: z.ZodNativeEnum<
  typeof BatchedUserOperationsRequestChain
> = BatchedUserOperationsRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchedUserOperationsRequestChain$ {
  /** @deprecated use `BatchedUserOperationsRequestChain$inboundSchema` instead. */
  export const inboundSchema = BatchedUserOperationsRequestChain$inboundSchema;
  /** @deprecated use `BatchedUserOperationsRequestChain$outboundSchema` instead. */
  export const outboundSchema =
    BatchedUserOperationsRequestChain$outboundSchema;
}

/** @internal */
export const BatchedUserOperationsRequest$inboundSchema: z.ZodType<
  BatchedUserOperationsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chain: BatchedUserOperationsRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
  operations: z.array(UserOperation$inboundSchema),
}).transform((v) => {
  return remap$(v, {
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type BatchedUserOperationsRequest$Outbound = {
  chain: string;
  sender: string;
  estimate_gas: boolean;
  operations: Array<UserOperation$Outbound>;
};

/** @internal */
export const BatchedUserOperationsRequest$outboundSchema: z.ZodType<
  BatchedUserOperationsRequest$Outbound,
  z.ZodTypeDef,
  BatchedUserOperationsRequest
> = z.object({
  chain: BatchedUserOperationsRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
  operations: z.array(UserOperation$outboundSchema),
}).transform((v) => {
  return remap$(v, {
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace BatchedUserOperationsRequest$ {
  /** @deprecated use `BatchedUserOperationsRequest$inboundSchema` instead. */
  export const inboundSchema = BatchedUserOperationsRequest$inboundSchema;
  /** @deprecated use `BatchedUserOperationsRequest$outboundSchema` instead. */
  export const outboundSchema = BatchedUserOperationsRequest$outboundSchema;
  /** @deprecated use `BatchedUserOperationsRequest$Outbound` instead. */
  export type Outbound = BatchedUserOperationsRequest$Outbound;
}

export function batchedUserOperationsRequestToJSON(
  batchedUserOperationsRequest: BatchedUserOperationsRequest,
): string {
  return JSON.stringify(
    BatchedUserOperationsRequest$outboundSchema.parse(
      batchedUserOperationsRequest,
    ),
  );
}

export function batchedUserOperationsRequestFromJSON(
  jsonString: string,
): SafeParseResult<BatchedUserOperationsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => BatchedUserOperationsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'BatchedUserOperationsRequest' from JSON`,
  );
}
