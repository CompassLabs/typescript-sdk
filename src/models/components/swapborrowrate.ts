/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import {
  Reserve,
  Reserve$inboundSchema,
  Reserve$Outbound,
  Reserve$outboundSchema,
} from "./reserve.js";

export type SwapBorrowRate = {
  /**
   * The id of a historical transaction on aave
   */
  id: string;
  /**
   * Timestamp in unix time
   */
  timestamp: number;
  /**
   * Transaction hash. You can paste these into the search bar on etherscan
   */
  txHash: string;
  borrowRateModeFrom: number;
  borrowRateModeTo: number;
  variableBorrowRate: number;
  stableBorrowRate: number;
  reserve: Reserve;
  action?: "SwapBorrowRate" | undefined;
  block: number;
};

/** @internal */
export const SwapBorrowRate$inboundSchema: z.ZodType<
  SwapBorrowRate,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string(),
  timestamp: z.number().int(),
  txHash: z.string(),
  borrowRateModeFrom: z.number().int(),
  borrowRateModeTo: z.number().int(),
  variableBorrowRate: z.number().int(),
  stableBorrowRate: z.number().int(),
  reserve: Reserve$inboundSchema,
  action: z.literal("SwapBorrowRate").default("SwapBorrowRate").optional(),
  block: z.number().int(),
});

/** @internal */
export type SwapBorrowRate$Outbound = {
  id: string;
  timestamp: number;
  txHash: string;
  borrowRateModeFrom: number;
  borrowRateModeTo: number;
  variableBorrowRate: number;
  stableBorrowRate: number;
  reserve: Reserve$Outbound;
  action: "SwapBorrowRate";
  block: number;
};

/** @internal */
export const SwapBorrowRate$outboundSchema: z.ZodType<
  SwapBorrowRate$Outbound,
  z.ZodTypeDef,
  SwapBorrowRate
> = z.object({
  id: z.string(),
  timestamp: z.number().int(),
  txHash: z.string(),
  borrowRateModeFrom: z.number().int(),
  borrowRateModeTo: z.number().int(),
  variableBorrowRate: z.number().int(),
  stableBorrowRate: z.number().int(),
  reserve: Reserve$outboundSchema,
  action: z.literal("SwapBorrowRate").default("SwapBorrowRate" as const),
  block: z.number().int(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace SwapBorrowRate$ {
  /** @deprecated use `SwapBorrowRate$inboundSchema` instead. */
  export const inboundSchema = SwapBorrowRate$inboundSchema;
  /** @deprecated use `SwapBorrowRate$outboundSchema` instead. */
  export const outboundSchema = SwapBorrowRate$outboundSchema;
  /** @deprecated use `SwapBorrowRate$Outbound` instead. */
  export type Outbound = SwapBorrowRate$Outbound;
}

export function swapBorrowRateToJSON(swapBorrowRate: SwapBorrowRate): string {
  return JSON.stringify(SwapBorrowRate$outboundSchema.parse(swapBorrowRate));
}

export function swapBorrowRateFromJSON(
  jsonString: string,
): SafeParseResult<SwapBorrowRate, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => SwapBorrowRate$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'SwapBorrowRate' from JSON`,
  );
}
