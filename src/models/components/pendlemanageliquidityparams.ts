/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

/**
 * Specifies the direction of the liquidity operation for the Pendle market. Valid values are `SUPPLY` (to add liquidity) or `WITHDRAW` (to remove liquidity).
 */
export const PendleManageLiquidityParamsAction = {
  Supply: "SUPPLY",
  Withdraw: "WITHDRAW",
} as const;
/**
 * Specifies the direction of the liquidity operation for the Pendle market. Valid values are `SUPPLY` (to add liquidity) or `WITHDRAW` (to remove liquidity).
 */
export type PendleManageLiquidityParamsAction = ClosedEnum<
  typeof PendleManageLiquidityParamsAction
>;

/**
 * For `action` set to `SUPPLY`, this is the amount in of `token` to add as liquidity in exchange for Liquidity Provider (LP) tokens. For `action` set to `WITHDRAW`, this is the amount in of LP tokens to redeem for `token`.
 */
export type PendleManageLiquidityParamsAmountIn = number | string;

export type PendleManageLiquidityParams = {
  actionType?: "PENDLE_MANAGE_LIQUIDITY" | undefined;
  /**
   * The address identifying which Pendle Market you would like to add liquidity to.
   */
  marketAddress: string;
  /**
   * Specifies the direction of the liquidity operation for the Pendle market. Valid values are `SUPPLY` (to add liquidity) or `WITHDRAW` (to remove liquidity).
   */
  action: PendleManageLiquidityParamsAction;
  /**
   * The symbol or address of the token to manage liquidity with. For `action` set to `SUPPLY`, this is the token to add as liquidity. For `action` set to `WITHDRAW`, this is the token to remove from liquidity.
   */
  token: string;
  /**
   * For `action` set to `SUPPLY`, this is the amount in of `token` to add as liquidity in exchange for Liquidity Provider (LP) tokens. For `action` set to `WITHDRAW`, this is the amount in of LP tokens to redeem for `token`.
   */
  amountIn: number | string;
  /**
   * The maximum slippage allowed in percent. e.g. `1` means `1%` slippage allowed.
   */
  maxSlippagePercent: number;
};

/** @internal */
export const PendleManageLiquidityParamsAction$inboundSchema: z.ZodNativeEnum<
  typeof PendleManageLiquidityParamsAction
> = z.nativeEnum(PendleManageLiquidityParamsAction);

/** @internal */
export const PendleManageLiquidityParamsAction$outboundSchema: z.ZodNativeEnum<
  typeof PendleManageLiquidityParamsAction
> = PendleManageLiquidityParamsAction$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendleManageLiquidityParamsAction$ {
  /** @deprecated use `PendleManageLiquidityParamsAction$inboundSchema` instead. */
  export const inboundSchema = PendleManageLiquidityParamsAction$inboundSchema;
  /** @deprecated use `PendleManageLiquidityParamsAction$outboundSchema` instead. */
  export const outboundSchema =
    PendleManageLiquidityParamsAction$outboundSchema;
}

/** @internal */
export const PendleManageLiquidityParamsAmountIn$inboundSchema: z.ZodType<
  PendleManageLiquidityParamsAmountIn,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type PendleManageLiquidityParamsAmountIn$Outbound = number | string;

/** @internal */
export const PendleManageLiquidityParamsAmountIn$outboundSchema: z.ZodType<
  PendleManageLiquidityParamsAmountIn$Outbound,
  z.ZodTypeDef,
  PendleManageLiquidityParamsAmountIn
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendleManageLiquidityParamsAmountIn$ {
  /** @deprecated use `PendleManageLiquidityParamsAmountIn$inboundSchema` instead. */
  export const inboundSchema =
    PendleManageLiquidityParamsAmountIn$inboundSchema;
  /** @deprecated use `PendleManageLiquidityParamsAmountIn$outboundSchema` instead. */
  export const outboundSchema =
    PendleManageLiquidityParamsAmountIn$outboundSchema;
  /** @deprecated use `PendleManageLiquidityParamsAmountIn$Outbound` instead. */
  export type Outbound = PendleManageLiquidityParamsAmountIn$Outbound;
}

export function pendleManageLiquidityParamsAmountInToJSON(
  pendleManageLiquidityParamsAmountIn: PendleManageLiquidityParamsAmountIn,
): string {
  return JSON.stringify(
    PendleManageLiquidityParamsAmountIn$outboundSchema.parse(
      pendleManageLiquidityParamsAmountIn,
    ),
  );
}

export function pendleManageLiquidityParamsAmountInFromJSON(
  jsonString: string,
): SafeParseResult<PendleManageLiquidityParamsAmountIn, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      PendleManageLiquidityParamsAmountIn$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendleManageLiquidityParamsAmountIn' from JSON`,
  );
}

/** @internal */
export const PendleManageLiquidityParams$inboundSchema: z.ZodType<
  PendleManageLiquidityParams,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("PENDLE_MANAGE_LIQUIDITY").default(
    "PENDLE_MANAGE_LIQUIDITY",
  ),
  market_address: z.string(),
  action: PendleManageLiquidityParamsAction$inboundSchema,
  token: z.string(),
  amount_in: z.union([z.number(), z.string()]),
  max_slippage_percent: z.number(),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "market_address": "marketAddress",
    "amount_in": "amountIn",
    "max_slippage_percent": "maxSlippagePercent",
  });
});

/** @internal */
export type PendleManageLiquidityParams$Outbound = {
  action_type: "PENDLE_MANAGE_LIQUIDITY";
  market_address: string;
  action: string;
  token: string;
  amount_in: number | string;
  max_slippage_percent: number;
};

/** @internal */
export const PendleManageLiquidityParams$outboundSchema: z.ZodType<
  PendleManageLiquidityParams$Outbound,
  z.ZodTypeDef,
  PendleManageLiquidityParams
> = z.object({
  actionType: z.literal("PENDLE_MANAGE_LIQUIDITY").default(
    "PENDLE_MANAGE_LIQUIDITY" as const,
  ),
  marketAddress: z.string(),
  action: PendleManageLiquidityParamsAction$outboundSchema,
  token: z.string(),
  amountIn: z.union([z.number(), z.string()]),
  maxSlippagePercent: z.number(),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    marketAddress: "market_address",
    amountIn: "amount_in",
    maxSlippagePercent: "max_slippage_percent",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PendleManageLiquidityParams$ {
  /** @deprecated use `PendleManageLiquidityParams$inboundSchema` instead. */
  export const inboundSchema = PendleManageLiquidityParams$inboundSchema;
  /** @deprecated use `PendleManageLiquidityParams$outboundSchema` instead. */
  export const outboundSchema = PendleManageLiquidityParams$outboundSchema;
  /** @deprecated use `PendleManageLiquidityParams$Outbound` instead. */
  export type Outbound = PendleManageLiquidityParams$Outbound;
}

export function pendleManageLiquidityParamsToJSON(
  pendleManageLiquidityParams: PendleManageLiquidityParams,
): string {
  return JSON.stringify(
    PendleManageLiquidityParams$outboundSchema.parse(
      pendleManageLiquidityParams,
    ),
  );
}

export function pendleManageLiquidityParamsFromJSON(
  jsonString: string,
): SafeParseResult<PendleManageLiquidityParams, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PendleManageLiquidityParams$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PendleManageLiquidityParams' from JSON`,
  );
}
