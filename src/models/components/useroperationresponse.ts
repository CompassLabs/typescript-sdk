/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export type UserOperationResponse = {
  /**
   * The target contract address for the operation
   */
  to: string;
  /**
   * The calldata for the operation
   */
  data: string;
  /**
   * The ETH value to send with the operation
   */
  value: string;
};

/** @internal */
export const UserOperationResponse$inboundSchema: z.ZodType<
  UserOperationResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  to: z.string(),
  data: z.string(),
  value: z.string(),
});

/** @internal */
export type UserOperationResponse$Outbound = {
  to: string;
  data: string;
  value: string;
};

/** @internal */
export const UserOperationResponse$outboundSchema: z.ZodType<
  UserOperationResponse$Outbound,
  z.ZodTypeDef,
  UserOperationResponse
> = z.object({
  to: z.string(),
  data: z.string(),
  value: z.string(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace UserOperationResponse$ {
  /** @deprecated use `UserOperationResponse$inboundSchema` instead. */
  export const inboundSchema = UserOperationResponse$inboundSchema;
  /** @deprecated use `UserOperationResponse$outboundSchema` instead. */
  export const outboundSchema = UserOperationResponse$outboundSchema;
  /** @deprecated use `UserOperationResponse$Outbound` instead. */
  export type Outbound = UserOperationResponse$Outbound;
}

export function userOperationResponseToJSON(
  userOperationResponse: UserOperationResponse,
): string {
  return JSON.stringify(
    UserOperationResponse$outboundSchema.parse(userOperationResponse),
  );
}

export function userOperationResponseFromJSON(
  jsonString: string,
): SafeParseResult<UserOperationResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => UserOperationResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'UserOperationResponse' from JSON`,
  );
}
