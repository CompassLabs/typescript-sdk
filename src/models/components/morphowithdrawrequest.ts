/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const MorphoWithdrawRequestChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type MorphoWithdrawRequestChain = ClosedEnum<
  typeof MorphoWithdrawRequestChain
>;

export type MorphoWithdrawRequest = {
  actionType?: "MORPHO_WITHDRAW" | undefined;
  /**
   * The vault address you are withdrawing from.
   */
  vaultAddress: string;
  /**
   * The amount of tokens to withdraw from the vault. If set to 'ALL', your total deposited token amount will be withdrawn.
   */
  amount?: any | undefined;
  /**
   * The address which will receive the tokens withdrawn. Defaults to the sender.
   */
  receiver?: string | null | undefined;
  chain: MorphoWithdrawRequestChain;
  /**
   * The address of the transaction sender.
   */
  sender: string;
  /**
   * Determines whether to estimate gas costs for transactions, also verifying that the transaction can be successfully executed.
   */
  estimateGas?: boolean | undefined;
};

/** @internal */
export const MorphoWithdrawRequestChain$inboundSchema: z.ZodNativeEnum<
  typeof MorphoWithdrawRequestChain
> = z.nativeEnum(MorphoWithdrawRequestChain);

/** @internal */
export const MorphoWithdrawRequestChain$outboundSchema: z.ZodNativeEnum<
  typeof MorphoWithdrawRequestChain
> = MorphoWithdrawRequestChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MorphoWithdrawRequestChain$ {
  /** @deprecated use `MorphoWithdrawRequestChain$inboundSchema` instead. */
  export const inboundSchema = MorphoWithdrawRequestChain$inboundSchema;
  /** @deprecated use `MorphoWithdrawRequestChain$outboundSchema` instead. */
  export const outboundSchema = MorphoWithdrawRequestChain$outboundSchema;
}

/** @internal */
export const MorphoWithdrawRequest$inboundSchema: z.ZodType<
  MorphoWithdrawRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  action_type: z.literal("MORPHO_WITHDRAW").default("MORPHO_WITHDRAW"),
  vault_address: z.string(),
  amount: z.any().optional(),
  receiver: z.nullable(z.string()).optional(),
  chain: MorphoWithdrawRequestChain$inboundSchema,
  sender: z.string(),
  estimate_gas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    "action_type": "actionType",
    "vault_address": "vaultAddress",
    "estimate_gas": "estimateGas",
  });
});

/** @internal */
export type MorphoWithdrawRequest$Outbound = {
  action_type: "MORPHO_WITHDRAW";
  vault_address: string;
  amount?: any | undefined;
  receiver?: string | null | undefined;
  chain: string;
  sender: string;
  estimate_gas: boolean;
};

/** @internal */
export const MorphoWithdrawRequest$outboundSchema: z.ZodType<
  MorphoWithdrawRequest$Outbound,
  z.ZodTypeDef,
  MorphoWithdrawRequest
> = z.object({
  actionType: z.literal("MORPHO_WITHDRAW").default("MORPHO_WITHDRAW" as const),
  vaultAddress: z.string(),
  amount: z.any().optional(),
  receiver: z.nullable(z.string()).optional(),
  chain: MorphoWithdrawRequestChain$outboundSchema,
  sender: z.string(),
  estimateGas: z.boolean().default(true),
}).transform((v) => {
  return remap$(v, {
    actionType: "action_type",
    vaultAddress: "vault_address",
    estimateGas: "estimate_gas",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace MorphoWithdrawRequest$ {
  /** @deprecated use `MorphoWithdrawRequest$inboundSchema` instead. */
  export const inboundSchema = MorphoWithdrawRequest$inboundSchema;
  /** @deprecated use `MorphoWithdrawRequest$outboundSchema` instead. */
  export const outboundSchema = MorphoWithdrawRequest$outboundSchema;
  /** @deprecated use `MorphoWithdrawRequest$Outbound` instead. */
  export type Outbound = MorphoWithdrawRequest$Outbound;
}

export function morphoWithdrawRequestToJSON(
  morphoWithdrawRequest: MorphoWithdrawRequest,
): string {
  return JSON.stringify(
    MorphoWithdrawRequest$outboundSchema.parse(morphoWithdrawRequest),
  );
}

export function morphoWithdrawRequestFromJSON(
  jsonString: string,
): SafeParseResult<MorphoWithdrawRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => MorphoWithdrawRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'MorphoWithdrawRequest' from JSON`,
  );
}
