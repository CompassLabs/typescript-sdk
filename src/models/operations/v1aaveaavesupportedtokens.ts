/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const V1AaveAaveSupportedTokensChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type V1AaveAaveSupportedTokensChain = ClosedEnum<
  typeof V1AaveAaveSupportedTokensChain
>;

export type V1AaveAaveSupportedTokensRequest = {
  chain?: V1AaveAaveSupportedTokensChain | undefined;
  /**
   * Optional block number (defaults to latest).
   */
  block?: number | null | undefined;
};

/** @internal */
export const V1AaveAaveSupportedTokensChain$inboundSchema: z.ZodNativeEnum<
  typeof V1AaveAaveSupportedTokensChain
> = z.nativeEnum(V1AaveAaveSupportedTokensChain);

/** @internal */
export const V1AaveAaveSupportedTokensChain$outboundSchema: z.ZodNativeEnum<
  typeof V1AaveAaveSupportedTokensChain
> = V1AaveAaveSupportedTokensChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AaveAaveSupportedTokensChain$ {
  /** @deprecated use `V1AaveAaveSupportedTokensChain$inboundSchema` instead. */
  export const inboundSchema = V1AaveAaveSupportedTokensChain$inboundSchema;
  /** @deprecated use `V1AaveAaveSupportedTokensChain$outboundSchema` instead. */
  export const outboundSchema = V1AaveAaveSupportedTokensChain$outboundSchema;
}

/** @internal */
export const V1AaveAaveSupportedTokensRequest$inboundSchema: z.ZodType<
  V1AaveAaveSupportedTokensRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chain: V1AaveAaveSupportedTokensChain$inboundSchema.default("arbitrum"),
  block: z.nullable(z.number().int()).optional(),
});

/** @internal */
export type V1AaveAaveSupportedTokensRequest$Outbound = {
  chain: string;
  block?: number | null | undefined;
};

/** @internal */
export const V1AaveAaveSupportedTokensRequest$outboundSchema: z.ZodType<
  V1AaveAaveSupportedTokensRequest$Outbound,
  z.ZodTypeDef,
  V1AaveAaveSupportedTokensRequest
> = z.object({
  chain: V1AaveAaveSupportedTokensChain$outboundSchema.default("arbitrum"),
  block: z.nullable(z.number().int()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AaveAaveSupportedTokensRequest$ {
  /** @deprecated use `V1AaveAaveSupportedTokensRequest$inboundSchema` instead. */
  export const inboundSchema = V1AaveAaveSupportedTokensRequest$inboundSchema;
  /** @deprecated use `V1AaveAaveSupportedTokensRequest$outboundSchema` instead. */
  export const outboundSchema = V1AaveAaveSupportedTokensRequest$outboundSchema;
  /** @deprecated use `V1AaveAaveSupportedTokensRequest$Outbound` instead. */
  export type Outbound = V1AaveAaveSupportedTokensRequest$Outbound;
}

export function v1AaveAaveSupportedTokensRequestToJSON(
  v1AaveAaveSupportedTokensRequest: V1AaveAaveSupportedTokensRequest,
): string {
  return JSON.stringify(
    V1AaveAaveSupportedTokensRequest$outboundSchema.parse(
      v1AaveAaveSupportedTokensRequest,
    ),
  );
}

export function v1AaveAaveSupportedTokensRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1AaveAaveSupportedTokensRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1AaveAaveSupportedTokensRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AaveAaveSupportedTokensRequest' from JSON`,
  );
}
