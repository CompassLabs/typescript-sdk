/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const V1UniswapLiquidityProvisionInRangeChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type V1UniswapLiquidityProvisionInRangeChain = ClosedEnum<
  typeof V1UniswapLiquidityProvisionInRangeChain
>;

export type V1UniswapLiquidityProvisionInRangeRequest = {
  chain?: V1UniswapLiquidityProvisionInRangeChain | undefined;
  /**
   * Token ID of the NFT representing the liquidity provisioned position.
   */
  tokenId?: number | undefined;
};

/** @internal */
export const V1UniswapLiquidityProvisionInRangeChain$inboundSchema:
  z.ZodNativeEnum<typeof V1UniswapLiquidityProvisionInRangeChain> = z
    .nativeEnum(V1UniswapLiquidityProvisionInRangeChain);

/** @internal */
export const V1UniswapLiquidityProvisionInRangeChain$outboundSchema:
  z.ZodNativeEnum<typeof V1UniswapLiquidityProvisionInRangeChain> =
    V1UniswapLiquidityProvisionInRangeChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1UniswapLiquidityProvisionInRangeChain$ {
  /** @deprecated use `V1UniswapLiquidityProvisionInRangeChain$inboundSchema` instead. */
  export const inboundSchema =
    V1UniswapLiquidityProvisionInRangeChain$inboundSchema;
  /** @deprecated use `V1UniswapLiquidityProvisionInRangeChain$outboundSchema` instead. */
  export const outboundSchema =
    V1UniswapLiquidityProvisionInRangeChain$outboundSchema;
}

/** @internal */
export const V1UniswapLiquidityProvisionInRangeRequest$inboundSchema: z.ZodType<
  V1UniswapLiquidityProvisionInRangeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chain: V1UniswapLiquidityProvisionInRangeChain$inboundSchema.default(
    "arbitrum",
  ),
  token_id: z.number().int().default(4318185),
}).transform((v) => {
  return remap$(v, {
    "token_id": "tokenId",
  });
});

/** @internal */
export type V1UniswapLiquidityProvisionInRangeRequest$Outbound = {
  chain: string;
  token_id: number;
};

/** @internal */
export const V1UniswapLiquidityProvisionInRangeRequest$outboundSchema:
  z.ZodType<
    V1UniswapLiquidityProvisionInRangeRequest$Outbound,
    z.ZodTypeDef,
    V1UniswapLiquidityProvisionInRangeRequest
  > = z.object({
    chain: V1UniswapLiquidityProvisionInRangeChain$outboundSchema.default(
      "arbitrum",
    ),
    tokenId: z.number().int().default(4318185),
  }).transform((v) => {
    return remap$(v, {
      tokenId: "token_id",
    });
  });

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1UniswapLiquidityProvisionInRangeRequest$ {
  /** @deprecated use `V1UniswapLiquidityProvisionInRangeRequest$inboundSchema` instead. */
  export const inboundSchema =
    V1UniswapLiquidityProvisionInRangeRequest$inboundSchema;
  /** @deprecated use `V1UniswapLiquidityProvisionInRangeRequest$outboundSchema` instead. */
  export const outboundSchema =
    V1UniswapLiquidityProvisionInRangeRequest$outboundSchema;
  /** @deprecated use `V1UniswapLiquidityProvisionInRangeRequest$Outbound` instead. */
  export type Outbound = V1UniswapLiquidityProvisionInRangeRequest$Outbound;
}

export function v1UniswapLiquidityProvisionInRangeRequestToJSON(
  v1UniswapLiquidityProvisionInRangeRequest:
    V1UniswapLiquidityProvisionInRangeRequest,
): string {
  return JSON.stringify(
    V1UniswapLiquidityProvisionInRangeRequest$outboundSchema.parse(
      v1UniswapLiquidityProvisionInRangeRequest,
    ),
  );
}

export function v1UniswapLiquidityProvisionInRangeRequestFromJSON(
  jsonString: string,
): SafeParseResult<
  V1UniswapLiquidityProvisionInRangeRequest,
  SDKValidationError
> {
  return safeParse(
    jsonString,
    (x) =>
      V1UniswapLiquidityProvisionInRangeRequest$inboundSchema.parse(
        JSON.parse(x),
      ),
    `Failed to parse 'V1UniswapLiquidityProvisionInRangeRequest' from JSON`,
  );
}
