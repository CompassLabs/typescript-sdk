/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const V1AerodromeSlipstreamPoolPriceChain = {
  Base: "base",
} as const;
export type V1AerodromeSlipstreamPoolPriceChain = ClosedEnum<
  typeof V1AerodromeSlipstreamPoolPriceChain
>;

export type V1AerodromeSlipstreamPoolPriceRequest = {
  chain?: V1AerodromeSlipstreamPoolPriceChain | undefined;
  /**
   * The symbol or address of a token in the pool.
   */
  tokenIn?: string | undefined;
  /**
   * The symbol or address of a token in the pool.
   */
  tokenOut?: string | undefined;
  /**
   * The tick spacing of the pool
   */
  tickSpacing?: number | undefined;
};

/** @internal */
export const V1AerodromeSlipstreamPoolPriceChain$inboundSchema: z.ZodNativeEnum<
  typeof V1AerodromeSlipstreamPoolPriceChain
> = z.nativeEnum(V1AerodromeSlipstreamPoolPriceChain);

/** @internal */
export const V1AerodromeSlipstreamPoolPriceChain$outboundSchema:
  z.ZodNativeEnum<typeof V1AerodromeSlipstreamPoolPriceChain> =
    V1AerodromeSlipstreamPoolPriceChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AerodromeSlipstreamPoolPriceChain$ {
  /** @deprecated use `V1AerodromeSlipstreamPoolPriceChain$inboundSchema` instead. */
  export const inboundSchema =
    V1AerodromeSlipstreamPoolPriceChain$inboundSchema;
  /** @deprecated use `V1AerodromeSlipstreamPoolPriceChain$outboundSchema` instead. */
  export const outboundSchema =
    V1AerodromeSlipstreamPoolPriceChain$outboundSchema;
}

/** @internal */
export const V1AerodromeSlipstreamPoolPriceRequest$inboundSchema: z.ZodType<
  V1AerodromeSlipstreamPoolPriceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chain: V1AerodromeSlipstreamPoolPriceChain$inboundSchema.default("base"),
  token_in: z.string().default("USDC"),
  token_out: z.string().default("WETH"),
  tick_spacing: z.number().int().default(100),
}).transform((v) => {
  return remap$(v, {
    "token_in": "tokenIn",
    "token_out": "tokenOut",
    "tick_spacing": "tickSpacing",
  });
});

/** @internal */
export type V1AerodromeSlipstreamPoolPriceRequest$Outbound = {
  chain: string;
  token_in: string;
  token_out: string;
  tick_spacing: number;
};

/** @internal */
export const V1AerodromeSlipstreamPoolPriceRequest$outboundSchema: z.ZodType<
  V1AerodromeSlipstreamPoolPriceRequest$Outbound,
  z.ZodTypeDef,
  V1AerodromeSlipstreamPoolPriceRequest
> = z.object({
  chain: V1AerodromeSlipstreamPoolPriceChain$outboundSchema.default("base"),
  tokenIn: z.string().default("USDC"),
  tokenOut: z.string().default("WETH"),
  tickSpacing: z.number().int().default(100),
}).transform((v) => {
  return remap$(v, {
    tokenIn: "token_in",
    tokenOut: "token_out",
    tickSpacing: "tick_spacing",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AerodromeSlipstreamPoolPriceRequest$ {
  /** @deprecated use `V1AerodromeSlipstreamPoolPriceRequest$inboundSchema` instead. */
  export const inboundSchema =
    V1AerodromeSlipstreamPoolPriceRequest$inboundSchema;
  /** @deprecated use `V1AerodromeSlipstreamPoolPriceRequest$outboundSchema` instead. */
  export const outboundSchema =
    V1AerodromeSlipstreamPoolPriceRequest$outboundSchema;
  /** @deprecated use `V1AerodromeSlipstreamPoolPriceRequest$Outbound` instead. */
  export type Outbound = V1AerodromeSlipstreamPoolPriceRequest$Outbound;
}

export function v1AerodromeSlipstreamPoolPriceRequestToJSON(
  v1AerodromeSlipstreamPoolPriceRequest: V1AerodromeSlipstreamPoolPriceRequest,
): string {
  return JSON.stringify(
    V1AerodromeSlipstreamPoolPriceRequest$outboundSchema.parse(
      v1AerodromeSlipstreamPoolPriceRequest,
    ),
  );
}

export function v1AerodromeSlipstreamPoolPriceRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1AerodromeSlipstreamPoolPriceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V1AerodromeSlipstreamPoolPriceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AerodromeSlipstreamPoolPriceRequest' from JSON`,
  );
}
