/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const V1UniswapPoolPriceChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type V1UniswapPoolPriceChain = ClosedEnum<
  typeof V1UniswapPoolPriceChain
>;

/**
 * The transaction fee of a Uniswap pool in bips.
 *
 * @remarks
 *
 * Uniswap supports 4 different fee levels.
 */
export const V1UniswapPoolPriceFeeEnum = {
  ZeroDot01: "0.01",
  ZeroDot05: "0.05",
  ZeroDot3: "0.3",
  OneDot0: "1.0",
} as const;
/**
 * The transaction fee of a Uniswap pool in bips.
 *
 * @remarks
 *
 * Uniswap supports 4 different fee levels.
 */
export type V1UniswapPoolPriceFeeEnum = ClosedEnum<
  typeof V1UniswapPoolPriceFeeEnum
>;

export type V1UniswapPoolPriceRequest = {
  chain?: V1UniswapPoolPriceChain | undefined;
  /**
   * The symbol or address of a token in the pool
   */
  tokenIn?: string | undefined;
  /**
   * The symbol or address of a token in the pool
   */
  tokenOut?: string | undefined;
  /**
   * The fee of the pool
   */
  fee?: V1UniswapPoolPriceFeeEnum | undefined;
};

/** @internal */
export const V1UniswapPoolPriceChain$inboundSchema: z.ZodNativeEnum<
  typeof V1UniswapPoolPriceChain
> = z.nativeEnum(V1UniswapPoolPriceChain);

/** @internal */
export const V1UniswapPoolPriceChain$outboundSchema: z.ZodNativeEnum<
  typeof V1UniswapPoolPriceChain
> = V1UniswapPoolPriceChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1UniswapPoolPriceChain$ {
  /** @deprecated use `V1UniswapPoolPriceChain$inboundSchema` instead. */
  export const inboundSchema = V1UniswapPoolPriceChain$inboundSchema;
  /** @deprecated use `V1UniswapPoolPriceChain$outboundSchema` instead. */
  export const outboundSchema = V1UniswapPoolPriceChain$outboundSchema;
}

/** @internal */
export const V1UniswapPoolPriceFeeEnum$inboundSchema: z.ZodNativeEnum<
  typeof V1UniswapPoolPriceFeeEnum
> = z.nativeEnum(V1UniswapPoolPriceFeeEnum);

/** @internal */
export const V1UniswapPoolPriceFeeEnum$outboundSchema: z.ZodNativeEnum<
  typeof V1UniswapPoolPriceFeeEnum
> = V1UniswapPoolPriceFeeEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1UniswapPoolPriceFeeEnum$ {
  /** @deprecated use `V1UniswapPoolPriceFeeEnum$inboundSchema` instead. */
  export const inboundSchema = V1UniswapPoolPriceFeeEnum$inboundSchema;
  /** @deprecated use `V1UniswapPoolPriceFeeEnum$outboundSchema` instead. */
  export const outboundSchema = V1UniswapPoolPriceFeeEnum$outboundSchema;
}

/** @internal */
export const V1UniswapPoolPriceRequest$inboundSchema: z.ZodType<
  V1UniswapPoolPriceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chain: V1UniswapPoolPriceChain$inboundSchema.default("arbitrum"),
  token_in: z.string().default("USDC"),
  token_out: z.string().default("USDT"),
  fee: V1UniswapPoolPriceFeeEnum$inboundSchema.default("0.01"),
}).transform((v) => {
  return remap$(v, {
    "token_in": "tokenIn",
    "token_out": "tokenOut",
  });
});

/** @internal */
export type V1UniswapPoolPriceRequest$Outbound = {
  chain: string;
  token_in: string;
  token_out: string;
  fee: string;
};

/** @internal */
export const V1UniswapPoolPriceRequest$outboundSchema: z.ZodType<
  V1UniswapPoolPriceRequest$Outbound,
  z.ZodTypeDef,
  V1UniswapPoolPriceRequest
> = z.object({
  chain: V1UniswapPoolPriceChain$outboundSchema.default("arbitrum"),
  tokenIn: z.string().default("USDC"),
  tokenOut: z.string().default("USDT"),
  fee: V1UniswapPoolPriceFeeEnum$outboundSchema.default("0.01"),
}).transform((v) => {
  return remap$(v, {
    tokenIn: "token_in",
    tokenOut: "token_out",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1UniswapPoolPriceRequest$ {
  /** @deprecated use `V1UniswapPoolPriceRequest$inboundSchema` instead. */
  export const inboundSchema = V1UniswapPoolPriceRequest$inboundSchema;
  /** @deprecated use `V1UniswapPoolPriceRequest$outboundSchema` instead. */
  export const outboundSchema = V1UniswapPoolPriceRequest$outboundSchema;
  /** @deprecated use `V1UniswapPoolPriceRequest$Outbound` instead. */
  export type Outbound = V1UniswapPoolPriceRequest$Outbound;
}

export function v1UniswapPoolPriceRequestToJSON(
  v1UniswapPoolPriceRequest: V1UniswapPoolPriceRequest,
): string {
  return JSON.stringify(
    V1UniswapPoolPriceRequest$outboundSchema.parse(v1UniswapPoolPriceRequest),
  );
}

export function v1UniswapPoolPriceRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1UniswapPoolPriceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1UniswapPoolPriceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1UniswapPoolPriceRequest' from JSON`,
  );
}
