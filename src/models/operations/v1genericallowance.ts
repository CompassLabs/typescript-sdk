/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const V1GenericAllowanceChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type V1GenericAllowanceChain = ClosedEnum<
  typeof V1GenericAllowanceChain
>;

export const ContractEnum = {
  AaveV3Pool: "AaveV3Pool",
  AerodromeBasicRouter: "AerodromeBasicRouter",
  AerodromeSlipstreamRouter: "AerodromeSlipstreamRouter",
  AerodromeSlipstreamNonfungiblePositionManager:
    "AerodromeSlipstreamNonfungiblePositionManager",
  UniswapV3Router: "UniswapV3Router",
  UniswapV3NFTPositionManager: "UniswapV3NFTPositionManager",
  Morpho: "Morpho",
  SkyDaiUsdsConverter: "SkyDaiUsdsConverter",
  SkyUsdcUsdsConverter: "SkyUsdcUsdsConverter",
  SkyUsdsVault: "SkyUsdsVault",
  PendleRouter: "PendleRouter",
  OdosRouter: "OdosRouter",
  EthenaVault: "EthenaVault",
} as const;
export type ContractEnum = ClosedEnum<typeof ContractEnum>;

/**
 * The name or address of the contract to check allowance for.
 */
export type Contract = ContractEnum | string;

export type V1GenericAllowanceRequest = {
  chain?: V1GenericAllowanceChain | undefined;
  /**
   * The user to get the ERC20 allowance of.
   */
  user?: string | undefined;
  /**
   * The symbol or address of the token for which the allowance is checked.
   */
  token?: string | undefined;
  /**
   * The name or address of the contract to check allowance for.
   */
  contract: ContractEnum | string;
};

/** @internal */
export const V1GenericAllowanceChain$inboundSchema: z.ZodNativeEnum<
  typeof V1GenericAllowanceChain
> = z.nativeEnum(V1GenericAllowanceChain);

/** @internal */
export const V1GenericAllowanceChain$outboundSchema: z.ZodNativeEnum<
  typeof V1GenericAllowanceChain
> = V1GenericAllowanceChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1GenericAllowanceChain$ {
  /** @deprecated use `V1GenericAllowanceChain$inboundSchema` instead. */
  export const inboundSchema = V1GenericAllowanceChain$inboundSchema;
  /** @deprecated use `V1GenericAllowanceChain$outboundSchema` instead. */
  export const outboundSchema = V1GenericAllowanceChain$outboundSchema;
}

/** @internal */
export const ContractEnum$inboundSchema: z.ZodNativeEnum<typeof ContractEnum> =
  z.nativeEnum(ContractEnum);

/** @internal */
export const ContractEnum$outboundSchema: z.ZodNativeEnum<typeof ContractEnum> =
  ContractEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ContractEnum$ {
  /** @deprecated use `ContractEnum$inboundSchema` instead. */
  export const inboundSchema = ContractEnum$inboundSchema;
  /** @deprecated use `ContractEnum$outboundSchema` instead. */
  export const outboundSchema = ContractEnum$outboundSchema;
}

/** @internal */
export const Contract$inboundSchema: z.ZodType<
  Contract,
  z.ZodTypeDef,
  unknown
> = z.union([ContractEnum$inboundSchema, z.string()]);

/** @internal */
export type Contract$Outbound = string | string;

/** @internal */
export const Contract$outboundSchema: z.ZodType<
  Contract$Outbound,
  z.ZodTypeDef,
  Contract
> = z.union([ContractEnum$outboundSchema, z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace Contract$ {
  /** @deprecated use `Contract$inboundSchema` instead. */
  export const inboundSchema = Contract$inboundSchema;
  /** @deprecated use `Contract$outboundSchema` instead. */
  export const outboundSchema = Contract$outboundSchema;
  /** @deprecated use `Contract$Outbound` instead. */
  export type Outbound = Contract$Outbound;
}

export function contractToJSON(contract: Contract): string {
  return JSON.stringify(Contract$outboundSchema.parse(contract));
}

export function contractFromJSON(
  jsonString: string,
): SafeParseResult<Contract, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => Contract$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'Contract' from JSON`,
  );
}

/** @internal */
export const V1GenericAllowanceRequest$inboundSchema: z.ZodType<
  V1GenericAllowanceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chain: V1GenericAllowanceChain$inboundSchema.default("arbitrum"),
  user: z.string().default("0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"),
  token: z.string().default("USDC"),
  contract: z.union([ContractEnum$inboundSchema, z.string()]),
});

/** @internal */
export type V1GenericAllowanceRequest$Outbound = {
  chain: string;
  user: string;
  token: string;
  contract: string | string;
};

/** @internal */
export const V1GenericAllowanceRequest$outboundSchema: z.ZodType<
  V1GenericAllowanceRequest$Outbound,
  z.ZodTypeDef,
  V1GenericAllowanceRequest
> = z.object({
  chain: V1GenericAllowanceChain$outboundSchema.default("arbitrum"),
  user: z.string().default("0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"),
  token: z.string().default("USDC"),
  contract: z.union([ContractEnum$outboundSchema, z.string()]),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1GenericAllowanceRequest$ {
  /** @deprecated use `V1GenericAllowanceRequest$inboundSchema` instead. */
  export const inboundSchema = V1GenericAllowanceRequest$inboundSchema;
  /** @deprecated use `V1GenericAllowanceRequest$outboundSchema` instead. */
  export const outboundSchema = V1GenericAllowanceRequest$outboundSchema;
  /** @deprecated use `V1GenericAllowanceRequest$Outbound` instead. */
  export type Outbound = V1GenericAllowanceRequest$Outbound;
}

export function v1GenericAllowanceRequestToJSON(
  v1GenericAllowanceRequest: V1GenericAllowanceRequest,
): string {
  return JSON.stringify(
    V1GenericAllowanceRequest$outboundSchema.parse(v1GenericAllowanceRequest),
  );
}

export function v1GenericAllowanceRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1GenericAllowanceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1GenericAllowanceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1GenericAllowanceRequest' from JSON`,
  );
}
