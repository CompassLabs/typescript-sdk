/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const V1UniswapQuoteSellExactlyChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type V1UniswapQuoteSellExactlyChain = ClosedEnum<
  typeof V1UniswapQuoteSellExactlyChain
>;

/**
 * The transaction fee of a Uniswap pool in bips.
 *
 * @remarks
 *
 * Uniswap supports 4 different fee levels.
 */
export const V1UniswapQuoteSellExactlyFeeEnum = {
  ZeroDot01: "0.01",
  ZeroDot05: "0.05",
  ZeroDot3: "0.3",
  OneDot0: "1.0",
} as const;
/**
 * The transaction fee of a Uniswap pool in bips.
 *
 * @remarks
 *
 * Uniswap supports 4 different fee levels.
 */
export type V1UniswapQuoteSellExactlyFeeEnum = ClosedEnum<
  typeof V1UniswapQuoteSellExactlyFeeEnum
>;

/**
 * The amount of the token to swap from
 */
export type AmountIn = number | string;

export type V1UniswapQuoteSellExactlyRequest = {
  chain?: V1UniswapQuoteSellExactlyChain | undefined;
  /**
   * The symbol or address of the token to swap from.
   */
  tokenIn?: string | undefined;
  /**
   * The symbol or address of the token to swap to.
   */
  tokenOut?: string | undefined;
  /**
   * The fee to pay for the swap
   */
  fee?: V1UniswapQuoteSellExactlyFeeEnum | undefined;
  /**
   * The amount of the token to swap from
   */
  amountIn: number | string;
};

/** @internal */
export const V1UniswapQuoteSellExactlyChain$inboundSchema: z.ZodNativeEnum<
  typeof V1UniswapQuoteSellExactlyChain
> = z.nativeEnum(V1UniswapQuoteSellExactlyChain);

/** @internal */
export const V1UniswapQuoteSellExactlyChain$outboundSchema: z.ZodNativeEnum<
  typeof V1UniswapQuoteSellExactlyChain
> = V1UniswapQuoteSellExactlyChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1UniswapQuoteSellExactlyChain$ {
  /** @deprecated use `V1UniswapQuoteSellExactlyChain$inboundSchema` instead. */
  export const inboundSchema = V1UniswapQuoteSellExactlyChain$inboundSchema;
  /** @deprecated use `V1UniswapQuoteSellExactlyChain$outboundSchema` instead. */
  export const outboundSchema = V1UniswapQuoteSellExactlyChain$outboundSchema;
}

/** @internal */
export const V1UniswapQuoteSellExactlyFeeEnum$inboundSchema: z.ZodNativeEnum<
  typeof V1UniswapQuoteSellExactlyFeeEnum
> = z.nativeEnum(V1UniswapQuoteSellExactlyFeeEnum);

/** @internal */
export const V1UniswapQuoteSellExactlyFeeEnum$outboundSchema: z.ZodNativeEnum<
  typeof V1UniswapQuoteSellExactlyFeeEnum
> = V1UniswapQuoteSellExactlyFeeEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1UniswapQuoteSellExactlyFeeEnum$ {
  /** @deprecated use `V1UniswapQuoteSellExactlyFeeEnum$inboundSchema` instead. */
  export const inboundSchema = V1UniswapQuoteSellExactlyFeeEnum$inboundSchema;
  /** @deprecated use `V1UniswapQuoteSellExactlyFeeEnum$outboundSchema` instead. */
  export const outboundSchema = V1UniswapQuoteSellExactlyFeeEnum$outboundSchema;
}

/** @internal */
export const AmountIn$inboundSchema: z.ZodType<
  AmountIn,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type AmountIn$Outbound = number | string;

/** @internal */
export const AmountIn$outboundSchema: z.ZodType<
  AmountIn$Outbound,
  z.ZodTypeDef,
  AmountIn
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AmountIn$ {
  /** @deprecated use `AmountIn$inboundSchema` instead. */
  export const inboundSchema = AmountIn$inboundSchema;
  /** @deprecated use `AmountIn$outboundSchema` instead. */
  export const outboundSchema = AmountIn$outboundSchema;
  /** @deprecated use `AmountIn$Outbound` instead. */
  export type Outbound = AmountIn$Outbound;
}

export function amountInToJSON(amountIn: AmountIn): string {
  return JSON.stringify(AmountIn$outboundSchema.parse(amountIn));
}

export function amountInFromJSON(
  jsonString: string,
): SafeParseResult<AmountIn, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AmountIn$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AmountIn' from JSON`,
  );
}

/** @internal */
export const V1UniswapQuoteSellExactlyRequest$inboundSchema: z.ZodType<
  V1UniswapQuoteSellExactlyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chain: V1UniswapQuoteSellExactlyChain$inboundSchema.default("arbitrum"),
  token_in: z.string().default("USDC"),
  token_out: z.string().default("USDT"),
  fee: V1UniswapQuoteSellExactlyFeeEnum$inboundSchema.default("0.01"),
  amount_in: z.union([z.number(), z.string()]),
}).transform((v) => {
  return remap$(v, {
    "token_in": "tokenIn",
    "token_out": "tokenOut",
    "amount_in": "amountIn",
  });
});

/** @internal */
export type V1UniswapQuoteSellExactlyRequest$Outbound = {
  chain: string;
  token_in: string;
  token_out: string;
  fee: string;
  amount_in: number | string;
};

/** @internal */
export const V1UniswapQuoteSellExactlyRequest$outboundSchema: z.ZodType<
  V1UniswapQuoteSellExactlyRequest$Outbound,
  z.ZodTypeDef,
  V1UniswapQuoteSellExactlyRequest
> = z.object({
  chain: V1UniswapQuoteSellExactlyChain$outboundSchema.default("arbitrum"),
  tokenIn: z.string().default("USDC"),
  tokenOut: z.string().default("USDT"),
  fee: V1UniswapQuoteSellExactlyFeeEnum$outboundSchema.default("0.01"),
  amountIn: z.union([z.number(), z.string()]),
}).transform((v) => {
  return remap$(v, {
    tokenIn: "token_in",
    tokenOut: "token_out",
    amountIn: "amount_in",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1UniswapQuoteSellExactlyRequest$ {
  /** @deprecated use `V1UniswapQuoteSellExactlyRequest$inboundSchema` instead. */
  export const inboundSchema = V1UniswapQuoteSellExactlyRequest$inboundSchema;
  /** @deprecated use `V1UniswapQuoteSellExactlyRequest$outboundSchema` instead. */
  export const outboundSchema = V1UniswapQuoteSellExactlyRequest$outboundSchema;
  /** @deprecated use `V1UniswapQuoteSellExactlyRequest$Outbound` instead. */
  export type Outbound = V1UniswapQuoteSellExactlyRequest$Outbound;
}

export function v1UniswapQuoteSellExactlyRequestToJSON(
  v1UniswapQuoteSellExactlyRequest: V1UniswapQuoteSellExactlyRequest,
): string {
  return JSON.stringify(
    V1UniswapQuoteSellExactlyRequest$outboundSchema.parse(
      v1UniswapQuoteSellExactlyRequest,
    ),
  );
}

export function v1UniswapQuoteSellExactlyRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1UniswapQuoteSellExactlyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1UniswapQuoteSellExactlyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1UniswapQuoteSellExactlyRequest' from JSON`,
  );
}
