/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const V1AaveHistoricalTransactionsChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type V1AaveHistoricalTransactionsChain = ClosedEnum<
  typeof V1AaveHistoricalTransactionsChain
>;

export type V1AaveHistoricalTransactionsRequest = {
  /**
   * The offset of the first item to return.
   */
  offset?: number | undefined;
  /**
   * The number of items to return.
   */
  limit?: number | undefined;
  chain?: V1AaveHistoricalTransactionsChain | undefined;
  /**
   * The address of the user to get historical transactions for.
   */
  userAddress?: string | undefined;
};

/** @internal */
export const V1AaveHistoricalTransactionsChain$inboundSchema: z.ZodNativeEnum<
  typeof V1AaveHistoricalTransactionsChain
> = z.nativeEnum(V1AaveHistoricalTransactionsChain);

/** @internal */
export const V1AaveHistoricalTransactionsChain$outboundSchema: z.ZodNativeEnum<
  typeof V1AaveHistoricalTransactionsChain
> = V1AaveHistoricalTransactionsChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AaveHistoricalTransactionsChain$ {
  /** @deprecated use `V1AaveHistoricalTransactionsChain$inboundSchema` instead. */
  export const inboundSchema = V1AaveHistoricalTransactionsChain$inboundSchema;
  /** @deprecated use `V1AaveHistoricalTransactionsChain$outboundSchema` instead. */
  export const outboundSchema =
    V1AaveHistoricalTransactionsChain$outboundSchema;
}

/** @internal */
export const V1AaveHistoricalTransactionsRequest$inboundSchema: z.ZodType<
  V1AaveHistoricalTransactionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  offset: z.number().int().default(0),
  limit: z.number().int().default(100),
  chain: V1AaveHistoricalTransactionsChain$inboundSchema.default("base"),
  user_address: z.string().default(
    "0x3254f3b1918637ba924e3F18968Cb74219974b63",
  ),
}).transform((v) => {
  return remap$(v, {
    "user_address": "userAddress",
  });
});

/** @internal */
export type V1AaveHistoricalTransactionsRequest$Outbound = {
  offset: number;
  limit: number;
  chain: string;
  user_address: string;
};

/** @internal */
export const V1AaveHistoricalTransactionsRequest$outboundSchema: z.ZodType<
  V1AaveHistoricalTransactionsRequest$Outbound,
  z.ZodTypeDef,
  V1AaveHistoricalTransactionsRequest
> = z.object({
  offset: z.number().int().default(0),
  limit: z.number().int().default(100),
  chain: V1AaveHistoricalTransactionsChain$outboundSchema.default("base"),
  userAddress: z.string().default("0x3254f3b1918637ba924e3F18968Cb74219974b63"),
}).transform((v) => {
  return remap$(v, {
    userAddress: "user_address",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AaveHistoricalTransactionsRequest$ {
  /** @deprecated use `V1AaveHistoricalTransactionsRequest$inboundSchema` instead. */
  export const inboundSchema =
    V1AaveHistoricalTransactionsRequest$inboundSchema;
  /** @deprecated use `V1AaveHistoricalTransactionsRequest$outboundSchema` instead. */
  export const outboundSchema =
    V1AaveHistoricalTransactionsRequest$outboundSchema;
  /** @deprecated use `V1AaveHistoricalTransactionsRequest$Outbound` instead. */
  export type Outbound = V1AaveHistoricalTransactionsRequest$Outbound;
}

export function v1AaveHistoricalTransactionsRequestToJSON(
  v1AaveHistoricalTransactionsRequest: V1AaveHistoricalTransactionsRequest,
): string {
  return JSON.stringify(
    V1AaveHistoricalTransactionsRequest$outboundSchema.parse(
      v1AaveHistoricalTransactionsRequest,
    ),
  );
}

export function v1AaveHistoricalTransactionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1AaveHistoricalTransactionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) =>
      V1AaveHistoricalTransactionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AaveHistoricalTransactionsRequest' from JSON`,
  );
}
