/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const V1MorphoMarketsChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type V1MorphoMarketsChain = ClosedEnum<typeof V1MorphoMarketsChain>;

export type V1MorphoMarketsRequest = {
  chain?: V1MorphoMarketsChain | undefined;
  /**
   * Symbol or address of the collateral token to filter markets by. Optional parameter.
   */
  collateralToken?: string | null | undefined;
  /**
   * Symbol or address of the loan token to filter markets by. Optional parameter.
   */
  loanToken?: string | null | undefined;
};

/** @internal */
export const V1MorphoMarketsChain$inboundSchema: z.ZodNativeEnum<
  typeof V1MorphoMarketsChain
> = z.nativeEnum(V1MorphoMarketsChain);

/** @internal */
export const V1MorphoMarketsChain$outboundSchema: z.ZodNativeEnum<
  typeof V1MorphoMarketsChain
> = V1MorphoMarketsChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1MorphoMarketsChain$ {
  /** @deprecated use `V1MorphoMarketsChain$inboundSchema` instead. */
  export const inboundSchema = V1MorphoMarketsChain$inboundSchema;
  /** @deprecated use `V1MorphoMarketsChain$outboundSchema` instead. */
  export const outboundSchema = V1MorphoMarketsChain$outboundSchema;
}

/** @internal */
export const V1MorphoMarketsRequest$inboundSchema: z.ZodType<
  V1MorphoMarketsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chain: V1MorphoMarketsChain$inboundSchema.default("base"),
  collateral_token: z.nullable(z.string()).optional(),
  loan_token: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "collateral_token": "collateralToken",
    "loan_token": "loanToken",
  });
});

/** @internal */
export type V1MorphoMarketsRequest$Outbound = {
  chain: string;
  collateral_token?: string | null | undefined;
  loan_token?: string | null | undefined;
};

/** @internal */
export const V1MorphoMarketsRequest$outboundSchema: z.ZodType<
  V1MorphoMarketsRequest$Outbound,
  z.ZodTypeDef,
  V1MorphoMarketsRequest
> = z.object({
  chain: V1MorphoMarketsChain$outboundSchema.default("base"),
  collateralToken: z.nullable(z.string()).optional(),
  loanToken: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    collateralToken: "collateral_token",
    loanToken: "loan_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1MorphoMarketsRequest$ {
  /** @deprecated use `V1MorphoMarketsRequest$inboundSchema` instead. */
  export const inboundSchema = V1MorphoMarketsRequest$inboundSchema;
  /** @deprecated use `V1MorphoMarketsRequest$outboundSchema` instead. */
  export const outboundSchema = V1MorphoMarketsRequest$outboundSchema;
  /** @deprecated use `V1MorphoMarketsRequest$Outbound` instead. */
  export type Outbound = V1MorphoMarketsRequest$Outbound;
}

export function v1MorphoMarketsRequestToJSON(
  v1MorphoMarketsRequest: V1MorphoMarketsRequest,
): string {
  return JSON.stringify(
    V1MorphoMarketsRequest$outboundSchema.parse(v1MorphoMarketsRequest),
  );
}

export function v1MorphoMarketsRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1MorphoMarketsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1MorphoMarketsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1MorphoMarketsRequest' from JSON`,
  );
}
