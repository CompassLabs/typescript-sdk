/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const V1PendleMarketChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type V1PendleMarketChain = ClosedEnum<typeof V1PendleMarketChain>;

export type V1PendleMarketRequest = {
  chain?: V1PendleMarketChain | undefined;
  /**
   * Optional block number (defaults to latest).
   */
  block?: number | null | undefined;
  /**
   * The market address of the desired position.
   */
  marketAddress?: string | undefined;
  /**
   * The user address of the desired market position. Only include if you would like the user position included in the response. Defaults to `None`.
   */
  userAddress?: string | null | undefined;
};

/** @internal */
export const V1PendleMarketChain$inboundSchema: z.ZodNativeEnum<
  typeof V1PendleMarketChain
> = z.nativeEnum(V1PendleMarketChain);

/** @internal */
export const V1PendleMarketChain$outboundSchema: z.ZodNativeEnum<
  typeof V1PendleMarketChain
> = V1PendleMarketChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1PendleMarketChain$ {
  /** @deprecated use `V1PendleMarketChain$inboundSchema` instead. */
  export const inboundSchema = V1PendleMarketChain$inboundSchema;
  /** @deprecated use `V1PendleMarketChain$outboundSchema` instead. */
  export const outboundSchema = V1PendleMarketChain$outboundSchema;
}

/** @internal */
export const V1PendleMarketRequest$inboundSchema: z.ZodType<
  V1PendleMarketRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chain: V1PendleMarketChain$inboundSchema.default("arbitrum"),
  block: z.nullable(z.number().int()).optional(),
  market_address: z.string().default(
    "0x46d62a8dede1bf2d0de04f2ed863245cbba5e538",
  ),
  user_address: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "market_address": "marketAddress",
    "user_address": "userAddress",
  });
});

/** @internal */
export type V1PendleMarketRequest$Outbound = {
  chain: string;
  block?: number | null | undefined;
  market_address: string;
  user_address?: string | null | undefined;
};

/** @internal */
export const V1PendleMarketRequest$outboundSchema: z.ZodType<
  V1PendleMarketRequest$Outbound,
  z.ZodTypeDef,
  V1PendleMarketRequest
> = z.object({
  chain: V1PendleMarketChain$outboundSchema.default("arbitrum"),
  block: z.nullable(z.number().int()).optional(),
  marketAddress: z.string().default(
    "0x46d62a8dede1bf2d0de04f2ed863245cbba5e538",
  ),
  userAddress: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    marketAddress: "market_address",
    userAddress: "user_address",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1PendleMarketRequest$ {
  /** @deprecated use `V1PendleMarketRequest$inboundSchema` instead. */
  export const inboundSchema = V1PendleMarketRequest$inboundSchema;
  /** @deprecated use `V1PendleMarketRequest$outboundSchema` instead. */
  export const outboundSchema = V1PendleMarketRequest$outboundSchema;
  /** @deprecated use `V1PendleMarketRequest$Outbound` instead. */
  export type Outbound = V1PendleMarketRequest$Outbound;
}

export function v1PendleMarketRequestToJSON(
  v1PendleMarketRequest: V1PendleMarketRequest,
): string {
  return JSON.stringify(
    V1PendleMarketRequest$outboundSchema.parse(v1PendleMarketRequest),
  );
}

export function v1PendleMarketRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1PendleMarketRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1PendleMarketRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1PendleMarketRequest' from JSON`,
  );
}
