/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const V1PendlePositionsChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type V1PendlePositionsChain = ClosedEnum<typeof V1PendlePositionsChain>;

export type V1PendlePositionsRequest = {
  chain?: V1PendlePositionsChain | undefined;
  /**
   * The user address of the desired position.
   */
  userAddress?: string | undefined;
};

/** @internal */
export const V1PendlePositionsChain$inboundSchema: z.ZodNativeEnum<
  typeof V1PendlePositionsChain
> = z.nativeEnum(V1PendlePositionsChain);

/** @internal */
export const V1PendlePositionsChain$outboundSchema: z.ZodNativeEnum<
  typeof V1PendlePositionsChain
> = V1PendlePositionsChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1PendlePositionsChain$ {
  /** @deprecated use `V1PendlePositionsChain$inboundSchema` instead. */
  export const inboundSchema = V1PendlePositionsChain$inboundSchema;
  /** @deprecated use `V1PendlePositionsChain$outboundSchema` instead. */
  export const outboundSchema = V1PendlePositionsChain$outboundSchema;
}

/** @internal */
export const V1PendlePositionsRequest$inboundSchema: z.ZodType<
  V1PendlePositionsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chain: V1PendlePositionsChain$inboundSchema.default("arbitrum"),
  user_address: z.string().default(
    "0x68C314e30b543a35819e5625da563E6Da65D5dd4",
  ),
}).transform((v) => {
  return remap$(v, {
    "user_address": "userAddress",
  });
});

/** @internal */
export type V1PendlePositionsRequest$Outbound = {
  chain: string;
  user_address: string;
};

/** @internal */
export const V1PendlePositionsRequest$outboundSchema: z.ZodType<
  V1PendlePositionsRequest$Outbound,
  z.ZodTypeDef,
  V1PendlePositionsRequest
> = z.object({
  chain: V1PendlePositionsChain$outboundSchema.default("arbitrum"),
  userAddress: z.string().default("0x68C314e30b543a35819e5625da563E6Da65D5dd4"),
}).transform((v) => {
  return remap$(v, {
    userAddress: "user_address",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1PendlePositionsRequest$ {
  /** @deprecated use `V1PendlePositionsRequest$inboundSchema` instead. */
  export const inboundSchema = V1PendlePositionsRequest$inboundSchema;
  /** @deprecated use `V1PendlePositionsRequest$outboundSchema` instead. */
  export const outboundSchema = V1PendlePositionsRequest$outboundSchema;
  /** @deprecated use `V1PendlePositionsRequest$Outbound` instead. */
  export type Outbound = V1PendlePositionsRequest$Outbound;
}

export function v1PendlePositionsRequestToJSON(
  v1PendlePositionsRequest: V1PendlePositionsRequest,
): string {
  return JSON.stringify(
    V1PendlePositionsRequest$outboundSchema.parse(v1PendlePositionsRequest),
  );
}

export function v1PendlePositionsRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1PendlePositionsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1PendlePositionsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1PendlePositionsRequest' from JSON`,
  );
}
