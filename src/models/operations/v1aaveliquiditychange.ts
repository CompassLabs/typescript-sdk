/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const V1AaveLiquidityChangeChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type V1AaveLiquidityChangeChain = ClosedEnum<
  typeof V1AaveLiquidityChangeChain
>;

export type V1AaveLiquidityChangeRequest = {
  chain?: V1AaveLiquidityChangeChain | undefined;
  /**
   * The symbol or address of the asset to get liquidity change for..
   */
  token?: string | undefined;
  /**
   * The start block to calculate liquidity change from.
   */
  startBlock?: number | undefined;
  /**
   * The end block to calculate liquidity change to.
   */
  endBlock?: number | undefined;
};

/** @internal */
export const V1AaveLiquidityChangeChain$inboundSchema: z.ZodNativeEnum<
  typeof V1AaveLiquidityChangeChain
> = z.nativeEnum(V1AaveLiquidityChangeChain);

/** @internal */
export const V1AaveLiquidityChangeChain$outboundSchema: z.ZodNativeEnum<
  typeof V1AaveLiquidityChangeChain
> = V1AaveLiquidityChangeChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AaveLiquidityChangeChain$ {
  /** @deprecated use `V1AaveLiquidityChangeChain$inboundSchema` instead. */
  export const inboundSchema = V1AaveLiquidityChangeChain$inboundSchema;
  /** @deprecated use `V1AaveLiquidityChangeChain$outboundSchema` instead. */
  export const outboundSchema = V1AaveLiquidityChangeChain$outboundSchema;
}

/** @internal */
export const V1AaveLiquidityChangeRequest$inboundSchema: z.ZodType<
  V1AaveLiquidityChangeRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chain: V1AaveLiquidityChangeChain$inboundSchema.default("arbitrum"),
  token: z.string().default("USDC"),
  start_block: z.number().int().default(0),
  end_block: z.number().int().default(319407231),
}).transform((v) => {
  return remap$(v, {
    "start_block": "startBlock",
    "end_block": "endBlock",
  });
});

/** @internal */
export type V1AaveLiquidityChangeRequest$Outbound = {
  chain: string;
  token: string;
  start_block: number;
  end_block: number;
};

/** @internal */
export const V1AaveLiquidityChangeRequest$outboundSchema: z.ZodType<
  V1AaveLiquidityChangeRequest$Outbound,
  z.ZodTypeDef,
  V1AaveLiquidityChangeRequest
> = z.object({
  chain: V1AaveLiquidityChangeChain$outboundSchema.default("arbitrum"),
  token: z.string().default("USDC"),
  startBlock: z.number().int().default(0),
  endBlock: z.number().int().default(319407231),
}).transform((v) => {
  return remap$(v, {
    startBlock: "start_block",
    endBlock: "end_block",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AaveLiquidityChangeRequest$ {
  /** @deprecated use `V1AaveLiquidityChangeRequest$inboundSchema` instead. */
  export const inboundSchema = V1AaveLiquidityChangeRequest$inboundSchema;
  /** @deprecated use `V1AaveLiquidityChangeRequest$outboundSchema` instead. */
  export const outboundSchema = V1AaveLiquidityChangeRequest$outboundSchema;
  /** @deprecated use `V1AaveLiquidityChangeRequest$Outbound` instead. */
  export type Outbound = V1AaveLiquidityChangeRequest$Outbound;
}

export function v1AaveLiquidityChangeRequestToJSON(
  v1AaveLiquidityChangeRequest: V1AaveLiquidityChangeRequest,
): string {
  return JSON.stringify(
    V1AaveLiquidityChangeRequest$outboundSchema.parse(
      v1AaveLiquidityChangeRequest,
    ),
  );
}

export function v1AaveLiquidityChangeRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1AaveLiquidityChangeRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1AaveLiquidityChangeRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AaveLiquidityChangeRequest' from JSON`,
  );
}
