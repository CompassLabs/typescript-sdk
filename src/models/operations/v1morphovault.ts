/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const V1MorphoVaultChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type V1MorphoVaultChain = ClosedEnum<typeof V1MorphoVaultChain>;

export type V1MorphoVaultRequest = {
  chain?: V1MorphoVaultChain | undefined;
  /**
   * Optional block number (defaults to latest).
   */
  block?: number | null | undefined;
  /**
   * The vault address of the desired vault position.
   */
  vaultAddress?: string | undefined;
  /**
   * The user address of the desired vault position. Only include if you would like the user position included in the response. Defaults to `None`.
   */
  userAddress?: string | null | undefined;
};

/** @internal */
export const V1MorphoVaultChain$inboundSchema: z.ZodNativeEnum<
  typeof V1MorphoVaultChain
> = z.nativeEnum(V1MorphoVaultChain);

/** @internal */
export const V1MorphoVaultChain$outboundSchema: z.ZodNativeEnum<
  typeof V1MorphoVaultChain
> = V1MorphoVaultChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1MorphoVaultChain$ {
  /** @deprecated use `V1MorphoVaultChain$inboundSchema` instead. */
  export const inboundSchema = V1MorphoVaultChain$inboundSchema;
  /** @deprecated use `V1MorphoVaultChain$outboundSchema` instead. */
  export const outboundSchema = V1MorphoVaultChain$outboundSchema;
}

/** @internal */
export const V1MorphoVaultRequest$inboundSchema: z.ZodType<
  V1MorphoVaultRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chain: V1MorphoVaultChain$inboundSchema.default("ethereum"),
  block: z.nullable(z.number().int()).optional(),
  vault_address: z.string().default(
    "0x182863131F9a4630fF9E27830d945B1413e347E8",
  ),
  user_address: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "vault_address": "vaultAddress",
    "user_address": "userAddress",
  });
});

/** @internal */
export type V1MorphoVaultRequest$Outbound = {
  chain: string;
  block?: number | null | undefined;
  vault_address: string;
  user_address?: string | null | undefined;
};

/** @internal */
export const V1MorphoVaultRequest$outboundSchema: z.ZodType<
  V1MorphoVaultRequest$Outbound,
  z.ZodTypeDef,
  V1MorphoVaultRequest
> = z.object({
  chain: V1MorphoVaultChain$outboundSchema.default("ethereum"),
  block: z.nullable(z.number().int()).optional(),
  vaultAddress: z.string().default(
    "0x182863131F9a4630fF9E27830d945B1413e347E8",
  ),
  userAddress: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    vaultAddress: "vault_address",
    userAddress: "user_address",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1MorphoVaultRequest$ {
  /** @deprecated use `V1MorphoVaultRequest$inboundSchema` instead. */
  export const inboundSchema = V1MorphoVaultRequest$inboundSchema;
  /** @deprecated use `V1MorphoVaultRequest$outboundSchema` instead. */
  export const outboundSchema = V1MorphoVaultRequest$outboundSchema;
  /** @deprecated use `V1MorphoVaultRequest$Outbound` instead. */
  export type Outbound = V1MorphoVaultRequest$Outbound;
}

export function v1MorphoVaultRequestToJSON(
  v1MorphoVaultRequest: V1MorphoVaultRequest,
): string {
  return JSON.stringify(
    V1MorphoVaultRequest$outboundSchema.parse(v1MorphoVaultRequest),
  );
}

export function v1MorphoVaultRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1MorphoVaultRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1MorphoVaultRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1MorphoVaultRequest' from JSON`,
  );
}
