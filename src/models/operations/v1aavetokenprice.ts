/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const V1AaveTokenPriceChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type V1AaveTokenPriceChain = ClosedEnum<typeof V1AaveTokenPriceChain>;

export type V1AaveTokenPriceRequest = {
  chain?: V1AaveTokenPriceChain | undefined;
  /**
   * Optional block number (defaults to latest).
   */
  block?: number | null | undefined;
  /**
   * The symbol or address of the asset whose price you want..
   */
  token?: string | undefined;
};

/** @internal */
export const V1AaveTokenPriceChain$inboundSchema: z.ZodNativeEnum<
  typeof V1AaveTokenPriceChain
> = z.nativeEnum(V1AaveTokenPriceChain);

/** @internal */
export const V1AaveTokenPriceChain$outboundSchema: z.ZodNativeEnum<
  typeof V1AaveTokenPriceChain
> = V1AaveTokenPriceChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AaveTokenPriceChain$ {
  /** @deprecated use `V1AaveTokenPriceChain$inboundSchema` instead. */
  export const inboundSchema = V1AaveTokenPriceChain$inboundSchema;
  /** @deprecated use `V1AaveTokenPriceChain$outboundSchema` instead. */
  export const outboundSchema = V1AaveTokenPriceChain$outboundSchema;
}

/** @internal */
export const V1AaveTokenPriceRequest$inboundSchema: z.ZodType<
  V1AaveTokenPriceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chain: V1AaveTokenPriceChain$inboundSchema.default("arbitrum"),
  block: z.nullable(z.number().int()).optional(),
  token: z.string().default("USDC"),
});

/** @internal */
export type V1AaveTokenPriceRequest$Outbound = {
  chain: string;
  block?: number | null | undefined;
  token: string;
};

/** @internal */
export const V1AaveTokenPriceRequest$outboundSchema: z.ZodType<
  V1AaveTokenPriceRequest$Outbound,
  z.ZodTypeDef,
  V1AaveTokenPriceRequest
> = z.object({
  chain: V1AaveTokenPriceChain$outboundSchema.default("arbitrum"),
  block: z.nullable(z.number().int()).optional(),
  token: z.string().default("USDC"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AaveTokenPriceRequest$ {
  /** @deprecated use `V1AaveTokenPriceRequest$inboundSchema` instead. */
  export const inboundSchema = V1AaveTokenPriceRequest$inboundSchema;
  /** @deprecated use `V1AaveTokenPriceRequest$outboundSchema` instead. */
  export const outboundSchema = V1AaveTokenPriceRequest$outboundSchema;
  /** @deprecated use `V1AaveTokenPriceRequest$Outbound` instead. */
  export type Outbound = V1AaveTokenPriceRequest$Outbound;
}

export function v1AaveTokenPriceRequestToJSON(
  v1AaveTokenPriceRequest: V1AaveTokenPriceRequest,
): string {
  return JSON.stringify(
    V1AaveTokenPriceRequest$outboundSchema.parse(v1AaveTokenPriceRequest),
  );
}

export function v1AaveTokenPriceRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1AaveTokenPriceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1AaveTokenPriceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AaveTokenPriceRequest' from JSON`,
  );
}
