/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const V1UniswapQuoteBuyExactlyChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type V1UniswapQuoteBuyExactlyChain = ClosedEnum<
  typeof V1UniswapQuoteBuyExactlyChain
>;

/**
 * The transaction fee of a Uniswap pool in bips.
 *
 * @remarks
 *
 * Uniswap supports 4 different fee levels.
 */
export const V1UniswapQuoteBuyExactlyFeeEnum = {
  ZeroDot01: "0.01",
  ZeroDot05: "0.05",
  ZeroDot3: "0.3",
  OneDot0: "1.0",
} as const;
/**
 * The transaction fee of a Uniswap pool in bips.
 *
 * @remarks
 *
 * Uniswap supports 4 different fee levels.
 */
export type V1UniswapQuoteBuyExactlyFeeEnum = ClosedEnum<
  typeof V1UniswapQuoteBuyExactlyFeeEnum
>;

/**
 * The amount of the token to swap to
 */
export type AmountOut = number | string;

export type V1UniswapQuoteBuyExactlyRequest = {
  chain?: V1UniswapQuoteBuyExactlyChain | undefined;
  /**
   * The symbol or address of the token to swap from.
   */
  tokenIn?: string | undefined;
  /**
   * The symbol or address of the token to swap to.
   */
  tokenOut?: string | undefined;
  /**
   * The fee to pay for the swap
   */
  fee?: V1UniswapQuoteBuyExactlyFeeEnum | undefined;
  /**
   * The amount of the token to swap to
   */
  amountOut: number | string;
};

/** @internal */
export const V1UniswapQuoteBuyExactlyChain$inboundSchema: z.ZodNativeEnum<
  typeof V1UniswapQuoteBuyExactlyChain
> = z.nativeEnum(V1UniswapQuoteBuyExactlyChain);

/** @internal */
export const V1UniswapQuoteBuyExactlyChain$outboundSchema: z.ZodNativeEnum<
  typeof V1UniswapQuoteBuyExactlyChain
> = V1UniswapQuoteBuyExactlyChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1UniswapQuoteBuyExactlyChain$ {
  /** @deprecated use `V1UniswapQuoteBuyExactlyChain$inboundSchema` instead. */
  export const inboundSchema = V1UniswapQuoteBuyExactlyChain$inboundSchema;
  /** @deprecated use `V1UniswapQuoteBuyExactlyChain$outboundSchema` instead. */
  export const outboundSchema = V1UniswapQuoteBuyExactlyChain$outboundSchema;
}

/** @internal */
export const V1UniswapQuoteBuyExactlyFeeEnum$inboundSchema: z.ZodNativeEnum<
  typeof V1UniswapQuoteBuyExactlyFeeEnum
> = z.nativeEnum(V1UniswapQuoteBuyExactlyFeeEnum);

/** @internal */
export const V1UniswapQuoteBuyExactlyFeeEnum$outboundSchema: z.ZodNativeEnum<
  typeof V1UniswapQuoteBuyExactlyFeeEnum
> = V1UniswapQuoteBuyExactlyFeeEnum$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1UniswapQuoteBuyExactlyFeeEnum$ {
  /** @deprecated use `V1UniswapQuoteBuyExactlyFeeEnum$inboundSchema` instead. */
  export const inboundSchema = V1UniswapQuoteBuyExactlyFeeEnum$inboundSchema;
  /** @deprecated use `V1UniswapQuoteBuyExactlyFeeEnum$outboundSchema` instead. */
  export const outboundSchema = V1UniswapQuoteBuyExactlyFeeEnum$outboundSchema;
}

/** @internal */
export const AmountOut$inboundSchema: z.ZodType<
  AmountOut,
  z.ZodTypeDef,
  unknown
> = z.union([z.number(), z.string()]);

/** @internal */
export type AmountOut$Outbound = number | string;

/** @internal */
export const AmountOut$outboundSchema: z.ZodType<
  AmountOut$Outbound,
  z.ZodTypeDef,
  AmountOut
> = z.union([z.number(), z.string()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace AmountOut$ {
  /** @deprecated use `AmountOut$inboundSchema` instead. */
  export const inboundSchema = AmountOut$inboundSchema;
  /** @deprecated use `AmountOut$outboundSchema` instead. */
  export const outboundSchema = AmountOut$outboundSchema;
  /** @deprecated use `AmountOut$Outbound` instead. */
  export type Outbound = AmountOut$Outbound;
}

export function amountOutToJSON(amountOut: AmountOut): string {
  return JSON.stringify(AmountOut$outboundSchema.parse(amountOut));
}

export function amountOutFromJSON(
  jsonString: string,
): SafeParseResult<AmountOut, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => AmountOut$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'AmountOut' from JSON`,
  );
}

/** @internal */
export const V1UniswapQuoteBuyExactlyRequest$inboundSchema: z.ZodType<
  V1UniswapQuoteBuyExactlyRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chain: V1UniswapQuoteBuyExactlyChain$inboundSchema.default("arbitrum"),
  token_in: z.string().default("USDC"),
  token_out: z.string().default("USDT"),
  fee: V1UniswapQuoteBuyExactlyFeeEnum$inboundSchema.default("0.01"),
  amount_out: z.union([z.number(), z.string()]),
}).transform((v) => {
  return remap$(v, {
    "token_in": "tokenIn",
    "token_out": "tokenOut",
    "amount_out": "amountOut",
  });
});

/** @internal */
export type V1UniswapQuoteBuyExactlyRequest$Outbound = {
  chain: string;
  token_in: string;
  token_out: string;
  fee: string;
  amount_out: number | string;
};

/** @internal */
export const V1UniswapQuoteBuyExactlyRequest$outboundSchema: z.ZodType<
  V1UniswapQuoteBuyExactlyRequest$Outbound,
  z.ZodTypeDef,
  V1UniswapQuoteBuyExactlyRequest
> = z.object({
  chain: V1UniswapQuoteBuyExactlyChain$outboundSchema.default("arbitrum"),
  tokenIn: z.string().default("USDC"),
  tokenOut: z.string().default("USDT"),
  fee: V1UniswapQuoteBuyExactlyFeeEnum$outboundSchema.default("0.01"),
  amountOut: z.union([z.number(), z.string()]),
}).transform((v) => {
  return remap$(v, {
    tokenIn: "token_in",
    tokenOut: "token_out",
    amountOut: "amount_out",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1UniswapQuoteBuyExactlyRequest$ {
  /** @deprecated use `V1UniswapQuoteBuyExactlyRequest$inboundSchema` instead. */
  export const inboundSchema = V1UniswapQuoteBuyExactlyRequest$inboundSchema;
  /** @deprecated use `V1UniswapQuoteBuyExactlyRequest$outboundSchema` instead. */
  export const outboundSchema = V1UniswapQuoteBuyExactlyRequest$outboundSchema;
  /** @deprecated use `V1UniswapQuoteBuyExactlyRequest$Outbound` instead. */
  export type Outbound = V1UniswapQuoteBuyExactlyRequest$Outbound;
}

export function v1UniswapQuoteBuyExactlyRequestToJSON(
  v1UniswapQuoteBuyExactlyRequest: V1UniswapQuoteBuyExactlyRequest,
): string {
  return JSON.stringify(
    V1UniswapQuoteBuyExactlyRequest$outboundSchema.parse(
      v1UniswapQuoteBuyExactlyRequest,
    ),
  );
}

export function v1UniswapQuoteBuyExactlyRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1UniswapQuoteBuyExactlyRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1UniswapQuoteBuyExactlyRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1UniswapQuoteBuyExactlyRequest' from JSON`,
  );
}
