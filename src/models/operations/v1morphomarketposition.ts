/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const V1MorphoMarketPositionChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type V1MorphoMarketPositionChain = ClosedEnum<
  typeof V1MorphoMarketPositionChain
>;

export type V1MorphoMarketPositionRequest = {
  chain?: V1MorphoMarketPositionChain | undefined;
  /**
   * The user address of the desired market position.
   */
  userAddress?: string | undefined;
  /**
   * The key that uniquely identifies the market. This can be found using the 'Get Markets' endpoint.
   */
  uniqueMarketKey?: string | undefined;
};

/** @internal */
export const V1MorphoMarketPositionChain$inboundSchema: z.ZodNativeEnum<
  typeof V1MorphoMarketPositionChain
> = z.nativeEnum(V1MorphoMarketPositionChain);

/** @internal */
export const V1MorphoMarketPositionChain$outboundSchema: z.ZodNativeEnum<
  typeof V1MorphoMarketPositionChain
> = V1MorphoMarketPositionChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1MorphoMarketPositionChain$ {
  /** @deprecated use `V1MorphoMarketPositionChain$inboundSchema` instead. */
  export const inboundSchema = V1MorphoMarketPositionChain$inboundSchema;
  /** @deprecated use `V1MorphoMarketPositionChain$outboundSchema` instead. */
  export const outboundSchema = V1MorphoMarketPositionChain$outboundSchema;
}

/** @internal */
export const V1MorphoMarketPositionRequest$inboundSchema: z.ZodType<
  V1MorphoMarketPositionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chain: V1MorphoMarketPositionChain$inboundSchema.default("base"),
  user_address: z.string().default(
    "0x81d310Eb515E05EB26322e2DeDE9e75b754885A4",
  ),
  unique_market_key: z.string().default(
    "0x3b3769cfca57be2eaed03fcc5299c25691b77781a1e124e7a8d520eb9a7eabb5",
  ),
}).transform((v) => {
  return remap$(v, {
    "user_address": "userAddress",
    "unique_market_key": "uniqueMarketKey",
  });
});

/** @internal */
export type V1MorphoMarketPositionRequest$Outbound = {
  chain: string;
  user_address: string;
  unique_market_key: string;
};

/** @internal */
export const V1MorphoMarketPositionRequest$outboundSchema: z.ZodType<
  V1MorphoMarketPositionRequest$Outbound,
  z.ZodTypeDef,
  V1MorphoMarketPositionRequest
> = z.object({
  chain: V1MorphoMarketPositionChain$outboundSchema.default("base"),
  userAddress: z.string().default("0x81d310Eb515E05EB26322e2DeDE9e75b754885A4"),
  uniqueMarketKey: z.string().default(
    "0x3b3769cfca57be2eaed03fcc5299c25691b77781a1e124e7a8d520eb9a7eabb5",
  ),
}).transform((v) => {
  return remap$(v, {
    userAddress: "user_address",
    uniqueMarketKey: "unique_market_key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1MorphoMarketPositionRequest$ {
  /** @deprecated use `V1MorphoMarketPositionRequest$inboundSchema` instead. */
  export const inboundSchema = V1MorphoMarketPositionRequest$inboundSchema;
  /** @deprecated use `V1MorphoMarketPositionRequest$outboundSchema` instead. */
  export const outboundSchema = V1MorphoMarketPositionRequest$outboundSchema;
  /** @deprecated use `V1MorphoMarketPositionRequest$Outbound` instead. */
  export type Outbound = V1MorphoMarketPositionRequest$Outbound;
}

export function v1MorphoMarketPositionRequestToJSON(
  v1MorphoMarketPositionRequest: V1MorphoMarketPositionRequest,
): string {
  return JSON.stringify(
    V1MorphoMarketPositionRequest$outboundSchema.parse(
      v1MorphoMarketPositionRequest,
    ),
  );
}

export function v1MorphoMarketPositionRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1MorphoMarketPositionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1MorphoMarketPositionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1MorphoMarketPositionRequest' from JSON`,
  );
}
