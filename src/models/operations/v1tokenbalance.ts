/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const V1TokenBalanceChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type V1TokenBalanceChain = ClosedEnum<typeof V1TokenBalanceChain>;

export type V1TokenBalanceRequest = {
  chain?: V1TokenBalanceChain | undefined;
  /**
   * The user to get the token balance of.
   */
  user?: string | undefined;
  /**
   * The symbol or address of the token for which the balance is checked.
   */
  token?: string | undefined;
};

/** @internal */
export const V1TokenBalanceChain$inboundSchema: z.ZodNativeEnum<
  typeof V1TokenBalanceChain
> = z.nativeEnum(V1TokenBalanceChain);

/** @internal */
export const V1TokenBalanceChain$outboundSchema: z.ZodNativeEnum<
  typeof V1TokenBalanceChain
> = V1TokenBalanceChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1TokenBalanceChain$ {
  /** @deprecated use `V1TokenBalanceChain$inboundSchema` instead. */
  export const inboundSchema = V1TokenBalanceChain$inboundSchema;
  /** @deprecated use `V1TokenBalanceChain$outboundSchema` instead. */
  export const outboundSchema = V1TokenBalanceChain$outboundSchema;
}

/** @internal */
export const V1TokenBalanceRequest$inboundSchema: z.ZodType<
  V1TokenBalanceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chain: V1TokenBalanceChain$inboundSchema.default("arbitrum"),
  user: z.string().default("0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"),
  token: z.string().default("USDC"),
});

/** @internal */
export type V1TokenBalanceRequest$Outbound = {
  chain: string;
  user: string;
  token: string;
};

/** @internal */
export const V1TokenBalanceRequest$outboundSchema: z.ZodType<
  V1TokenBalanceRequest$Outbound,
  z.ZodTypeDef,
  V1TokenBalanceRequest
> = z.object({
  chain: V1TokenBalanceChain$outboundSchema.default("arbitrum"),
  user: z.string().default("0x29F20a192328eF1aD35e1564aBFf4Be9C5ce5f7B"),
  token: z.string().default("USDC"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1TokenBalanceRequest$ {
  /** @deprecated use `V1TokenBalanceRequest$inboundSchema` instead. */
  export const inboundSchema = V1TokenBalanceRequest$inboundSchema;
  /** @deprecated use `V1TokenBalanceRequest$outboundSchema` instead. */
  export const outboundSchema = V1TokenBalanceRequest$outboundSchema;
  /** @deprecated use `V1TokenBalanceRequest$Outbound` instead. */
  export type Outbound = V1TokenBalanceRequest$Outbound;
}

export function v1TokenBalanceRequestToJSON(
  v1TokenBalanceRequest: V1TokenBalanceRequest,
): string {
  return JSON.stringify(
    V1TokenBalanceRequest$outboundSchema.parse(v1TokenBalanceRequest),
  );
}

export function v1TokenBalanceRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1TokenBalanceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1TokenBalanceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1TokenBalanceRequest' from JSON`,
  );
}
