/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const V1MorphoVaultsChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type V1MorphoVaultsChain = ClosedEnum<typeof V1MorphoVaultsChain>;

export type V1MorphoVaultsRequest = {
  chain?: V1MorphoVaultsChain | undefined;
  /**
   * Symbol or address of the deposit token to filter vaults by. Optional parameter.
   */
  depositToken?: string | null | undefined;
};

/** @internal */
export const V1MorphoVaultsChain$inboundSchema: z.ZodNativeEnum<
  typeof V1MorphoVaultsChain
> = z.nativeEnum(V1MorphoVaultsChain);

/** @internal */
export const V1MorphoVaultsChain$outboundSchema: z.ZodNativeEnum<
  typeof V1MorphoVaultsChain
> = V1MorphoVaultsChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1MorphoVaultsChain$ {
  /** @deprecated use `V1MorphoVaultsChain$inboundSchema` instead. */
  export const inboundSchema = V1MorphoVaultsChain$inboundSchema;
  /** @deprecated use `V1MorphoVaultsChain$outboundSchema` instead. */
  export const outboundSchema = V1MorphoVaultsChain$outboundSchema;
}

/** @internal */
export const V1MorphoVaultsRequest$inboundSchema: z.ZodType<
  V1MorphoVaultsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chain: V1MorphoVaultsChain$inboundSchema.default("base"),
  deposit_token: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "deposit_token": "depositToken",
  });
});

/** @internal */
export type V1MorphoVaultsRequest$Outbound = {
  chain: string;
  deposit_token?: string | null | undefined;
};

/** @internal */
export const V1MorphoVaultsRequest$outboundSchema: z.ZodType<
  V1MorphoVaultsRequest$Outbound,
  z.ZodTypeDef,
  V1MorphoVaultsRequest
> = z.object({
  chain: V1MorphoVaultsChain$outboundSchema.default("base"),
  depositToken: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    depositToken: "deposit_token",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1MorphoVaultsRequest$ {
  /** @deprecated use `V1MorphoVaultsRequest$inboundSchema` instead. */
  export const inboundSchema = V1MorphoVaultsRequest$inboundSchema;
  /** @deprecated use `V1MorphoVaultsRequest$outboundSchema` instead. */
  export const outboundSchema = V1MorphoVaultsRequest$outboundSchema;
  /** @deprecated use `V1MorphoVaultsRequest$Outbound` instead. */
  export type Outbound = V1MorphoVaultsRequest$Outbound;
}

export function v1MorphoVaultsRequestToJSON(
  v1MorphoVaultsRequest: V1MorphoVaultsRequest,
): string {
  return JSON.stringify(
    V1MorphoVaultsRequest$outboundSchema.parse(v1MorphoVaultsRequest),
  );
}

export function v1MorphoVaultsRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1MorphoVaultsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1MorphoVaultsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1MorphoVaultsRequest' from JSON`,
  );
}
