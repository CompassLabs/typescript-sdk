/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const V1MorphoMarketChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type V1MorphoMarketChain = ClosedEnum<typeof V1MorphoMarketChain>;

export type V1MorphoMarketRequest = {
  chain?: V1MorphoMarketChain | undefined;
  /**
   * The key that uniquely identifies the market. This can be found using the 'Get Markets' endpoint.
   */
  uniqueMarketKey?: string | undefined;
};

/** @internal */
export const V1MorphoMarketChain$inboundSchema: z.ZodNativeEnum<
  typeof V1MorphoMarketChain
> = z.nativeEnum(V1MorphoMarketChain);

/** @internal */
export const V1MorphoMarketChain$outboundSchema: z.ZodNativeEnum<
  typeof V1MorphoMarketChain
> = V1MorphoMarketChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1MorphoMarketChain$ {
  /** @deprecated use `V1MorphoMarketChain$inboundSchema` instead. */
  export const inboundSchema = V1MorphoMarketChain$inboundSchema;
  /** @deprecated use `V1MorphoMarketChain$outboundSchema` instead. */
  export const outboundSchema = V1MorphoMarketChain$outboundSchema;
}

/** @internal */
export const V1MorphoMarketRequest$inboundSchema: z.ZodType<
  V1MorphoMarketRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chain: V1MorphoMarketChain$inboundSchema.default("base"),
  unique_market_key: z.string().default(
    "0x3b3769cfca57be2eaed03fcc5299c25691b77781a1e124e7a8d520eb9a7eabb5",
  ),
}).transform((v) => {
  return remap$(v, {
    "unique_market_key": "uniqueMarketKey",
  });
});

/** @internal */
export type V1MorphoMarketRequest$Outbound = {
  chain: string;
  unique_market_key: string;
};

/** @internal */
export const V1MorphoMarketRequest$outboundSchema: z.ZodType<
  V1MorphoMarketRequest$Outbound,
  z.ZodTypeDef,
  V1MorphoMarketRequest
> = z.object({
  chain: V1MorphoMarketChain$outboundSchema.default("base"),
  uniqueMarketKey: z.string().default(
    "0x3b3769cfca57be2eaed03fcc5299c25691b77781a1e124e7a8d520eb9a7eabb5",
  ),
}).transform((v) => {
  return remap$(v, {
    uniqueMarketKey: "unique_market_key",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1MorphoMarketRequest$ {
  /** @deprecated use `V1MorphoMarketRequest$inboundSchema` instead. */
  export const inboundSchema = V1MorphoMarketRequest$inboundSchema;
  /** @deprecated use `V1MorphoMarketRequest$outboundSchema` instead. */
  export const outboundSchema = V1MorphoMarketRequest$outboundSchema;
  /** @deprecated use `V1MorphoMarketRequest$Outbound` instead. */
  export type Outbound = V1MorphoMarketRequest$Outbound;
}

export function v1MorphoMarketRequestToJSON(
  v1MorphoMarketRequest: V1MorphoMarketRequest,
): string {
  return JSON.stringify(
    V1MorphoMarketRequest$outboundSchema.parse(v1MorphoMarketRequest),
  );
}

export function v1MorphoMarketRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1MorphoMarketRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1MorphoMarketRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1MorphoMarketRequest' from JSON`,
  );
}
