/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const V1VaultsVaultChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type V1VaultsVaultChain = ClosedEnum<typeof V1VaultsVaultChain>;

export type V1VaultsVaultRequest = {
  chain?: V1VaultsVaultChain | undefined;
  /**
   * Optional block number (defaults to latest).
   */
  block?: number | null | undefined;
  /**
   * The vault address of the desired vault position.
   */
  vaultAddress?: string | undefined;
  /**
   * The user address of the desired vault position. Only include if you would like the user position included in the response. Defaults to `None`.
   */
  userAddress?: string | null | undefined;
};

/** @internal */
export const V1VaultsVaultChain$inboundSchema: z.ZodNativeEnum<
  typeof V1VaultsVaultChain
> = z.nativeEnum(V1VaultsVaultChain);

/** @internal */
export const V1VaultsVaultChain$outboundSchema: z.ZodNativeEnum<
  typeof V1VaultsVaultChain
> = V1VaultsVaultChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1VaultsVaultChain$ {
  /** @deprecated use `V1VaultsVaultChain$inboundSchema` instead. */
  export const inboundSchema = V1VaultsVaultChain$inboundSchema;
  /** @deprecated use `V1VaultsVaultChain$outboundSchema` instead. */
  export const outboundSchema = V1VaultsVaultChain$outboundSchema;
}

/** @internal */
export const V1VaultsVaultRequest$inboundSchema: z.ZodType<
  V1VaultsVaultRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chain: V1VaultsVaultChain$inboundSchema.default("ethereum"),
  block: z.nullable(z.number().int()).optional(),
  vault_address: z.string().default(
    "0x182863131F9a4630fF9E27830d945B1413e347E8",
  ),
  user_address: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    "vault_address": "vaultAddress",
    "user_address": "userAddress",
  });
});

/** @internal */
export type V1VaultsVaultRequest$Outbound = {
  chain: string;
  block?: number | null | undefined;
  vault_address: string;
  user_address?: string | null | undefined;
};

/** @internal */
export const V1VaultsVaultRequest$outboundSchema: z.ZodType<
  V1VaultsVaultRequest$Outbound,
  z.ZodTypeDef,
  V1VaultsVaultRequest
> = z.object({
  chain: V1VaultsVaultChain$outboundSchema.default("ethereum"),
  block: z.nullable(z.number().int()).optional(),
  vaultAddress: z.string().default(
    "0x182863131F9a4630fF9E27830d945B1413e347E8",
  ),
  userAddress: z.nullable(z.string()).optional(),
}).transform((v) => {
  return remap$(v, {
    vaultAddress: "vault_address",
    userAddress: "user_address",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1VaultsVaultRequest$ {
  /** @deprecated use `V1VaultsVaultRequest$inboundSchema` instead. */
  export const inboundSchema = V1VaultsVaultRequest$inboundSchema;
  /** @deprecated use `V1VaultsVaultRequest$outboundSchema` instead. */
  export const outboundSchema = V1VaultsVaultRequest$outboundSchema;
  /** @deprecated use `V1VaultsVaultRequest$Outbound` instead. */
  export type Outbound = V1VaultsVaultRequest$Outbound;
}

export function v1VaultsVaultRequestToJSON(
  v1VaultsVaultRequest: V1VaultsVaultRequest,
): string {
  return JSON.stringify(
    V1VaultsVaultRequest$outboundSchema.parse(v1VaultsVaultRequest),
  );
}

export function v1VaultsVaultRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1VaultsVaultRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1VaultsVaultRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1VaultsVaultRequest' from JSON`,
  );
}
