/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const V1MorphoUserPositionChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type V1MorphoUserPositionChain = ClosedEnum<
  typeof V1MorphoUserPositionChain
>;

export type V1MorphoUserPositionRequest = {
  chain?: V1MorphoUserPositionChain | undefined;
  /**
   * The user wallet address of the desired user position.
   */
  userAddress?: string | undefined;
};

/** @internal */
export const V1MorphoUserPositionChain$inboundSchema: z.ZodNativeEnum<
  typeof V1MorphoUserPositionChain
> = z.nativeEnum(V1MorphoUserPositionChain);

/** @internal */
export const V1MorphoUserPositionChain$outboundSchema: z.ZodNativeEnum<
  typeof V1MorphoUserPositionChain
> = V1MorphoUserPositionChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1MorphoUserPositionChain$ {
  /** @deprecated use `V1MorphoUserPositionChain$inboundSchema` instead. */
  export const inboundSchema = V1MorphoUserPositionChain$inboundSchema;
  /** @deprecated use `V1MorphoUserPositionChain$outboundSchema` instead. */
  export const outboundSchema = V1MorphoUserPositionChain$outboundSchema;
}

/** @internal */
export const V1MorphoUserPositionRequest$inboundSchema: z.ZodType<
  V1MorphoUserPositionRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chain: V1MorphoUserPositionChain$inboundSchema.default("base"),
  user_address: z.string().default(
    "0x81d310Eb515E05EB26322e2DeDE9e75b754885A4",
  ),
}).transform((v) => {
  return remap$(v, {
    "user_address": "userAddress",
  });
});

/** @internal */
export type V1MorphoUserPositionRequest$Outbound = {
  chain: string;
  user_address: string;
};

/** @internal */
export const V1MorphoUserPositionRequest$outboundSchema: z.ZodType<
  V1MorphoUserPositionRequest$Outbound,
  z.ZodTypeDef,
  V1MorphoUserPositionRequest
> = z.object({
  chain: V1MorphoUserPositionChain$outboundSchema.default("base"),
  userAddress: z.string().default("0x81d310Eb515E05EB26322e2DeDE9e75b754885A4"),
}).transform((v) => {
  return remap$(v, {
    userAddress: "user_address",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1MorphoUserPositionRequest$ {
  /** @deprecated use `V1MorphoUserPositionRequest$inboundSchema` instead. */
  export const inboundSchema = V1MorphoUserPositionRequest$inboundSchema;
  /** @deprecated use `V1MorphoUserPositionRequest$outboundSchema` instead. */
  export const outboundSchema = V1MorphoUserPositionRequest$outboundSchema;
  /** @deprecated use `V1MorphoUserPositionRequest$Outbound` instead. */
  export type Outbound = V1MorphoUserPositionRequest$Outbound;
}

export function v1MorphoUserPositionRequestToJSON(
  v1MorphoUserPositionRequest: V1MorphoUserPositionRequest,
): string {
  return JSON.stringify(
    V1MorphoUserPositionRequest$outboundSchema.parse(
      v1MorphoUserPositionRequest,
    ),
  );
}

export function v1MorphoUserPositionRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1MorphoUserPositionRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1MorphoUserPositionRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1MorphoUserPositionRequest' from JSON`,
  );
}
