/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const V1GenericEnsChain = {
  Ethereum: "ethereum",
} as const;
export type V1GenericEnsChain = ClosedEnum<typeof V1GenericEnsChain>;

export type V1GenericEnsRequest = {
  chain?: V1GenericEnsChain | undefined;
  /**
   * The ENS name to resolve.
   */
  ensName?: string | undefined;
};

/** @internal */
export const V1GenericEnsChain$inboundSchema: z.ZodNativeEnum<
  typeof V1GenericEnsChain
> = z.nativeEnum(V1GenericEnsChain);

/** @internal */
export const V1GenericEnsChain$outboundSchema: z.ZodNativeEnum<
  typeof V1GenericEnsChain
> = V1GenericEnsChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1GenericEnsChain$ {
  /** @deprecated use `V1GenericEnsChain$inboundSchema` instead. */
  export const inboundSchema = V1GenericEnsChain$inboundSchema;
  /** @deprecated use `V1GenericEnsChain$outboundSchema` instead. */
  export const outboundSchema = V1GenericEnsChain$outboundSchema;
}

/** @internal */
export const V1GenericEnsRequest$inboundSchema: z.ZodType<
  V1GenericEnsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chain: V1GenericEnsChain$inboundSchema.default("ethereum"),
  ens_name: z.string().default("vitalik.eth"),
}).transform((v) => {
  return remap$(v, {
    "ens_name": "ensName",
  });
});

/** @internal */
export type V1GenericEnsRequest$Outbound = {
  chain: string;
  ens_name: string;
};

/** @internal */
export const V1GenericEnsRequest$outboundSchema: z.ZodType<
  V1GenericEnsRequest$Outbound,
  z.ZodTypeDef,
  V1GenericEnsRequest
> = z.object({
  chain: V1GenericEnsChain$outboundSchema.default("ethereum"),
  ensName: z.string().default("vitalik.eth"),
}).transform((v) => {
  return remap$(v, {
    ensName: "ens_name",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1GenericEnsRequest$ {
  /** @deprecated use `V1GenericEnsRequest$inboundSchema` instead. */
  export const inboundSchema = V1GenericEnsRequest$inboundSchema;
  /** @deprecated use `V1GenericEnsRequest$outboundSchema` instead. */
  export const outboundSchema = V1GenericEnsRequest$outboundSchema;
  /** @deprecated use `V1GenericEnsRequest$Outbound` instead. */
  export type Outbound = V1GenericEnsRequest$Outbound;
}

export function v1GenericEnsRequestToJSON(
  v1GenericEnsRequest: V1GenericEnsRequest,
): string {
  return JSON.stringify(
    V1GenericEnsRequest$outboundSchema.parse(v1GenericEnsRequest),
  );
}

export function v1GenericEnsRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1GenericEnsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1GenericEnsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1GenericEnsRequest' from JSON`,
  );
}
