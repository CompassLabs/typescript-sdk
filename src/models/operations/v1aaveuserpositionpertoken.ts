/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const V1AaveUserPositionPerTokenChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type V1AaveUserPositionPerTokenChain = ClosedEnum<
  typeof V1AaveUserPositionPerTokenChain
>;

export type V1AaveUserPositionPerTokenRequest = {
  chain?: V1AaveUserPositionPerTokenChain | undefined;
  /**
   * Optional block number (defaults to latest).
   */
  block?: number | null | undefined;
  /**
   * The user to fetch the token-specific position of.
   */
  user?: string | undefined;
  /**
   * The symbol or address of the asset to fetch the user's position on..
   */
  token?: string | undefined;
};

/** @internal */
export const V1AaveUserPositionPerTokenChain$inboundSchema: z.ZodNativeEnum<
  typeof V1AaveUserPositionPerTokenChain
> = z.nativeEnum(V1AaveUserPositionPerTokenChain);

/** @internal */
export const V1AaveUserPositionPerTokenChain$outboundSchema: z.ZodNativeEnum<
  typeof V1AaveUserPositionPerTokenChain
> = V1AaveUserPositionPerTokenChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AaveUserPositionPerTokenChain$ {
  /** @deprecated use `V1AaveUserPositionPerTokenChain$inboundSchema` instead. */
  export const inboundSchema = V1AaveUserPositionPerTokenChain$inboundSchema;
  /** @deprecated use `V1AaveUserPositionPerTokenChain$outboundSchema` instead. */
  export const outboundSchema = V1AaveUserPositionPerTokenChain$outboundSchema;
}

/** @internal */
export const V1AaveUserPositionPerTokenRequest$inboundSchema: z.ZodType<
  V1AaveUserPositionPerTokenRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chain: V1AaveUserPositionPerTokenChain$inboundSchema.default("base"),
  block: z.nullable(z.number().int()).optional(),
  user: z.string().default("0x3254f3b1918637ba924e3F18968Cb74219974b63"),
  token: z.string().default("USDC"),
});

/** @internal */
export type V1AaveUserPositionPerTokenRequest$Outbound = {
  chain: string;
  block?: number | null | undefined;
  user: string;
  token: string;
};

/** @internal */
export const V1AaveUserPositionPerTokenRequest$outboundSchema: z.ZodType<
  V1AaveUserPositionPerTokenRequest$Outbound,
  z.ZodTypeDef,
  V1AaveUserPositionPerTokenRequest
> = z.object({
  chain: V1AaveUserPositionPerTokenChain$outboundSchema.default("base"),
  block: z.nullable(z.number().int()).optional(),
  user: z.string().default("0x3254f3b1918637ba924e3F18968Cb74219974b63"),
  token: z.string().default("USDC"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1AaveUserPositionPerTokenRequest$ {
  /** @deprecated use `V1AaveUserPositionPerTokenRequest$inboundSchema` instead. */
  export const inboundSchema = V1AaveUserPositionPerTokenRequest$inboundSchema;
  /** @deprecated use `V1AaveUserPositionPerTokenRequest$outboundSchema` instead. */
  export const outboundSchema =
    V1AaveUserPositionPerTokenRequest$outboundSchema;
  /** @deprecated use `V1AaveUserPositionPerTokenRequest$Outbound` instead. */
  export type Outbound = V1AaveUserPositionPerTokenRequest$Outbound;
}

export function v1AaveUserPositionPerTokenRequestToJSON(
  v1AaveUserPositionPerTokenRequest: V1AaveUserPositionPerTokenRequest,
): string {
  return JSON.stringify(
    V1AaveUserPositionPerTokenRequest$outboundSchema.parse(
      v1AaveUserPositionPerTokenRequest,
    ),
  );
}

export function v1AaveUserPositionPerTokenRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1AaveUserPositionPerTokenRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1AaveUserPositionPerTokenRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1AaveUserPositionPerTokenRequest' from JSON`,
  );
}
