/*
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

import * as z from "zod";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";

export const V1TokenPriceChain = {
  Arbitrum: "arbitrum",
  Base: "base",
  Ethereum: "ethereum",
} as const;
export type V1TokenPriceChain = ClosedEnum<typeof V1TokenPriceChain>;

export type V1TokenPriceRequest = {
  chain?: V1TokenPriceChain | undefined;
  /**
   * Optional block number (defaults to latest).
   */
  block?: number | null | undefined;
  /**
   * The symbol or address of the token for which to get the price..
   */
  token?: string | undefined;
};

/** @internal */
export const V1TokenPriceChain$inboundSchema: z.ZodNativeEnum<
  typeof V1TokenPriceChain
> = z.nativeEnum(V1TokenPriceChain);

/** @internal */
export const V1TokenPriceChain$outboundSchema: z.ZodNativeEnum<
  typeof V1TokenPriceChain
> = V1TokenPriceChain$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1TokenPriceChain$ {
  /** @deprecated use `V1TokenPriceChain$inboundSchema` instead. */
  export const inboundSchema = V1TokenPriceChain$inboundSchema;
  /** @deprecated use `V1TokenPriceChain$outboundSchema` instead. */
  export const outboundSchema = V1TokenPriceChain$outboundSchema;
}

/** @internal */
export const V1TokenPriceRequest$inboundSchema: z.ZodType<
  V1TokenPriceRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  chain: V1TokenPriceChain$inboundSchema.default("ethereum"),
  block: z.nullable(z.number().int()).optional(),
  token: z.string().default("AAVE"),
});

/** @internal */
export type V1TokenPriceRequest$Outbound = {
  chain: string;
  block?: number | null | undefined;
  token: string;
};

/** @internal */
export const V1TokenPriceRequest$outboundSchema: z.ZodType<
  V1TokenPriceRequest$Outbound,
  z.ZodTypeDef,
  V1TokenPriceRequest
> = z.object({
  chain: V1TokenPriceChain$outboundSchema.default("ethereum"),
  block: z.nullable(z.number().int()).optional(),
  token: z.string().default("AAVE"),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace V1TokenPriceRequest$ {
  /** @deprecated use `V1TokenPriceRequest$inboundSchema` instead. */
  export const inboundSchema = V1TokenPriceRequest$inboundSchema;
  /** @deprecated use `V1TokenPriceRequest$outboundSchema` instead. */
  export const outboundSchema = V1TokenPriceRequest$outboundSchema;
  /** @deprecated use `V1TokenPriceRequest$Outbound` instead. */
  export type Outbound = V1TokenPriceRequest$Outbound;
}

export function v1TokenPriceRequestToJSON(
  v1TokenPriceRequest: V1TokenPriceRequest,
): string {
  return JSON.stringify(
    V1TokenPriceRequest$outboundSchema.parse(v1TokenPriceRequest),
  );
}

export function v1TokenPriceRequestFromJSON(
  jsonString: string,
): SafeParseResult<V1TokenPriceRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => V1TokenPriceRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'V1TokenPriceRequest' from JSON`,
  );
}
